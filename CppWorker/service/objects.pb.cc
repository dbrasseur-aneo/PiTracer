// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: objects.proto

#include "objects.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ArmoniK {
namespace api {
namespace grpc {
namespace v1 {
constexpr Empty::Empty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EmptyDefaultTypeInternal {
  constexpr EmptyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmptyDefaultTypeInternal _Empty_default_instance_;
constexpr TaskOptions_OptionsEntry_DoNotUse::TaskOptions_OptionsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TaskOptions_OptionsEntry_DoNotUseDefaultTypeInternal {
  constexpr TaskOptions_OptionsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskOptions_OptionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TaskOptions_OptionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskOptions_OptionsEntry_DoNotUseDefaultTypeInternal _TaskOptions_OptionsEntry_DoNotUse_default_instance_;
constexpr TaskOptions::TaskOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : options_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , maxduration_(nullptr)
  , maxretries_(0)
  , priority_(0){}
struct TaskOptionsDefaultTypeInternal {
  constexpr TaskOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskOptionsDefaultTypeInternal() {}
  union {
    TaskOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskOptionsDefaultTypeInternal _TaskOptions_default_instance_;
constexpr Configuration::Configuration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_chunk_max_size_(0){}
struct ConfigurationDefaultTypeInternal {
  constexpr ConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigurationDefaultTypeInternal() {}
  union {
    Configuration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigurationDefaultTypeInternal _Configuration_default_instance_;
constexpr Output_Error::Output_Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : details_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kill_sub_tasks_(false){}
struct Output_ErrorDefaultTypeInternal {
  constexpr Output_ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Output_ErrorDefaultTypeInternal() {}
  union {
    Output_Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Output_ErrorDefaultTypeInternal _Output_Error_default_instance_;
constexpr Output::Output(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)

  , _oneof_case_{}{}
struct OutputDefaultTypeInternal {
  constexpr OutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutputDefaultTypeInternal() {}
  union {
    Output _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutputDefaultTypeInternal _Output_default_instance_;
constexpr TaskRequest::TaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expected_output_keys_()
  , data_dependencies_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskRequestDefaultTypeInternal {
  constexpr TaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskRequestDefaultTypeInternal() {}
  union {
    TaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskRequestDefaultTypeInternal _TaskRequest_default_instance_;
constexpr InitKeyedDataStream::InitKeyedDataStream(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct InitKeyedDataStreamDefaultTypeInternal {
  constexpr InitKeyedDataStreamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitKeyedDataStreamDefaultTypeInternal() {}
  union {
    InitKeyedDataStream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitKeyedDataStreamDefaultTypeInternal _InitKeyedDataStream_default_instance_;
constexpr DataChunk::DataChunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct DataChunkDefaultTypeInternal {
  constexpr DataChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataChunkDefaultTypeInternal() {}
  union {
    DataChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataChunkDefaultTypeInternal _DataChunk_default_instance_;
constexpr TaskRequestHeader::TaskRequestHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expected_output_keys_()
  , data_dependencies_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskRequestHeaderDefaultTypeInternal {
  constexpr TaskRequestHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskRequestHeaderDefaultTypeInternal() {}
  union {
    TaskRequestHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskRequestHeaderDefaultTypeInternal _TaskRequestHeader_default_instance_;
constexpr InitTaskRequest::InitTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct InitTaskRequestDefaultTypeInternal {
  constexpr InitTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitTaskRequestDefaultTypeInternal() {}
  union {
    InitTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitTaskRequestDefaultTypeInternal _InitTaskRequest_default_instance_;
constexpr TaskId::TaskId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskIdDefaultTypeInternal {
  constexpr TaskIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskIdDefaultTypeInternal() {}
  union {
    TaskId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskIdDefaultTypeInternal _TaskId_default_instance_;
constexpr TaskIdList::TaskIdList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_ids_(){}
struct TaskIdListDefaultTypeInternal {
  constexpr TaskIdListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskIdListDefaultTypeInternal() {}
  union {
    TaskIdList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskIdListDefaultTypeInternal _TaskIdList_default_instance_;
constexpr StatusCount::StatusCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)

  , count_(0){}
struct StatusCountDefaultTypeInternal {
  constexpr StatusCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusCountDefaultTypeInternal() {}
  union {
    StatusCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusCountDefaultTypeInternal _StatusCount_default_instance_;
constexpr Count::Count(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct CountDefaultTypeInternal {
  constexpr CountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CountDefaultTypeInternal() {}
  union {
    Count _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CountDefaultTypeInternal _Count_default_instance_;
constexpr ResultRequest::ResultRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResultRequestDefaultTypeInternal {
  constexpr ResultRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultRequestDefaultTypeInternal() {}
  union {
    ResultRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultRequestDefaultTypeInternal _ResultRequest_default_instance_;
constexpr Error::Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_status_(0)
{}
struct ErrorDefaultTypeInternal {
  constexpr ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorDefaultTypeInternal _Error_default_instance_;
constexpr TaskError::TaskError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_()
  , task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskErrorDefaultTypeInternal {
  constexpr TaskErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskErrorDefaultTypeInternal() {}
  union {
    TaskError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskErrorDefaultTypeInternal _TaskError_default_instance_;
constexpr CreateTaskReply_TaskIds::CreateTaskReply_TaskIds(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_(){}
struct CreateTaskReply_TaskIdsDefaultTypeInternal {
  constexpr CreateTaskReply_TaskIdsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTaskReply_TaskIdsDefaultTypeInternal() {}
  union {
    CreateTaskReply_TaskIds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTaskReply_TaskIdsDefaultTypeInternal _CreateTaskReply_TaskIds_default_instance_;
constexpr CreateTaskReply::CreateTaskReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CreateTaskReplyDefaultTypeInternal {
  constexpr CreateTaskReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTaskReplyDefaultTypeInternal() {}
  union {
    CreateTaskReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTaskReplyDefaultTypeInternal _CreateTaskReply_default_instance_;
constexpr TaskList::TaskList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : taskids_(){}
struct TaskListDefaultTypeInternal {
  constexpr TaskListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskListDefaultTypeInternal() {}
  union {
    TaskList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskListDefaultTypeInternal _TaskList_default_instance_;
constexpr TaskIdWithStatus::TaskIdWithStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : taskid_(nullptr)
  , status_(0)
{}
struct TaskIdWithStatusDefaultTypeInternal {
  constexpr TaskIdWithStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskIdWithStatusDefaultTypeInternal() {}
  union {
    TaskIdWithStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskIdWithStatusDefaultTypeInternal _TaskIdWithStatus_default_instance_;
}  // namespace v1
}  // namespace grpc
}  // namespace api
}  // namespace ArmoniK
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_objects_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_objects_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_objects_2eproto = nullptr;

const uint32_t TableStruct_objects_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskOptions_OptionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskOptions_OptionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskOptions_OptionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskOptions_OptionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskOptions, options_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskOptions, maxduration_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskOptions, maxretries_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskOptions, priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Configuration, data_chunk_max_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Output_Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Output_Error, details_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Output_Error, kill_sub_tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Output, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Output, status_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Output, Type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskRequest, id_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskRequest, expected_output_keys_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskRequest, data_dependencies_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskRequest, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::InitKeyedDataStream, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::InitKeyedDataStream, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::InitKeyedDataStream, Type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::DataChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::DataChunk, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::DataChunk, Type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskRequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskRequestHeader, id_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskRequestHeader, expected_output_keys_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskRequestHeader, data_dependencies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::InitTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::InitTaskRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::InitTaskRequest, Type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskId, session_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskId, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskIdList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskIdList, task_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::StatusCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::StatusCount, status_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::StatusCount, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Count, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Count, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ResultRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ResultRequest, session_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ResultRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Error, task_status_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::Error, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskError, task_id_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskError, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::CreateTaskReply_TaskIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::CreateTaskReply_TaskIds, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::CreateTaskReply, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::CreateTaskReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::CreateTaskReply, Data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskList, taskids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskIdWithStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskIdWithStatus, taskid_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::TaskIdWithStatus, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ArmoniK::api::grpc::v1::Empty)},
  { 6, 14, -1, sizeof(::ArmoniK::api::grpc::v1::TaskOptions_OptionsEntry_DoNotUse)},
  { 16, -1, -1, sizeof(::ArmoniK::api::grpc::v1::TaskOptions)},
  { 26, -1, -1, sizeof(::ArmoniK::api::grpc::v1::Configuration)},
  { 33, -1, -1, sizeof(::ArmoniK::api::grpc::v1::Output_Error)},
  { 41, -1, -1, sizeof(::ArmoniK::api::grpc::v1::Output)},
  { 51, -1, -1, sizeof(::ArmoniK::api::grpc::v1::TaskRequest)},
  { 61, -1, -1, sizeof(::ArmoniK::api::grpc::v1::InitKeyedDataStream)},
  { 70, -1, -1, sizeof(::ArmoniK::api::grpc::v1::DataChunk)},
  { 79, -1, -1, sizeof(::ArmoniK::api::grpc::v1::TaskRequestHeader)},
  { 88, -1, -1, sizeof(::ArmoniK::api::grpc::v1::InitTaskRequest)},
  { 97, -1, -1, sizeof(::ArmoniK::api::grpc::v1::TaskId)},
  { 105, -1, -1, sizeof(::ArmoniK::api::grpc::v1::TaskIdList)},
  { 112, -1, -1, sizeof(::ArmoniK::api::grpc::v1::StatusCount)},
  { 120, -1, -1, sizeof(::ArmoniK::api::grpc::v1::Count)},
  { 127, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ResultRequest)},
  { 135, -1, -1, sizeof(::ArmoniK::api::grpc::v1::Error)},
  { 143, -1, -1, sizeof(::ArmoniK::api::grpc::v1::TaskError)},
  { 151, -1, -1, sizeof(::ArmoniK::api::grpc::v1::CreateTaskReply_TaskIds)},
  { 158, -1, -1, sizeof(::ArmoniK::api::grpc::v1::CreateTaskReply)},
  { 167, -1, -1, sizeof(::ArmoniK::api::grpc::v1::TaskList)},
  { 174, -1, -1, sizeof(::ArmoniK::api::grpc::v1::TaskIdWithStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_TaskOptions_OptionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_TaskOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_Configuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_Output_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_Output_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_TaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_InitKeyedDataStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_DataChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_TaskRequestHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_InitTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_TaskId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_TaskIdList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_StatusCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_Count_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ResultRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_TaskError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_CreateTaskReply_TaskIds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_CreateTaskReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_TaskList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_TaskIdWithStatus_default_instance_),
};

const char descriptor_table_protodef_objects_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\robjects.proto\022\023ArmoniK.api.grpc.v1\032\036go"
  "ogle/protobuf/duration.proto\032\021task_statu"
  "s.proto\"\007\n\005Empty\"\323\001\n\013TaskOptions\022>\n\007Opti"
  "ons\030\001 \003(\0132-.ArmoniK.api.grpc.v1.TaskOpti"
  "ons.OptionsEntry\022.\n\013MaxDuration\030\002 \001(\0132\031."
  "google.protobuf.Duration\022\022\n\nMaxRetries\030\003"
  " \001(\005\022\020\n\010Priority\030\004 \001(\005\032.\n\014OptionsEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\",\n\rConfig"
  "uration\022\033\n\023data_chunk_max_size\030\001 \001(\005\"\334\001\n"
  "\006Output\022:\n\006status\030\001 \001(\0162*.ArmoniK.api.gr"
  "pc.v1.TaskStatus.TaskStatus\022(\n\002ok\030\002 \001(\0132"
  "\032.ArmoniK.api.grpc.v1.EmptyH\000\0222\n\005error\030\003"
  " \001(\0132!.ArmoniK.api.grpc.v1.Output.ErrorH"
  "\000\0320\n\005Error\022\017\n\007details\030\001 \001(\t\022\026\n\016kill_sub_"
  "tasks\030\002 \001(\010B\006\n\004Type\"c\n\013TaskRequest\022\n\n\002id"
  "\030\001 \001(\t\022\034\n\024expected_output_keys\030\002 \003(\t\022\031\n\021"
  "data_dependencies\030\003 \003(\t\022\017\n\007payload\030\004 \001(\014"
  "\"C\n\023InitKeyedDataStream\022\r\n\003key\030\001 \001(\tH\000\022\025"
  "\n\013last_result\030\002 \001(\010H\000B\006\n\004Type\";\n\tDataChu"
  "nk\022\016\n\004data\030\001 \001(\014H\000\022\026\n\014dataComplete\030\002 \001(\010"
  "H\000B\006\n\004Type\"X\n\021TaskRequestHeader\022\n\n\002id\030\001 "
  "\001(\t\022\034\n\024expected_output_keys\030\003 \003(\t\022\031\n\021dat"
  "a_dependencies\030\004 \003(\t\"h\n\017InitTaskRequest\022"
  "8\n\006header\030\001 \001(\0132&.ArmoniK.api.grpc.v1.Ta"
  "skRequestHeaderH\000\022\023\n\tlast_task\030\002 \001(\010H\000B\006"
  "\n\004Type\"\'\n\006TaskId\022\017\n\007session\030\001 \001(\t\022\014\n\004tas"
  "k\030\002 \001(\t\"\036\n\nTaskIdList\022\020\n\010task_ids\030\001 \003(\t\""
  "X\n\013StatusCount\022:\n\006status\030\001 \001(\0162*.ArmoniK"
  ".api.grpc.v1.TaskStatus.TaskStatus\022\r\n\005co"
  "unt\030\002 \001(\005\"9\n\005Count\0220\n\006values\030\001 \003(\0132 .Arm"
  "oniK.api.grpc.v1.StatusCount\"-\n\rResultRe"
  "quest\022\017\n\007session\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\"X\n\005E"
  "rror\022\?\n\013task_status\030\001 \001(\0162*.ArmoniK.api."
  "grpc.v1.TaskStatus.TaskStatus\022\016\n\006detail\030"
  "\002 \001(\t\"G\n\tTaskError\022\017\n\007task_id\030\001 \001(\t\022)\n\005e"
  "rror\030\002 \003(\0132\032.ArmoniK.api.grpc.v1.Error\"\261"
  "\001\n\017CreateTaskReply\0221\n\013successfull\030\001 \001(\0132"
  "\032.ArmoniK.api.grpc.v1.EmptyH\000\022K\n\023non_suc"
  "cessfull_ids\030\002 \001(\0132,.ArmoniK.api.grpc.v1"
  ".CreateTaskReply.TaskIdsH\000\032\026\n\007TaskIds\022\013\n"
  "\003ids\030\001 \003(\tB\006\n\004Data\"8\n\010TaskList\022,\n\007taskId"
  "s\030\001 \003(\0132\033.ArmoniK.api.grpc.v1.TaskId\"{\n\020"
  "TaskIdWithStatus\022+\n\006TaskId\030\001 \001(\0132\033.Armon"
  "iK.api.grpc.v1.TaskId\022:\n\006Status\030\002 \001(\0162*."
  "ArmoniK.api.grpc.v1.TaskStatus.TaskStatu"
  "sB\026\252\002\023ArmoniK.Api.gRPC.V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_objects_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_task_5fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_objects_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_objects_2eproto = {
  false, false, 1833, descriptor_table_protodef_objects_2eproto, "objects.proto", 
  &descriptor_table_objects_2eproto_once, descriptor_table_objects_2eproto_deps, 2, 22,
  schemas, file_default_instances, TableStruct_objects_2eproto::offsets,
  file_level_metadata_objects_2eproto, file_level_enum_descriptors_objects_2eproto, file_level_service_descriptors_objects_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_objects_2eproto_getter() {
  return &descriptor_table_objects_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_objects_2eproto(&descriptor_table_objects_2eproto);
namespace ArmoniK {
namespace api {
namespace grpc {
namespace v1 {

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[0]);
}

// ===================================================================

TaskOptions_OptionsEntry_DoNotUse::TaskOptions_OptionsEntry_DoNotUse() {}
TaskOptions_OptionsEntry_DoNotUse::TaskOptions_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TaskOptions_OptionsEntry_DoNotUse::MergeFrom(const TaskOptions_OptionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TaskOptions_OptionsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[1]);
}

// ===================================================================

class TaskOptions::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& maxduration(const TaskOptions* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
TaskOptions::_Internal::maxduration(const TaskOptions* msg) {
  return *msg->maxduration_;
}
void TaskOptions::clear_maxduration() {
  if (GetArenaForAllocation() == nullptr && maxduration_ != nullptr) {
    delete maxduration_;
  }
  maxduration_ = nullptr;
}
TaskOptions::TaskOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  options_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.TaskOptions)
}
TaskOptions::TaskOptions(const TaskOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  options_.MergeFrom(from.options_);
  if (from._internal_has_maxduration()) {
    maxduration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.maxduration_);
  } else {
    maxduration_ = nullptr;
  }
  ::memcpy(&maxretries_, &from.maxretries_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&maxretries_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.TaskOptions)
}

inline void TaskOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&maxduration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&maxduration_)) + sizeof(priority_));
}

TaskOptions::~TaskOptions() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.TaskOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete maxduration_;
}

void TaskOptions::ArenaDtor(void* object) {
  TaskOptions* _this = reinterpret_cast< TaskOptions* >(object);
  (void)_this;
  _this->options_. ~MapField();
}
inline void TaskOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TaskOptions::ArenaDtor);
  }
}
void TaskOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.TaskOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  if (GetArenaForAllocation() == nullptr && maxduration_ != nullptr) {
    delete maxduration_;
  }
  maxduration_ = nullptr;
  ::memset(&maxretries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&maxretries_)) + sizeof(priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> Options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&options_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration MaxDuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxduration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxRetries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          maxretries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.TaskOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> Options = 1;
  if (!this->_internal_options().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ArmoniK.api.grpc.v1.TaskOptions.OptionsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ArmoniK.api.grpc.v1.TaskOptions.OptionsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_options().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_options().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_options().begin();
          it != this->_internal_options().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TaskOptions_OptionsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_options().begin();
          it != this->_internal_options().end(); ++it) {
        target = TaskOptions_OptionsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.protobuf.Duration MaxDuration = 2;
  if (this->_internal_has_maxduration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::maxduration(this), target, stream);
  }

  // int32 MaxRetries = 3;
  if (this->_internal_maxretries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_maxretries(), target);
  }

  // int32 Priority = 4;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.TaskOptions)
  return target;
}

size_t TaskOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.TaskOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> Options = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_options_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_options().begin();
      it != this->_internal_options().end(); ++it) {
    total_size += TaskOptions_OptionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.Duration MaxDuration = 2;
  if (this->_internal_has_maxduration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maxduration_);
  }

  // int32 MaxRetries = 3;
  if (this->_internal_maxretries() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_maxretries());
  }

  // int32 Priority = 4;
  if (this->_internal_priority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskOptions::GetClassData() const { return &_class_data_; }

void TaskOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskOptions *>(to)->MergeFrom(
      static_cast<const TaskOptions &>(from));
}


void TaskOptions::MergeFrom(const TaskOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.TaskOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (from._internal_has_maxduration()) {
    _internal_mutable_maxduration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_maxduration());
  }
  if (from._internal_maxretries() != 0) {
    _internal_set_maxretries(from._internal_maxretries());
  }
  if (from._internal_priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskOptions::CopyFrom(const TaskOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.TaskOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskOptions::IsInitialized() const {
  return true;
}

void TaskOptions::InternalSwap(TaskOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  options_.InternalSwap(&other->options_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskOptions, priority_)
      + sizeof(TaskOptions::priority_)
      - PROTOBUF_FIELD_OFFSET(TaskOptions, maxduration_)>(
          reinterpret_cast<char*>(&maxduration_),
          reinterpret_cast<char*>(&other->maxduration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[2]);
}

// ===================================================================

class Configuration::_Internal {
 public:
};

Configuration::Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.Configuration)
}
Configuration::Configuration(const Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_chunk_max_size_ = from.data_chunk_max_size_;
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.Configuration)
}

inline void Configuration::SharedCtor() {
data_chunk_max_size_ = 0;
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.Configuration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Configuration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Configuration::ArenaDtor(void* object) {
  Configuration* _this = reinterpret_cast< Configuration* >(object);
  (void)_this;
}
void Configuration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.Configuration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_chunk_max_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 data_chunk_max_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          data_chunk_max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Configuration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.Configuration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data_chunk_max_size = 1;
  if (this->_internal_data_chunk_max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_data_chunk_max_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.Configuration)
  return target;
}

size_t Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.Configuration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 data_chunk_max_size = 1;
  if (this->_internal_data_chunk_max_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_data_chunk_max_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Configuration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Configuration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Configuration::GetClassData() const { return &_class_data_; }

void Configuration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Configuration *>(to)->MergeFrom(
      static_cast<const Configuration &>(from));
}


void Configuration::MergeFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_data_chunk_max_size() != 0) {
    _internal_set_data_chunk_max_size(from._internal_data_chunk_max_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Configuration::CopyFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  return true;
}

void Configuration::InternalSwap(Configuration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_chunk_max_size_, other->data_chunk_max_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Configuration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[3]);
}

// ===================================================================

class Output_Error::_Internal {
 public:
};

Output_Error::Output_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.Output.Error)
}
Output_Error::Output_Error(const Output_Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_details(), 
      GetArenaForAllocation());
  }
  kill_sub_tasks_ = from.kill_sub_tasks_;
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.Output.Error)
}

inline void Output_Error::SharedCtor() {
details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
kill_sub_tasks_ = false;
}

Output_Error::~Output_Error() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.Output.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Output_Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  details_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Output_Error::ArenaDtor(void* object) {
  Output_Error* _this = reinterpret_cast< Output_Error* >(object);
  (void)_this;
}
void Output_Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Output_Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Output_Error::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.Output.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.ClearToEmpty();
  kill_sub_tasks_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Output_Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_details();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.Output.Error.details"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool kill_sub_tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          kill_sub_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Output_Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.Output.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string details = 1;
  if (!this->_internal_details().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_details().data(), static_cast<int>(this->_internal_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.Output.Error.details");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_details(), target);
  }

  // bool kill_sub_tasks = 2;
  if (this->_internal_kill_sub_tasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_kill_sub_tasks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.Output.Error)
  return target;
}

size_t Output_Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.Output.Error)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string details = 1;
  if (!this->_internal_details().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_details());
  }

  // bool kill_sub_tasks = 2;
  if (this->_internal_kill_sub_tasks() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Output_Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Output_Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Output_Error::GetClassData() const { return &_class_data_; }

void Output_Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Output_Error *>(to)->MergeFrom(
      static_cast<const Output_Error &>(from));
}


void Output_Error::MergeFrom(const Output_Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.Output.Error)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_details().empty()) {
    _internal_set_details(from._internal_details());
  }
  if (from._internal_kill_sub_tasks() != 0) {
    _internal_set_kill_sub_tasks(from._internal_kill_sub_tasks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Output_Error::CopyFrom(const Output_Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.Output.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output_Error::IsInitialized() const {
  return true;
}

void Output_Error::InternalSwap(Output_Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &details_, lhs_arena,
      &other->details_, rhs_arena
  );
  swap(kill_sub_tasks_, other->kill_sub_tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Output_Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[4]);
}

// ===================================================================

class Output::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::Empty& ok(const Output* msg);
  static const ::ArmoniK::api::grpc::v1::Output_Error& error(const Output* msg);
};

const ::ArmoniK::api::grpc::v1::Empty&
Output::_Internal::ok(const Output* msg) {
  return *msg->Type_.ok_;
}
const ::ArmoniK::api::grpc::v1::Output_Error&
Output::_Internal::error(const Output* msg) {
  return *msg->Type_.error_;
}
void Output::set_allocated_ok(::ArmoniK::api::grpc::v1::Empty* ok) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (ok) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::Empty>::GetOwningArena(ok);
    if (message_arena != submessage_arena) {
      ok = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ok, submessage_arena);
    }
    set_has_ok();
    Type_.ok_ = ok;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.Output.ok)
}
void Output::set_allocated_error(::ArmoniK::api::grpc::v1::Output_Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::Output_Error>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    Type_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.Output.error)
}
Output::Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  clear_has_Type();
  switch (from.Type_case()) {
    case kOk: {
      _internal_mutable_ok()->::ArmoniK::api::grpc::v1::Empty::MergeFrom(from._internal_ok());
      break;
    }
    case kError: {
      _internal_mutable_error()->::ArmoniK::api::grpc::v1::Output_Error::MergeFrom(from._internal_error());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.Output)
}

inline void Output::SharedCtor() {
status_ = 0;
clear_has_Type();
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.Output)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Output::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Type()) {
    clear_Type();
  }
}

void Output::ArenaDtor(void* object) {
  Output* _this = reinterpret_cast< Output* >(object);
  (void)_this;
}
void Output::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Output::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.Output)
  switch (Type_case()) {
    case kOk: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.ok_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.error_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.Output)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  clear_Type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.TaskStatus.TaskStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::ArmoniK::api::grpc::v1::TaskStatus::TaskStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.Empty ok = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ok(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.Output.Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Output::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.Output)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.TaskStatus.TaskStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .ArmoniK.api.grpc.v1.Empty ok = 2;
  if (_internal_has_ok()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ok(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.Output.Error error = 3;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.Output)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.TaskStatus.TaskStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  switch (Type_case()) {
    // .ArmoniK.api.grpc.v1.Empty ok = 2;
    case kOk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.ok_);
      break;
    }
    // .ArmoniK.api.grpc.v1.Output.Error error = 3;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.error_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Output::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Output::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Output::GetClassData() const { return &_class_data_; }

void Output::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Output *>(to)->MergeFrom(
      static_cast<const Output &>(from));
}


void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.Output)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  switch (from.Type_case()) {
    case kOk: {
      _internal_mutable_ok()->::ArmoniK::api::grpc::v1::Empty::MergeFrom(from._internal_ok());
      break;
    }
    case kError: {
      _internal_mutable_error()->::ArmoniK::api::grpc::v1::Output_Error::MergeFrom(from._internal_error());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Output::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[5]);
}

// ===================================================================

class TaskRequest::_Internal {
 public:
};

TaskRequest::TaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  expected_output_keys_(arena),
  data_dependencies_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.TaskRequest)
}
TaskRequest::TaskRequest(const TaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      expected_output_keys_(from.expected_output_keys_),
      data_dependencies_(from.data_dependencies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.TaskRequest)
}

inline void TaskRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskRequest::~TaskRequest() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.TaskRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskRequest::ArenaDtor(void* object) {
  TaskRequest* _this = reinterpret_cast< TaskRequest* >(object);
  (void)_this;
}
void TaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.TaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expected_output_keys_.Clear();
  data_dependencies_.Clear();
  id_.ClearToEmpty();
  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.TaskRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string expected_output_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_expected_output_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.TaskRequest.expected_output_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string data_dependencies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data_dependencies();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.TaskRequest.data_dependencies"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.TaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.TaskRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated string expected_output_keys = 2;
  for (int i = 0, n = this->_internal_expected_output_keys_size(); i < n; i++) {
    const auto& s = this->_internal_expected_output_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.TaskRequest.expected_output_keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated string data_dependencies = 3;
  for (int i = 0, n = this->_internal_data_dependencies_size(); i < n; i++) {
    const auto& s = this->_internal_data_dependencies(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.TaskRequest.data_dependencies");
    target = stream->WriteString(3, s, target);
  }

  // bytes payload = 4;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.TaskRequest)
  return target;
}

size_t TaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.TaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string expected_output_keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(expected_output_keys_.size());
  for (int i = 0, n = expected_output_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      expected_output_keys_.Get(i));
  }

  // repeated string data_dependencies = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_dependencies_.size());
  for (int i = 0, n = data_dependencies_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      data_dependencies_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes payload = 4;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskRequest::GetClassData() const { return &_class_data_; }

void TaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskRequest *>(to)->MergeFrom(
      static_cast<const TaskRequest &>(from));
}


void TaskRequest::MergeFrom(const TaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.TaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  expected_output_keys_.MergeFrom(from.expected_output_keys_);
  data_dependencies_.MergeFrom(from.data_dependencies_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskRequest::CopyFrom(const TaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.TaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRequest::IsInitialized() const {
  return true;
}

void TaskRequest::InternalSwap(TaskRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  expected_output_keys_.InternalSwap(&other->expected_output_keys_);
  data_dependencies_.InternalSwap(&other->data_dependencies_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[6]);
}

// ===================================================================

class InitKeyedDataStream::_Internal {
 public:
};

InitKeyedDataStream::InitKeyedDataStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.InitKeyedDataStream)
}
InitKeyedDataStream::InitKeyedDataStream(const InitKeyedDataStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Type();
  switch (from.Type_case()) {
    case kKey: {
      _internal_set_key(from._internal_key());
      break;
    }
    case kLastResult: {
      _internal_set_last_result(from._internal_last_result());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.InitKeyedDataStream)
}

inline void InitKeyedDataStream::SharedCtor() {
clear_has_Type();
}

InitKeyedDataStream::~InitKeyedDataStream() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.InitKeyedDataStream)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitKeyedDataStream::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Type()) {
    clear_Type();
  }
}

void InitKeyedDataStream::ArenaDtor(void* object) {
  InitKeyedDataStream* _this = reinterpret_cast< InitKeyedDataStream* >(object);
  (void)_this;
}
void InitKeyedDataStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitKeyedDataStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitKeyedDataStream::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.InitKeyedDataStream)
  switch (Type_case()) {
    case kKey: {
      Type_.key_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kLastResult: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void InitKeyedDataStream::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.InitKeyedDataStream)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitKeyedDataStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.InitKeyedDataStream.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool last_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_last_result(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitKeyedDataStream::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.InitKeyedDataStream)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (_internal_has_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.InitKeyedDataStream.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bool last_result = 2;
  if (_internal_has_last_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_last_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.InitKeyedDataStream)
  return target;
}

size_t InitKeyedDataStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.InitKeyedDataStream)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Type_case()) {
    // string key = 1;
    case kKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
      break;
    }
    // bool last_result = 2;
    case kLastResult: {
      total_size += 1 + 1;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitKeyedDataStream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitKeyedDataStream::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitKeyedDataStream::GetClassData() const { return &_class_data_; }

void InitKeyedDataStream::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitKeyedDataStream *>(to)->MergeFrom(
      static_cast<const InitKeyedDataStream &>(from));
}


void InitKeyedDataStream::MergeFrom(const InitKeyedDataStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.InitKeyedDataStream)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Type_case()) {
    case kKey: {
      _internal_set_key(from._internal_key());
      break;
    }
    case kLastResult: {
      _internal_set_last_result(from._internal_last_result());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitKeyedDataStream::CopyFrom(const InitKeyedDataStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.InitKeyedDataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitKeyedDataStream::IsInitialized() const {
  return true;
}

void InitKeyedDataStream::InternalSwap(InitKeyedDataStream* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitKeyedDataStream::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[7]);
}

// ===================================================================

class DataChunk::_Internal {
 public:
};

DataChunk::DataChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.DataChunk)
}
DataChunk::DataChunk(const DataChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Type();
  switch (from.Type_case()) {
    case kData: {
      _internal_set_data(from._internal_data());
      break;
    }
    case kDataComplete: {
      _internal_set_datacomplete(from._internal_datacomplete());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.DataChunk)
}

inline void DataChunk::SharedCtor() {
clear_has_Type();
}

DataChunk::~DataChunk() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.DataChunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Type()) {
    clear_Type();
  }
}

void DataChunk::ArenaDtor(void* object) {
  DataChunk* _this = reinterpret_cast< DataChunk* >(object);
  (void)_this;
}
void DataChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataChunk::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.DataChunk)
  switch (Type_case()) {
    case kData: {
      Type_.data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kDataComplete: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void DataChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.DataChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dataComplete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_datacomplete(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.DataChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (_internal_has_data()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // bool dataComplete = 2;
  if (_internal_has_datacomplete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_datacomplete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.DataChunk)
  return target;
}

size_t DataChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.DataChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Type_case()) {
    // bytes data = 1;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
      break;
    }
    // bool dataComplete = 2;
    case kDataComplete: {
      total_size += 1 + 1;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataChunk::GetClassData() const { return &_class_data_; }

void DataChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataChunk *>(to)->MergeFrom(
      static_cast<const DataChunk &>(from));
}


void DataChunk::MergeFrom(const DataChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.DataChunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Type_case()) {
    case kData: {
      _internal_set_data(from._internal_data());
      break;
    }
    case kDataComplete: {
      _internal_set_datacomplete(from._internal_datacomplete());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataChunk::CopyFrom(const DataChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.DataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChunk::IsInitialized() const {
  return true;
}

void DataChunk::InternalSwap(DataChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataChunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[8]);
}

// ===================================================================

class TaskRequestHeader::_Internal {
 public:
};

TaskRequestHeader::TaskRequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  expected_output_keys_(arena),
  data_dependencies_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.TaskRequestHeader)
}
TaskRequestHeader::TaskRequestHeader(const TaskRequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      expected_output_keys_(from.expected_output_keys_),
      data_dependencies_(from.data_dependencies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.TaskRequestHeader)
}

inline void TaskRequestHeader::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskRequestHeader::~TaskRequestHeader() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.TaskRequestHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskRequestHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskRequestHeader::ArenaDtor(void* object) {
  TaskRequestHeader* _this = reinterpret_cast< TaskRequestHeader* >(object);
  (void)_this;
}
void TaskRequestHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskRequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskRequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.TaskRequestHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expected_output_keys_.Clear();
  data_dependencies_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskRequestHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.TaskRequestHeader.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string expected_output_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_expected_output_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.TaskRequestHeader.expected_output_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string data_dependencies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data_dependencies();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.TaskRequestHeader.data_dependencies"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskRequestHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.TaskRequestHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.TaskRequestHeader.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated string expected_output_keys = 3;
  for (int i = 0, n = this->_internal_expected_output_keys_size(); i < n; i++) {
    const auto& s = this->_internal_expected_output_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.TaskRequestHeader.expected_output_keys");
    target = stream->WriteString(3, s, target);
  }

  // repeated string data_dependencies = 4;
  for (int i = 0, n = this->_internal_data_dependencies_size(); i < n; i++) {
    const auto& s = this->_internal_data_dependencies(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.TaskRequestHeader.data_dependencies");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.TaskRequestHeader)
  return target;
}

size_t TaskRequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.TaskRequestHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string expected_output_keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(expected_output_keys_.size());
  for (int i = 0, n = expected_output_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      expected_output_keys_.Get(i));
  }

  // repeated string data_dependencies = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_dependencies_.size());
  for (int i = 0, n = data_dependencies_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      data_dependencies_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskRequestHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskRequestHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskRequestHeader::GetClassData() const { return &_class_data_; }

void TaskRequestHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskRequestHeader *>(to)->MergeFrom(
      static_cast<const TaskRequestHeader &>(from));
}


void TaskRequestHeader::MergeFrom(const TaskRequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.TaskRequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  expected_output_keys_.MergeFrom(from.expected_output_keys_);
  data_dependencies_.MergeFrom(from.data_dependencies_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskRequestHeader::CopyFrom(const TaskRequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.TaskRequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRequestHeader::IsInitialized() const {
  return true;
}

void TaskRequestHeader::InternalSwap(TaskRequestHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  expected_output_keys_.InternalSwap(&other->expected_output_keys_);
  data_dependencies_.InternalSwap(&other->data_dependencies_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskRequestHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[9]);
}

// ===================================================================

class InitTaskRequest::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::TaskRequestHeader& header(const InitTaskRequest* msg);
};

const ::ArmoniK::api::grpc::v1::TaskRequestHeader&
InitTaskRequest::_Internal::header(const InitTaskRequest* msg) {
  return *msg->Type_.header_;
}
void InitTaskRequest::set_allocated_header(::ArmoniK::api::grpc::v1::TaskRequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::TaskRequestHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
    Type_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.InitTaskRequest.header)
}
InitTaskRequest::InitTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.InitTaskRequest)
}
InitTaskRequest::InitTaskRequest(const InitTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Type();
  switch (from.Type_case()) {
    case kHeader: {
      _internal_mutable_header()->::ArmoniK::api::grpc::v1::TaskRequestHeader::MergeFrom(from._internal_header());
      break;
    }
    case kLastTask: {
      _internal_set_last_task(from._internal_last_task());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.InitTaskRequest)
}

inline void InitTaskRequest::SharedCtor() {
clear_has_Type();
}

InitTaskRequest::~InitTaskRequest() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.InitTaskRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Type()) {
    clear_Type();
  }
}

void InitTaskRequest::ArenaDtor(void* object) {
  InitTaskRequest* _this = reinterpret_cast< InitTaskRequest* >(object);
  (void)_this;
}
void InitTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitTaskRequest::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.InitTaskRequest)
  switch (Type_case()) {
    case kHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.header_;
      }
      break;
    }
    case kLastTask: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void InitTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.InitTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.TaskRequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool last_task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_last_task(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.InitTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.TaskRequestHeader header = 1;
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bool last_task = 2;
  if (_internal_has_last_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_last_task(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.InitTaskRequest)
  return target;
}

size_t InitTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.InitTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Type_case()) {
    // .ArmoniK.api.grpc.v1.TaskRequestHeader header = 1;
    case kHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.header_);
      break;
    }
    // bool last_task = 2;
    case kLastTask: {
      total_size += 1 + 1;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitTaskRequest::GetClassData() const { return &_class_data_; }

void InitTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitTaskRequest *>(to)->MergeFrom(
      static_cast<const InitTaskRequest &>(from));
}


void InitTaskRequest::MergeFrom(const InitTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.InitTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Type_case()) {
    case kHeader: {
      _internal_mutable_header()->::ArmoniK::api::grpc::v1::TaskRequestHeader::MergeFrom(from._internal_header());
      break;
    }
    case kLastTask: {
      _internal_set_last_task(from._internal_last_task());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitTaskRequest::CopyFrom(const InitTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.InitTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitTaskRequest::IsInitialized() const {
  return true;
}

void InitTaskRequest::InternalSwap(InitTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitTaskRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[10]);
}

// ===================================================================

class TaskId::_Internal {
 public:
};

TaskId::TaskId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.TaskId)
}
TaskId::TaskId(const TaskId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session().empty()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  task_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task().empty()) {
    task_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.TaskId)
}

inline void TaskId::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
task_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskId::~TaskId() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.TaskId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskId::ArenaDtor(void* object) {
  TaskId* _this = reinterpret_cast< TaskId* >(object);
  (void)_this;
}
void TaskId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskId::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.TaskId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.ClearToEmpty();
  task_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.TaskId.session"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.TaskId.task"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.TaskId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (!this->_internal_session().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.TaskId.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // string task = 2;
  if (!this->_internal_task().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task().data(), static_cast<int>(this->_internal_task().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.TaskId.task");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.TaskId)
  return target;
}

size_t TaskId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.TaskId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session = 1;
  if (!this->_internal_session().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  // string task = 2;
  if (!this->_internal_task().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskId::GetClassData() const { return &_class_data_; }

void TaskId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskId *>(to)->MergeFrom(
      static_cast<const TaskId &>(from));
}


void TaskId::MergeFrom(const TaskId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.TaskId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session().empty()) {
    _internal_set_session(from._internal_session());
  }
  if (!from._internal_task().empty()) {
    _internal_set_task(from._internal_task());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskId::CopyFrom(const TaskId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.TaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskId::IsInitialized() const {
  return true;
}

void TaskId::InternalSwap(TaskId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_, lhs_arena,
      &other->task_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[11]);
}

// ===================================================================

class TaskIdList::_Internal {
 public:
};

TaskIdList::TaskIdList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  task_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.TaskIdList)
}
TaskIdList::TaskIdList(const TaskIdList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_ids_(from.task_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.TaskIdList)
}

inline void TaskIdList::SharedCtor() {
}

TaskIdList::~TaskIdList() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.TaskIdList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskIdList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskIdList::ArenaDtor(void* object) {
  TaskIdList* _this = reinterpret_cast< TaskIdList* >(object);
  (void)_this;
}
void TaskIdList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskIdList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskIdList::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.TaskIdList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskIdList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string task_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_task_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.TaskIdList.task_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskIdList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.TaskIdList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string task_ids = 1;
  for (int i = 0, n = this->_internal_task_ids_size(); i < n; i++) {
    const auto& s = this->_internal_task_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.TaskIdList.task_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.TaskIdList)
  return target;
}

size_t TaskIdList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.TaskIdList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string task_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(task_ids_.size());
  for (int i = 0, n = task_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      task_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskIdList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskIdList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskIdList::GetClassData() const { return &_class_data_; }

void TaskIdList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskIdList *>(to)->MergeFrom(
      static_cast<const TaskIdList &>(from));
}


void TaskIdList::MergeFrom(const TaskIdList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.TaskIdList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  task_ids_.MergeFrom(from.task_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskIdList::CopyFrom(const TaskIdList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.TaskIdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskIdList::IsInitialized() const {
  return true;
}

void TaskIdList::InternalSwap(TaskIdList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  task_ids_.InternalSwap(&other->task_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskIdList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[12]);
}

// ===================================================================

class StatusCount::_Internal {
 public:
};

StatusCount::StatusCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.StatusCount)
}
StatusCount::StatusCount(const StatusCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&status_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.StatusCount)
}

inline void StatusCount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&status_)) + sizeof(count_));
}

StatusCount::~StatusCount() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.StatusCount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatusCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatusCount::ArenaDtor(void* object) {
  StatusCount* _this = reinterpret_cast< StatusCount* >(object);
  (void)_this;
}
void StatusCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusCount::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.StatusCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.TaskStatus.TaskStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::ArmoniK::api::grpc::v1::TaskStatus::TaskStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.StatusCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.TaskStatus.TaskStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // int32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.StatusCount)
  return target;
}

size_t StatusCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.StatusCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.TaskStatus.TaskStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatusCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusCount::GetClassData() const { return &_class_data_; }

void StatusCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatusCount *>(to)->MergeFrom(
      static_cast<const StatusCount &>(from));
}


void StatusCount::MergeFrom(const StatusCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.StatusCount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusCount::CopyFrom(const StatusCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.StatusCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusCount::IsInitialized() const {
  return true;
}

void StatusCount::InternalSwap(StatusCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusCount, count_)
      + sizeof(StatusCount::count_)
      - PROTOBUF_FIELD_OFFSET(StatusCount, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[13]);
}

// ===================================================================

class Count::_Internal {
 public:
};

Count::Count(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.Count)
}
Count::Count(const Count& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.Count)
}

inline void Count::SharedCtor() {
}

Count::~Count() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.Count)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Count::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Count::ArenaDtor(void* object) {
  Count* _this = reinterpret_cast< Count* >(object);
  (void)_this;
}
void Count::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Count::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Count::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.Count)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Count::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ArmoniK.api.grpc.v1.StatusCount values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Count::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.Count)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ArmoniK.api.grpc.v1.StatusCount values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.Count)
  return target;
}

size_t Count::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.Count)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ArmoniK.api.grpc.v1.StatusCount values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Count::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Count::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Count::GetClassData() const { return &_class_data_; }

void Count::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Count *>(to)->MergeFrom(
      static_cast<const Count &>(from));
}


void Count::MergeFrom(const Count& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.Count)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Count::CopyFrom(const Count& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.Count)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Count::IsInitialized() const {
  return true;
}

void Count::InternalSwap(Count* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Count::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[14]);
}

// ===================================================================

class ResultRequest::_Internal {
 public:
};

ResultRequest::ResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ResultRequest)
}
ResultRequest::ResultRequest(const ResultRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session().empty()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ResultRequest)
}

inline void ResultRequest::SharedCtor() {
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResultRequest::~ResultRequest() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ResultRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResultRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResultRequest::ArenaDtor(void* object) {
  ResultRequest* _this = reinterpret_cast< ResultRequest* >(object);
  (void)_this;
}
void ResultRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ResultRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.ClearToEmpty();
  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.ResultRequest.session"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.ResultRequest.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResultRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ResultRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (!this->_internal_session().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.ResultRequest.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.ResultRequest.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ResultRequest)
  return target;
}

size_t ResultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ResultRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session = 1;
  if (!this->_internal_session().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResultRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResultRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResultRequest::GetClassData() const { return &_class_data_; }

void ResultRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResultRequest *>(to)->MergeFrom(
      static_cast<const ResultRequest &>(from));
}


void ResultRequest::MergeFrom(const ResultRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ResultRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session().empty()) {
    _internal_set_session(from._internal_session());
  }
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResultRequest::CopyFrom(const ResultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ResultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultRequest::IsInitialized() const {
  return true;
}

void ResultRequest::InternalSwap(ResultRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[15]);
}

// ===================================================================

class Error::_Internal {
 public:
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detail().empty()) {
    detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detail(), 
      GetArenaForAllocation());
  }
  task_status_ = from.task_status_;
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.Error)
}

inline void Error::SharedCtor() {
detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
task_status_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.ClearToEmpty();
  task_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.TaskStatus.TaskStatus task_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_task_status(static_cast<::ArmoniK::api::grpc::v1::TaskStatus::TaskStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.Error.detail"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.TaskStatus.TaskStatus task_status = 1;
  if (this->_internal_task_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_task_status(), target);
  }

  // string detail = 2;
  if (!this->_internal_detail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.Error.detail");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.Error)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string detail = 2;
  if (!this->_internal_detail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // .ArmoniK.api.grpc.v1.TaskStatus.TaskStatus task_status = 1;
  if (this->_internal_task_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_task_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error::GetClassData() const { return &_class_data_; }

void Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Error *>(to)->MergeFrom(
      static_cast<const Error &>(from));
}


void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.Error)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_detail().empty()) {
    _internal_set_detail(from._internal_detail());
  }
  if (from._internal_task_status() != 0) {
    _internal_set_task_status(from._internal_task_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &detail_, lhs_arena,
      &other->detail_, rhs_arena
  );
  swap(task_status_, other->task_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[16]);
}

// ===================================================================

class TaskError::_Internal {
 public:
};

TaskError::TaskError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  error_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.TaskError)
}
TaskError::TaskError(const TaskError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      error_(from.error_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.TaskError)
}

inline void TaskError::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskError::~TaskError() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.TaskError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskError::ArenaDtor(void* object) {
  TaskError* _this = reinterpret_cast< TaskError* >(object);
  (void)_this;
}
void TaskError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskError::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.TaskError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.Clear();
  task_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.TaskError.task_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ArmoniK.api.grpc.v1.Error error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.TaskError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.TaskError.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  // repeated .ArmoniK.api.grpc.v1.Error error = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_error_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_error(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.TaskError)
  return target;
}

size_t TaskError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.TaskError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ArmoniK.api.grpc.v1.Error error = 2;
  total_size += 1UL * this->_internal_error_size();
  for (const auto& msg : this->error_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskError::GetClassData() const { return &_class_data_; }

void TaskError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskError *>(to)->MergeFrom(
      static_cast<const TaskError &>(from));
}


void TaskError::MergeFrom(const TaskError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.TaskError)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  error_.MergeFrom(from.error_);
  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskError::CopyFrom(const TaskError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.TaskError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskError::IsInitialized() const {
  return true;
}

void TaskError::InternalSwap(TaskError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  error_.InternalSwap(&other->error_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, lhs_arena,
      &other->task_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[17]);
}

// ===================================================================

class CreateTaskReply_TaskIds::_Internal {
 public:
};

CreateTaskReply_TaskIds::CreateTaskReply_TaskIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds)
}
CreateTaskReply_TaskIds::CreateTaskReply_TaskIds(const CreateTaskReply_TaskIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds)
}

inline void CreateTaskReply_TaskIds::SharedCtor() {
}

CreateTaskReply_TaskIds::~CreateTaskReply_TaskIds() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTaskReply_TaskIds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateTaskReply_TaskIds::ArenaDtor(void* object) {
  CreateTaskReply_TaskIds* _this = reinterpret_cast< CreateTaskReply_TaskIds* >(object);
  (void)_this;
}
void CreateTaskReply_TaskIds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTaskReply_TaskIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTaskReply_TaskIds::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTaskReply_TaskIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateTaskReply_TaskIds::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds.ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds)
  return target;
}

size_t CreateTaskReply_TaskIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTaskReply_TaskIds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTaskReply_TaskIds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTaskReply_TaskIds::GetClassData() const { return &_class_data_; }

void CreateTaskReply_TaskIds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateTaskReply_TaskIds *>(to)->MergeFrom(
      static_cast<const CreateTaskReply_TaskIds &>(from));
}


void CreateTaskReply_TaskIds::MergeFrom(const CreateTaskReply_TaskIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTaskReply_TaskIds::CopyFrom(const CreateTaskReply_TaskIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTaskReply_TaskIds::IsInitialized() const {
  return true;
}

void CreateTaskReply_TaskIds::InternalSwap(CreateTaskReply_TaskIds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTaskReply_TaskIds::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[18]);
}

// ===================================================================

class CreateTaskReply::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::Empty& successfull(const CreateTaskReply* msg);
  static const ::ArmoniK::api::grpc::v1::CreateTaskReply_TaskIds& non_successfull_ids(const CreateTaskReply* msg);
};

const ::ArmoniK::api::grpc::v1::Empty&
CreateTaskReply::_Internal::successfull(const CreateTaskReply* msg) {
  return *msg->Data_.successfull_;
}
const ::ArmoniK::api::grpc::v1::CreateTaskReply_TaskIds&
CreateTaskReply::_Internal::non_successfull_ids(const CreateTaskReply* msg) {
  return *msg->Data_.non_successfull_ids_;
}
void CreateTaskReply::set_allocated_successfull(::ArmoniK::api::grpc::v1::Empty* successfull) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Data();
  if (successfull) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::Empty>::GetOwningArena(successfull);
    if (message_arena != submessage_arena) {
      successfull = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, successfull, submessage_arena);
    }
    set_has_successfull();
    Data_.successfull_ = successfull;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.CreateTaskReply.successfull)
}
void CreateTaskReply::set_allocated_non_successfull_ids(::ArmoniK::api::grpc::v1::CreateTaskReply_TaskIds* non_successfull_ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Data();
  if (non_successfull_ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::CreateTaskReply_TaskIds>::GetOwningArena(non_successfull_ids);
    if (message_arena != submessage_arena) {
      non_successfull_ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, non_successfull_ids, submessage_arena);
    }
    set_has_non_successfull_ids();
    Data_.non_successfull_ids_ = non_successfull_ids;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.CreateTaskReply.non_successfull_ids)
}
CreateTaskReply::CreateTaskReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.CreateTaskReply)
}
CreateTaskReply::CreateTaskReply(const CreateTaskReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Data();
  switch (from.Data_case()) {
    case kSuccessfull: {
      _internal_mutable_successfull()->::ArmoniK::api::grpc::v1::Empty::MergeFrom(from._internal_successfull());
      break;
    }
    case kNonSuccessfullIds: {
      _internal_mutable_non_successfull_ids()->::ArmoniK::api::grpc::v1::CreateTaskReply_TaskIds::MergeFrom(from._internal_non_successfull_ids());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.CreateTaskReply)
}

inline void CreateTaskReply::SharedCtor() {
clear_has_Data();
}

CreateTaskReply::~CreateTaskReply() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.CreateTaskReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTaskReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Data()) {
    clear_Data();
  }
}

void CreateTaskReply::ArenaDtor(void* object) {
  CreateTaskReply* _this = reinterpret_cast< CreateTaskReply* >(object);
  (void)_this;
}
void CreateTaskReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTaskReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTaskReply::clear_Data() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.CreateTaskReply)
  switch (Data_case()) {
    case kSuccessfull: {
      if (GetArenaForAllocation() == nullptr) {
        delete Data_.successfull_;
      }
      break;
    }
    case kNonSuccessfullIds: {
      if (GetArenaForAllocation() == nullptr) {
        delete Data_.non_successfull_ids_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void CreateTaskReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.CreateTaskReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTaskReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.Empty successfull = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_successfull(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds non_successfull_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_successfull_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateTaskReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.CreateTaskReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.Empty successfull = 1;
  if (_internal_has_successfull()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::successfull(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds non_successfull_ids = 2;
  if (_internal_has_non_successfull_ids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::non_successfull_ids(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.CreateTaskReply)
  return target;
}

size_t CreateTaskReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.CreateTaskReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Data_case()) {
    // .ArmoniK.api.grpc.v1.Empty successfull = 1;
    case kSuccessfull: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Data_.successfull_);
      break;
    }
    // .ArmoniK.api.grpc.v1.CreateTaskReply.TaskIds non_successfull_ids = 2;
    case kNonSuccessfullIds: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Data_.non_successfull_ids_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTaskReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTaskReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTaskReply::GetClassData() const { return &_class_data_; }

void CreateTaskReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateTaskReply *>(to)->MergeFrom(
      static_cast<const CreateTaskReply &>(from));
}


void CreateTaskReply::MergeFrom(const CreateTaskReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.CreateTaskReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Data_case()) {
    case kSuccessfull: {
      _internal_mutable_successfull()->::ArmoniK::api::grpc::v1::Empty::MergeFrom(from._internal_successfull());
      break;
    }
    case kNonSuccessfullIds: {
      _internal_mutable_non_successfull_ids()->::ArmoniK::api::grpc::v1::CreateTaskReply_TaskIds::MergeFrom(from._internal_non_successfull_ids());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTaskReply::CopyFrom(const CreateTaskReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.CreateTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTaskReply::IsInitialized() const {
  return true;
}

void CreateTaskReply::InternalSwap(CreateTaskReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Data_, other->Data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTaskReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[19]);
}

// ===================================================================

class TaskList::_Internal {
 public:
};

TaskList::TaskList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  taskids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.TaskList)
}
TaskList::TaskList(const TaskList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      taskids_(from.taskids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.TaskList)
}

inline void TaskList::SharedCtor() {
}

TaskList::~TaskList() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.TaskList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskList::ArenaDtor(void* object) {
  TaskList* _this = reinterpret_cast< TaskList* >(object);
  (void)_this;
}
void TaskList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskList::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.TaskList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ArmoniK.api.grpc.v1.TaskId taskIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taskids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.TaskList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ArmoniK.api.grpc.v1.TaskId taskIds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taskids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_taskids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.TaskList)
  return target;
}

size_t TaskList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.TaskList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ArmoniK.api.grpc.v1.TaskId taskIds = 1;
  total_size += 1UL * this->_internal_taskids_size();
  for (const auto& msg : this->taskids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskList::GetClassData() const { return &_class_data_; }

void TaskList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskList *>(to)->MergeFrom(
      static_cast<const TaskList &>(from));
}


void TaskList::MergeFrom(const TaskList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.TaskList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  taskids_.MergeFrom(from.taskids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskList::CopyFrom(const TaskList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.TaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskList::IsInitialized() const {
  return true;
}

void TaskList::InternalSwap(TaskList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  taskids_.InternalSwap(&other->taskids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[20]);
}

// ===================================================================

class TaskIdWithStatus::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::TaskId& taskid(const TaskIdWithStatus* msg);
};

const ::ArmoniK::api::grpc::v1::TaskId&
TaskIdWithStatus::_Internal::taskid(const TaskIdWithStatus* msg) {
  return *msg->taskid_;
}
TaskIdWithStatus::TaskIdWithStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.TaskIdWithStatus)
}
TaskIdWithStatus::TaskIdWithStatus(const TaskIdWithStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_taskid()) {
    taskid_ = new ::ArmoniK::api::grpc::v1::TaskId(*from.taskid_);
  } else {
    taskid_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.TaskIdWithStatus)
}

inline void TaskIdWithStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&taskid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(status_));
}

TaskIdWithStatus::~TaskIdWithStatus() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.TaskIdWithStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskIdWithStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete taskid_;
}

void TaskIdWithStatus::ArenaDtor(void* object) {
  TaskIdWithStatus* _this = reinterpret_cast< TaskIdWithStatus* >(object);
  (void)_this;
}
void TaskIdWithStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskIdWithStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskIdWithStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.TaskIdWithStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && taskid_ != nullptr) {
    delete taskid_;
  }
  taskid_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskIdWithStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.TaskId TaskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_taskid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.TaskStatus.TaskStatus Status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::ArmoniK::api::grpc::v1::TaskStatus::TaskStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskIdWithStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.TaskIdWithStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.TaskId TaskId = 1;
  if (this->_internal_has_taskid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::taskid(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.TaskStatus.TaskStatus Status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.TaskIdWithStatus)
  return target;
}

size_t TaskIdWithStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.TaskIdWithStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.TaskId TaskId = 1;
  if (this->_internal_has_taskid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taskid_);
  }

  // .ArmoniK.api.grpc.v1.TaskStatus.TaskStatus Status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskIdWithStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskIdWithStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskIdWithStatus::GetClassData() const { return &_class_data_; }

void TaskIdWithStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskIdWithStatus *>(to)->MergeFrom(
      static_cast<const TaskIdWithStatus &>(from));
}


void TaskIdWithStatus::MergeFrom(const TaskIdWithStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.TaskIdWithStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_taskid()) {
    _internal_mutable_taskid()->::ArmoniK::api::grpc::v1::TaskId::MergeFrom(from._internal_taskid());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskIdWithStatus::CopyFrom(const TaskIdWithStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.TaskIdWithStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskIdWithStatus::IsInitialized() const {
  return true;
}

void TaskIdWithStatus::InternalSwap(TaskIdWithStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskIdWithStatus, status_)
      + sizeof(TaskIdWithStatus::status_)
      - PROTOBUF_FIELD_OFFSET(TaskIdWithStatus, taskid_)>(
          reinterpret_cast<char*>(&taskid_),
          reinterpret_cast<char*>(&other->taskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskIdWithStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_objects_2eproto_getter, &descriptor_table_objects_2eproto_once,
      file_level_metadata_objects_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace grpc
}  // namespace api
}  // namespace ArmoniK
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::Empty* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::TaskOptions_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::TaskOptions_OptionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::TaskOptions_OptionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::TaskOptions* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::TaskOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::TaskOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::Configuration* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::Configuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::Configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::Output_Error* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::Output_Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::Output_Error >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::Output* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::TaskRequest* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::TaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::TaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::InitKeyedDataStream* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::InitKeyedDataStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::InitKeyedDataStream >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::DataChunk* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::DataChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::DataChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::TaskRequestHeader* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::TaskRequestHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::TaskRequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::InitTaskRequest* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::InitTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::InitTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::TaskId* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::TaskId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::TaskId >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::TaskIdList* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::TaskIdList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::TaskIdList >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::StatusCount* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::StatusCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::StatusCount >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::Count* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::Count >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::Count >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ResultRequest* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ResultRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ResultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::Error* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::TaskError* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::TaskError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::TaskError >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::CreateTaskReply_TaskIds* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::CreateTaskReply_TaskIds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::CreateTaskReply_TaskIds >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::CreateTaskReply* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::CreateTaskReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::CreateTaskReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::TaskList* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::TaskList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::TaskList >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::TaskIdWithStatus* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::TaskIdWithStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::TaskIdWithStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
