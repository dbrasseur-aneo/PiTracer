// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worker_service.proto

#include "worker_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ArmoniK {
namespace api {
namespace grpc {
namespace v1 {
constexpr ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUseDefaultTypeInternal {
  constexpr ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUseDefaultTypeInternal _ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse_default_instance_;
constexpr ProcessRequest_ComputeRequest_InitRequest::ProcessRequest_ComputeRequest_InitRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_options_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , expected_output_keys_()
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , configuration_(nullptr)
  , payload_(nullptr){}
struct ProcessRequest_ComputeRequest_InitRequestDefaultTypeInternal {
  constexpr ProcessRequest_ComputeRequest_InitRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessRequest_ComputeRequest_InitRequestDefaultTypeInternal() {}
  union {
    ProcessRequest_ComputeRequest_InitRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessRequest_ComputeRequest_InitRequestDefaultTypeInternal _ProcessRequest_ComputeRequest_InitRequest_default_instance_;
constexpr ProcessRequest_ComputeRequest_InitData::ProcessRequest_ComputeRequest_InitData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ProcessRequest_ComputeRequest_InitDataDefaultTypeInternal {
  constexpr ProcessRequest_ComputeRequest_InitDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessRequest_ComputeRequest_InitDataDefaultTypeInternal() {}
  union {
    ProcessRequest_ComputeRequest_InitData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessRequest_ComputeRequest_InitDataDefaultTypeInternal _ProcessRequest_ComputeRequest_InitData_default_instance_;
constexpr ProcessRequest_ComputeRequest::ProcessRequest_ComputeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ProcessRequest_ComputeRequestDefaultTypeInternal {
  constexpr ProcessRequest_ComputeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessRequest_ComputeRequestDefaultTypeInternal() {}
  union {
    ProcessRequest_ComputeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessRequest_ComputeRequestDefaultTypeInternal _ProcessRequest_ComputeRequest_default_instance_;
constexpr ProcessRequest_CreateTask::ProcessRequest_CreateTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reply_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reply_(nullptr){}
struct ProcessRequest_CreateTaskDefaultTypeInternal {
  constexpr ProcessRequest_CreateTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessRequest_CreateTaskDefaultTypeInternal() {}
  union {
    ProcessRequest_CreateTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessRequest_CreateTaskDefaultTypeInternal _ProcessRequest_CreateTask_default_instance_;
constexpr ProcessRequest_DataReply_Init::ProcessRequest_DataReply_Init(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct ProcessRequest_DataReply_InitDefaultTypeInternal {
  constexpr ProcessRequest_DataReply_InitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessRequest_DataReply_InitDefaultTypeInternal() {}
  union {
    ProcessRequest_DataReply_Init _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessRequest_DataReply_InitDefaultTypeInternal _ProcessRequest_DataReply_Init_default_instance_;
constexpr ProcessRequest_DataReply::ProcessRequest_DataReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reply_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct ProcessRequest_DataReplyDefaultTypeInternal {
  constexpr ProcessRequest_DataReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessRequest_DataReplyDefaultTypeInternal() {}
  union {
    ProcessRequest_DataReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessRequest_DataReplyDefaultTypeInternal _ProcessRequest_DataReply_default_instance_;
constexpr ProcessRequest::ProcessRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ProcessRequestDefaultTypeInternal {
  constexpr ProcessRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessRequestDefaultTypeInternal() {}
  union {
    ProcessRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessRequestDefaultTypeInternal _ProcessRequest_default_instance_;
constexpr ProcessReply_Result::ProcessReply_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ProcessReply_ResultDefaultTypeInternal {
  constexpr ProcessReply_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessReply_ResultDefaultTypeInternal() {}
  union {
    ProcessReply_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessReply_ResultDefaultTypeInternal _ProcessReply_Result_default_instance_;
constexpr ProcessReply_CreateSmallTaskRequest::ProcessReply_CreateSmallTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_requests_()
  , task_options_(nullptr){}
struct ProcessReply_CreateSmallTaskRequestDefaultTypeInternal {
  constexpr ProcessReply_CreateSmallTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessReply_CreateSmallTaskRequestDefaultTypeInternal() {}
  union {
    ProcessReply_CreateSmallTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessReply_CreateSmallTaskRequestDefaultTypeInternal _ProcessReply_CreateSmallTaskRequest_default_instance_;
constexpr ProcessReply_CreateLargeTaskRequest_InitRequest::ProcessReply_CreateLargeTaskRequest_InitRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_options_(nullptr){}
struct ProcessReply_CreateLargeTaskRequest_InitRequestDefaultTypeInternal {
  constexpr ProcessReply_CreateLargeTaskRequest_InitRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessReply_CreateLargeTaskRequest_InitRequestDefaultTypeInternal() {}
  union {
    ProcessReply_CreateLargeTaskRequest_InitRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessReply_CreateLargeTaskRequest_InitRequestDefaultTypeInternal _ProcessReply_CreateLargeTaskRequest_InitRequest_default_instance_;
constexpr ProcessReply_CreateLargeTaskRequest::ProcessReply_CreateLargeTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ProcessReply_CreateLargeTaskRequestDefaultTypeInternal {
  constexpr ProcessReply_CreateLargeTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessReply_CreateLargeTaskRequestDefaultTypeInternal() {}
  union {
    ProcessReply_CreateLargeTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessReply_CreateLargeTaskRequestDefaultTypeInternal _ProcessReply_CreateLargeTaskRequest_default_instance_;
constexpr ProcessReply_DataRequest::ProcessReply_DataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProcessReply_DataRequestDefaultTypeInternal {
  constexpr ProcessReply_DataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessReply_DataRequestDefaultTypeInternal() {}
  union {
    ProcessReply_DataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessReply_DataRequestDefaultTypeInternal _ProcessReply_DataRequest_default_instance_;
constexpr ProcessReply::ProcessReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct ProcessReplyDefaultTypeInternal {
  constexpr ProcessReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessReplyDefaultTypeInternal() {}
  union {
    ProcessReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessReplyDefaultTypeInternal _ProcessReply_default_instance_;
}  // namespace v1
}  // namespace grpc
}  // namespace api
}  // namespace ArmoniK
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_worker_5fservice_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_worker_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_worker_5fservice_2eproto = nullptr;

const uint32_t TableStruct_worker_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest, configuration_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest, task_id_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest, task_options_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest, expected_output_keys_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData, Type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest, Type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask, reply_id_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask, reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init, key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init, has_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply, reply_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply, Type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessRequest, Type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_Result, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_Result, Type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest, task_options_),
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest, task_requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest, task_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest, Type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_DataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply_DataRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply, request_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ArmoniK::api::grpc::v1::ProcessReply, Type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest)},
  { 22, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData)},
  { 31, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest)},
  { 42, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask)},
  { 50, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init)},
  { 60, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply)},
  { 70, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessRequest)},
  { 82, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessReply_Result)},
  { 91, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest)},
  { 99, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest)},
  { 106, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest)},
  { 116, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessReply_DataRequest)},
  { 123, -1, -1, sizeof(::ArmoniK::api::grpc::v1::ProcessReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessRequest_ComputeRequest_InitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessRequest_ComputeRequest_InitData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessRequest_ComputeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessRequest_CreateTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessRequest_DataReply_Init_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessRequest_DataReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessReply_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessReply_CreateSmallTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessReply_CreateLargeTaskRequest_InitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessReply_CreateLargeTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessReply_DataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ArmoniK::api::grpc::v1::_ProcessReply_default_instance_),
};

const char descriptor_table_protodef_worker_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024worker_service.proto\022\023ArmoniK.api.grpc"
  ".v1\032\robjects.proto\"\204\013\n\016ProcessRequest\022E\n"
  "\007compute\030\001 \001(\01322.ArmoniK.api.grpc.v1.Pro"
  "cessRequest.ComputeRequestH\000\022E\n\013create_t"
  "ask\030\002 \001(\0132..ArmoniK.api.grpc.v1.ProcessR"
  "equest.CreateTaskH\000\022A\n\010resource\030\003 \001(\0132-."
  "ArmoniK.api.grpc.v1.ProcessRequest.DataR"
  "eplyH\000\022D\n\013common_data\030\004 \001(\0132-.ArmoniK.ap"
  "i.grpc.v1.ProcessRequest.DataReplyH\000\022D\n\013"
  "direct_data\030\005 \001(\0132-.ArmoniK.api.grpc.v1."
  "ProcessRequest.DataReplyH\000\032\267\005\n\016ComputeRe"
  "quest\022V\n\014init_request\030\001 \001(\0132>.ArmoniK.ap"
  "i.grpc.v1.ProcessRequest.ComputeRequest."
  "InitRequestH\000\0221\n\007payload\030\002 \001(\0132\036.ArmoniK"
  ".api.grpc.v1.DataChunkH\000\022P\n\tinit_data\030\003 "
  "\001(\0132;.ArmoniK.api.grpc.v1.ProcessRequest"
  ".ComputeRequest.InitDataH\000\022.\n\004data\030\004 \001(\013"
  "2\036.ArmoniK.api.grpc.v1.DataChunkH\000\032\327\002\n\013I"
  "nitRequest\0229\n\rconfiguration\030\001 \001(\0132\".Armo"
  "niK.api.grpc.v1.Configuration\022\022\n\nsession"
  "_id\030\002 \001(\t\022\017\n\007task_id\030\003 \001(\t\022e\n\014task_optio"
  "ns\030\004 \003(\0132O.ArmoniK.api.grpc.v1.ProcessRe"
  "quest.ComputeRequest.InitRequest.TaskOpt"
  "ionsEntry\022\034\n\024expected_output_keys\030\005 \003(\t\022"
  "/\n\007payload\030\006 \001(\0132\036.ArmoniK.api.grpc.v1.D"
  "ataChunk\0322\n\020TaskOptionsEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t:\0028\001\0326\n\010InitData\022\r\n\003key\030"
  "\001 \001(\tH\000\022\023\n\tlast_data\030\002 \001(\010H\000B\006\n\004TypeB\006\n\004"
  "Type\032S\n\nCreateTask\022\020\n\010reply_id\030\001 \001(\t\0223\n\005"
  "reply\030\002 \001(\0132$.ArmoniK.api.grpc.v1.Create"
  "TaskReply\032\375\001\n\tDataReply\022\020\n\010reply_id\030\001 \001("
  "\t\022B\n\004init\030\002 \001(\01322.ArmoniK.api.grpc.v1.Pr"
  "ocessRequest.DataReply.InitH\000\022.\n\004data\030\003 "
  "\001(\0132\036.ArmoniK.api.grpc.v1.DataChunkH\000\032b\n"
  "\004Init\022\013\n\003key\030\001 \001(\t\022.\n\004data\030\002 \001(\0132\036.Armon"
  "iK.api.grpc.v1.DataChunkH\000\022\017\n\005error\030\003 \001("
  "\tH\000B\014\n\nhas_resultB\006\n\004TypeB\006\n\004Type\"\361\010\n\014Pr"
  "ocessReply\022\022\n\nrequest_id\030\001 \001(\t\022-\n\006output"
  "\030\002 \001(\0132\033.ArmoniK.api.grpc.v1.OutputH\000\022:\n"
  "\006result\030\003 \001(\0132(.ArmoniK.api.grpc.v1.Proc"
  "essReply.ResultH\000\022U\n\021create_small_task\030\004"
  " \001(\01328.ArmoniK.api.grpc.v1.ProcessReply."
  "CreateSmallTaskRequestH\000\022U\n\021create_large"
  "_task\030\005 \001(\01328.ArmoniK.api.grpc.v1.Proces"
  "sReply.CreateLargeTaskRequestH\000\022A\n\010resou"
  "rce\030\006 \001(\0132-.ArmoniK.api.grpc.v1.ProcessR"
  "eply.DataRequestH\000\022D\n\013common_data\030\007 \001(\0132"
  "-.ArmoniK.api.grpc.v1.ProcessReply.DataR"
  "equestH\000\022D\n\013direct_data\030\010 \001(\0132-.ArmoniK."
  "api.grpc.v1.ProcessReply.DataRequestH\000\032z"
  "\n\006Result\0228\n\004init\030\001 \001(\0132(.ArmoniK.api.grp"
  "c.v1.InitKeyedDataStreamH\000\022.\n\004data\030\002 \001(\013"
  "2\036.ArmoniK.api.grpc.v1.DataChunkH\000B\006\n\004Ty"
  "pe\032\211\001\n\026CreateSmallTaskRequest\0226\n\014task_op"
  "tions\030\001 \001(\0132 .ArmoniK.api.grpc.v1.TaskOp"
  "tions\0227\n\rtask_requests\030\002 \003(\0132 .ArmoniK.a"
  "pi.grpc.v1.TaskRequest\032\270\002\n\026CreateLargeTa"
  "skRequest\022\\\n\014init_request\030\001 \001(\0132D.Armoni"
  "K.api.grpc.v1.ProcessReply.CreateLargeTa"
  "skRequest.InitRequestH\000\0229\n\tinit_task\030\002 \001"
  "(\0132$.ArmoniK.api.grpc.v1.InitTaskRequest"
  "H\000\0226\n\014task_payload\030\003 \001(\0132\036.ArmoniK.api.g"
  "rpc.v1.DataChunkH\000\032E\n\013InitRequest\0226\n\014tas"
  "k_options\030\001 \001(\0132 .ArmoniK.api.grpc.v1.Ta"
  "skOptionsB\006\n\004Type\032\032\n\013DataRequest\022\013\n\003key\030"
  "\001 \001(\tB\006\n\004Type2_\n\006Worker\022U\n\007Process\022#.Arm"
  "oniK.api.grpc.v1.ProcessRequest\032!.Armoni"
  "K.api.grpc.v1.ProcessReply(\0010\001B\026\252\002\023Armon"
  "iK.Api.gRPC.V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_worker_5fservice_2eproto_deps[1] = {
  &::descriptor_table_objects_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_worker_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_worker_5fservice_2eproto = {
  false, false, 2742, descriptor_table_protodef_worker_5fservice_2eproto, "worker_service.proto", 
  &descriptor_table_worker_5fservice_2eproto_once, descriptor_table_worker_5fservice_2eproto_deps, 1, 14,
  schemas, file_default_instances, TableStruct_worker_5fservice_2eproto::offsets,
  file_level_metadata_worker_5fservice_2eproto, file_level_enum_descriptors_worker_5fservice_2eproto, file_level_service_descriptors_worker_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_worker_5fservice_2eproto_getter() {
  return &descriptor_table_worker_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_worker_5fservice_2eproto(&descriptor_table_worker_5fservice_2eproto);
namespace ArmoniK {
namespace api {
namespace grpc {
namespace v1 {

// ===================================================================

ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse() {}
ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse::MergeFrom(const ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[0]);
}

// ===================================================================

class ProcessRequest_ComputeRequest_InitRequest::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::Configuration& configuration(const ProcessRequest_ComputeRequest_InitRequest* msg);
  static const ::ArmoniK::api::grpc::v1::DataChunk& payload(const ProcessRequest_ComputeRequest_InitRequest* msg);
};

const ::ArmoniK::api::grpc::v1::Configuration&
ProcessRequest_ComputeRequest_InitRequest::_Internal::configuration(const ProcessRequest_ComputeRequest_InitRequest* msg) {
  return *msg->configuration_;
}
const ::ArmoniK::api::grpc::v1::DataChunk&
ProcessRequest_ComputeRequest_InitRequest::_Internal::payload(const ProcessRequest_ComputeRequest_InitRequest* msg) {
  return *msg->payload_;
}
void ProcessRequest_ComputeRequest_InitRequest::clear_configuration() {
  if (GetArenaForAllocation() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
}
void ProcessRequest_ComputeRequest_InitRequest::clear_payload() {
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
ProcessRequest_ComputeRequest_InitRequest::ProcessRequest_ComputeRequest_InitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  task_options_(arena),
  expected_output_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest)
}
ProcessRequest_ComputeRequest_InitRequest::ProcessRequest_ComputeRequest_InitRequest(const ProcessRequest_ComputeRequest_InitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      expected_output_keys_(from.expected_output_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_options_.MergeFrom(from.task_options_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::ArmoniK::api::grpc::v1::Configuration(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  if (from._internal_has_payload()) {
    payload_ = new ::ArmoniK::api::grpc::v1::DataChunk(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest)
}

inline void ProcessRequest_ComputeRequest_InitRequest::SharedCtor() {
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&configuration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&payload_) -
    reinterpret_cast<char*>(&configuration_)) + sizeof(payload_));
}

ProcessRequest_ComputeRequest_InitRequest::~ProcessRequest_ComputeRequest_InitRequest() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessRequest_ComputeRequest_InitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete configuration_;
  if (this != internal_default_instance()) delete payload_;
}

void ProcessRequest_ComputeRequest_InitRequest::ArenaDtor(void* object) {
  ProcessRequest_ComputeRequest_InitRequest* _this = reinterpret_cast< ProcessRequest_ComputeRequest_InitRequest* >(object);
  (void)_this;
  _this->task_options_. ~MapField();
}
inline void ProcessRequest_ComputeRequest_InitRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ProcessRequest_ComputeRequest_InitRequest::ArenaDtor);
  }
}
void ProcessRequest_ComputeRequest_InitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessRequest_ComputeRequest_InitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_options_.Clear();
  expected_output_keys_.Clear();
  session_id_.ClearToEmpty();
  task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessRequest_ComputeRequest_InitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.Configuration configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.session_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.task_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> task_options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&task_options_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string expected_output_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_expected_output_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.DataChunk payload = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessRequest_ComputeRequest_InitRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.Configuration configuration = 1;
  if (this->_internal_has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::configuration(this), target, stream);
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // string task_id = 3;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_task_id(), target);
  }

  // map<string, string> task_options = 4;
  if (!this->_internal_task_options().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.TaskOptionsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.TaskOptionsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_task_options().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_task_options().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_task_options().begin();
          it != this->_internal_task_options().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_task_options().begin();
          it != this->_internal_task_options().end(); ++it) {
        target = ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string expected_output_keys = 5;
  for (int i = 0, n = this->_internal_expected_output_keys_size(); i < n; i++) {
    const auto& s = this->_internal_expected_output_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys");
    target = stream->WriteString(5, s, target);
  }

  // .ArmoniK.api.grpc.v1.DataChunk payload = 6;
  if (this->_internal_has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest)
  return target;
}

size_t ProcessRequest_ComputeRequest_InitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> task_options = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_task_options_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_task_options().begin();
      it != this->_internal_task_options().end(); ++it) {
    total_size += ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string expected_output_keys = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(expected_output_keys_.size());
  for (int i = 0, n = expected_output_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      expected_output_keys_.Get(i));
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string task_id = 3;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .ArmoniK.api.grpc.v1.Configuration configuration = 1;
  if (this->_internal_has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  // .ArmoniK.api.grpc.v1.DataChunk payload = 6;
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessRequest_ComputeRequest_InitRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessRequest_ComputeRequest_InitRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessRequest_ComputeRequest_InitRequest::GetClassData() const { return &_class_data_; }

void ProcessRequest_ComputeRequest_InitRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessRequest_ComputeRequest_InitRequest *>(to)->MergeFrom(
      static_cast<const ProcessRequest_ComputeRequest_InitRequest &>(from));
}


void ProcessRequest_ComputeRequest_InitRequest::MergeFrom(const ProcessRequest_ComputeRequest_InitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  task_options_.MergeFrom(from.task_options_);
  expected_output_keys_.MergeFrom(from.expected_output_keys_);
  if (!from._internal_session_id().empty()) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_configuration()) {
    _internal_mutable_configuration()->::ArmoniK::api::grpc::v1::Configuration::MergeFrom(from._internal_configuration());
  }
  if (from._internal_has_payload()) {
    _internal_mutable_payload()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_payload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessRequest_ComputeRequest_InitRequest::CopyFrom(const ProcessRequest_ComputeRequest_InitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessRequest_ComputeRequest_InitRequest::IsInitialized() const {
  return true;
}

void ProcessRequest_ComputeRequest_InitRequest::InternalSwap(ProcessRequest_ComputeRequest_InitRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  task_options_.InternalSwap(&other->task_options_);
  expected_output_keys_.InternalSwap(&other->expected_output_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, lhs_arena,
      &other->task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessRequest_ComputeRequest_InitRequest, payload_)
      + sizeof(ProcessRequest_ComputeRequest_InitRequest::payload_)
      - PROTOBUF_FIELD_OFFSET(ProcessRequest_ComputeRequest_InitRequest, configuration_)>(
          reinterpret_cast<char*>(&configuration_),
          reinterpret_cast<char*>(&other->configuration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessRequest_ComputeRequest_InitRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[1]);
}

// ===================================================================

class ProcessRequest_ComputeRequest_InitData::_Internal {
 public:
};

ProcessRequest_ComputeRequest_InitData::ProcessRequest_ComputeRequest_InitData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData)
}
ProcessRequest_ComputeRequest_InitData::ProcessRequest_ComputeRequest_InitData(const ProcessRequest_ComputeRequest_InitData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Type();
  switch (from.Type_case()) {
    case kKey: {
      _internal_set_key(from._internal_key());
      break;
    }
    case kLastData: {
      _internal_set_last_data(from._internal_last_data());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData)
}

inline void ProcessRequest_ComputeRequest_InitData::SharedCtor() {
clear_has_Type();
}

ProcessRequest_ComputeRequest_InitData::~ProcessRequest_ComputeRequest_InitData() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessRequest_ComputeRequest_InitData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Type()) {
    clear_Type();
  }
}

void ProcessRequest_ComputeRequest_InitData::ArenaDtor(void* object) {
  ProcessRequest_ComputeRequest_InitData* _this = reinterpret_cast< ProcessRequest_ComputeRequest_InitData* >(object);
  (void)_this;
}
void ProcessRequest_ComputeRequest_InitData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessRequest_ComputeRequest_InitData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessRequest_ComputeRequest_InitData::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData)
  switch (Type_case()) {
    case kKey: {
      Type_.key_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kLastData: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ProcessRequest_ComputeRequest_InitData::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessRequest_ComputeRequest_InitData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool last_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_last_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessRequest_ComputeRequest_InitData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (_internal_has_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bool last_data = 2;
  if (_internal_has_last_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_last_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData)
  return target;
}

size_t ProcessRequest_ComputeRequest_InitData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Type_case()) {
    // string key = 1;
    case kKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
      break;
    }
    // bool last_data = 2;
    case kLastData: {
      total_size += 1 + 1;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessRequest_ComputeRequest_InitData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessRequest_ComputeRequest_InitData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessRequest_ComputeRequest_InitData::GetClassData() const { return &_class_data_; }

void ProcessRequest_ComputeRequest_InitData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessRequest_ComputeRequest_InitData *>(to)->MergeFrom(
      static_cast<const ProcessRequest_ComputeRequest_InitData &>(from));
}


void ProcessRequest_ComputeRequest_InitData::MergeFrom(const ProcessRequest_ComputeRequest_InitData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Type_case()) {
    case kKey: {
      _internal_set_key(from._internal_key());
      break;
    }
    case kLastData: {
      _internal_set_last_data(from._internal_last_data());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessRequest_ComputeRequest_InitData::CopyFrom(const ProcessRequest_ComputeRequest_InitData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessRequest_ComputeRequest_InitData::IsInitialized() const {
  return true;
}

void ProcessRequest_ComputeRequest_InitData::InternalSwap(ProcessRequest_ComputeRequest_InitData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessRequest_ComputeRequest_InitData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[2]);
}

// ===================================================================

class ProcessRequest_ComputeRequest::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest& init_request(const ProcessRequest_ComputeRequest* msg);
  static const ::ArmoniK::api::grpc::v1::DataChunk& payload(const ProcessRequest_ComputeRequest* msg);
  static const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData& init_data(const ProcessRequest_ComputeRequest* msg);
  static const ::ArmoniK::api::grpc::v1::DataChunk& data(const ProcessRequest_ComputeRequest* msg);
};

const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest&
ProcessRequest_ComputeRequest::_Internal::init_request(const ProcessRequest_ComputeRequest* msg) {
  return *msg->Type_.init_request_;
}
const ::ArmoniK::api::grpc::v1::DataChunk&
ProcessRequest_ComputeRequest::_Internal::payload(const ProcessRequest_ComputeRequest* msg) {
  return *msg->Type_.payload_;
}
const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData&
ProcessRequest_ComputeRequest::_Internal::init_data(const ProcessRequest_ComputeRequest* msg) {
  return *msg->Type_.init_data_;
}
const ::ArmoniK::api::grpc::v1::DataChunk&
ProcessRequest_ComputeRequest::_Internal::data(const ProcessRequest_ComputeRequest* msg) {
  return *msg->Type_.data_;
}
void ProcessRequest_ComputeRequest::set_allocated_init_request(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* init_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (init_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest>::GetOwningArena(init_request);
    if (message_arena != submessage_arena) {
      init_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_request, submessage_arena);
    }
    set_has_init_request();
    Type_.init_request_ = init_request;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.init_request)
}
void ProcessRequest_ComputeRequest::set_allocated_payload(::ArmoniK::api::grpc::v1::DataChunk* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload));
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    set_has_payload();
    Type_.payload_ = payload;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.payload)
}
void ProcessRequest_ComputeRequest::clear_payload() {
  if (_internal_has_payload()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.payload_;
    }
    clear_has_Type();
  }
}
void ProcessRequest_ComputeRequest::set_allocated_init_data(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* init_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (init_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData>::GetOwningArena(init_data);
    if (message_arena != submessage_arena) {
      init_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_data, submessage_arena);
    }
    set_has_init_data();
    Type_.init_data_ = init_data;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.init_data)
}
void ProcessRequest_ComputeRequest::set_allocated_data(::ArmoniK::api::grpc::v1::DataChunk* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    Type_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.data)
}
void ProcessRequest_ComputeRequest::clear_data() {
  if (_internal_has_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.data_;
    }
    clear_has_Type();
  }
}
ProcessRequest_ComputeRequest::ProcessRequest_ComputeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest)
}
ProcessRequest_ComputeRequest::ProcessRequest_ComputeRequest(const ProcessRequest_ComputeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Type();
  switch (from.Type_case()) {
    case kInitRequest: {
      _internal_mutable_init_request()->::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest::MergeFrom(from._internal_init_request());
      break;
    }
    case kPayload: {
      _internal_mutable_payload()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_payload());
      break;
    }
    case kInitData: {
      _internal_mutable_init_data()->::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData::MergeFrom(from._internal_init_data());
      break;
    }
    case kData: {
      _internal_mutable_data()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_data());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest)
}

inline void ProcessRequest_ComputeRequest::SharedCtor() {
clear_has_Type();
}

ProcessRequest_ComputeRequest::~ProcessRequest_ComputeRequest() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessRequest_ComputeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Type()) {
    clear_Type();
  }
}

void ProcessRequest_ComputeRequest::ArenaDtor(void* object) {
  ProcessRequest_ComputeRequest* _this = reinterpret_cast< ProcessRequest_ComputeRequest* >(object);
  (void)_this;
}
void ProcessRequest_ComputeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessRequest_ComputeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessRequest_ComputeRequest::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest)
  switch (Type_case()) {
    case kInitRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.init_request_;
      }
      break;
    }
    case kPayload: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.payload_;
      }
      break;
    }
    case kInitData: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.init_data_;
      }
      break;
    }
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.data_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ProcessRequest_ComputeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessRequest_ComputeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest init_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.DataChunk payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData init_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.DataChunk data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessRequest_ComputeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest init_request = 1;
  if (_internal_has_init_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::init_request(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.DataChunk payload = 2;
  if (_internal_has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::payload(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData init_data = 3;
  if (_internal_has_init_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::init_data(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.DataChunk data = 4;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest)
  return target;
}

size_t ProcessRequest_ComputeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Type_case()) {
    // .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest init_request = 1;
    case kInitRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.init_request_);
      break;
    }
    // .ArmoniK.api.grpc.v1.DataChunk payload = 2;
    case kPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.payload_);
      break;
    }
    // .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData init_data = 3;
    case kInitData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.init_data_);
      break;
    }
    // .ArmoniK.api.grpc.v1.DataChunk data = 4;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.data_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessRequest_ComputeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessRequest_ComputeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessRequest_ComputeRequest::GetClassData() const { return &_class_data_; }

void ProcessRequest_ComputeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessRequest_ComputeRequest *>(to)->MergeFrom(
      static_cast<const ProcessRequest_ComputeRequest &>(from));
}


void ProcessRequest_ComputeRequest::MergeFrom(const ProcessRequest_ComputeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Type_case()) {
    case kInitRequest: {
      _internal_mutable_init_request()->::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest::MergeFrom(from._internal_init_request());
      break;
    }
    case kPayload: {
      _internal_mutable_payload()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_payload());
      break;
    }
    case kInitData: {
      _internal_mutable_init_data()->::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData::MergeFrom(from._internal_init_data());
      break;
    }
    case kData: {
      _internal_mutable_data()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_data());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessRequest_ComputeRequest::CopyFrom(const ProcessRequest_ComputeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessRequest_ComputeRequest::IsInitialized() const {
  return true;
}

void ProcessRequest_ComputeRequest::InternalSwap(ProcessRequest_ComputeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessRequest_ComputeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[3]);
}

// ===================================================================

class ProcessRequest_CreateTask::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::CreateTaskReply& reply(const ProcessRequest_CreateTask* msg);
};

const ::ArmoniK::api::grpc::v1::CreateTaskReply&
ProcessRequest_CreateTask::_Internal::reply(const ProcessRequest_CreateTask* msg) {
  return *msg->reply_;
}
void ProcessRequest_CreateTask::clear_reply() {
  if (GetArenaForAllocation() == nullptr && reply_ != nullptr) {
    delete reply_;
  }
  reply_ = nullptr;
}
ProcessRequest_CreateTask::ProcessRequest_CreateTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask)
}
ProcessRequest_CreateTask::ProcessRequest_CreateTask(const ProcessRequest_CreateTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reply_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reply_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply_id().empty()) {
    reply_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reply_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_reply()) {
    reply_ = new ::ArmoniK::api::grpc::v1::CreateTaskReply(*from.reply_);
  } else {
    reply_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask)
}

inline void ProcessRequest_CreateTask::SharedCtor() {
reply_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reply_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reply_ = nullptr;
}

ProcessRequest_CreateTask::~ProcessRequest_CreateTask() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessRequest_CreateTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reply_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reply_;
}

void ProcessRequest_CreateTask::ArenaDtor(void* object) {
  ProcessRequest_CreateTask* _this = reinterpret_cast< ProcessRequest_CreateTask* >(object);
  (void)_this;
}
void ProcessRequest_CreateTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessRequest_CreateTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessRequest_CreateTask::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reply_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && reply_ != nullptr) {
    delete reply_;
  }
  reply_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessRequest_CreateTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reply_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reply_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.ProcessRequest.CreateTask.reply_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.CreateTaskReply reply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessRequest_CreateTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string reply_id = 1;
  if (!this->_internal_reply_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply_id().data(), static_cast<int>(this->_internal_reply_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.ProcessRequest.CreateTask.reply_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reply_id(), target);
  }

  // .ArmoniK.api.grpc.v1.CreateTaskReply reply = 2;
  if (this->_internal_has_reply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reply(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask)
  return target;
}

size_t ProcessRequest_CreateTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reply_id = 1;
  if (!this->_internal_reply_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply_id());
  }

  // .ArmoniK.api.grpc.v1.CreateTaskReply reply = 2;
  if (this->_internal_has_reply()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reply_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessRequest_CreateTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessRequest_CreateTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessRequest_CreateTask::GetClassData() const { return &_class_data_; }

void ProcessRequest_CreateTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessRequest_CreateTask *>(to)->MergeFrom(
      static_cast<const ProcessRequest_CreateTask &>(from));
}


void ProcessRequest_CreateTask::MergeFrom(const ProcessRequest_CreateTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reply_id().empty()) {
    _internal_set_reply_id(from._internal_reply_id());
  }
  if (from._internal_has_reply()) {
    _internal_mutable_reply()->::ArmoniK::api::grpc::v1::CreateTaskReply::MergeFrom(from._internal_reply());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessRequest_CreateTask::CopyFrom(const ProcessRequest_CreateTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessRequest_CreateTask::IsInitialized() const {
  return true;
}

void ProcessRequest_CreateTask::InternalSwap(ProcessRequest_CreateTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reply_id_, lhs_arena,
      &other->reply_id_, rhs_arena
  );
  swap(reply_, other->reply_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessRequest_CreateTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[4]);
}

// ===================================================================

class ProcessRequest_DataReply_Init::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::DataChunk& data(const ProcessRequest_DataReply_Init* msg);
};

const ::ArmoniK::api::grpc::v1::DataChunk&
ProcessRequest_DataReply_Init::_Internal::data(const ProcessRequest_DataReply_Init* msg) {
  return *msg->has_result_.data_;
}
void ProcessRequest_DataReply_Init::set_allocated_data(::ArmoniK::api::grpc::v1::DataChunk* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_has_result();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    has_result_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.data)
}
void ProcessRequest_DataReply_Init::clear_data() {
  if (_internal_has_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete has_result_.data_;
    }
    clear_has_has_result();
  }
}
ProcessRequest_DataReply_Init::ProcessRequest_DataReply_Init(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init)
}
ProcessRequest_DataReply_Init::ProcessRequest_DataReply_Init(const ProcessRequest_DataReply_Init& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  clear_has_has_result();
  switch (from.has_result_case()) {
    case kData: {
      _internal_mutable_data()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_data());
      break;
    }
    case kError: {
      _internal_set_error(from._internal_error());
      break;
    }
    case HAS_RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init)
}

inline void ProcessRequest_DataReply_Init::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_has_result();
}

ProcessRequest_DataReply_Init::~ProcessRequest_DataReply_Init() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessRequest_DataReply_Init::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_has_result()) {
    clear_has_result();
  }
}

void ProcessRequest_DataReply_Init::ArenaDtor(void* object) {
  ProcessRequest_DataReply_Init* _this = reinterpret_cast< ProcessRequest_DataReply_Init* >(object);
  (void)_this;
}
void ProcessRequest_DataReply_Init::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessRequest_DataReply_Init::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessRequest_DataReply_Init::clear_has_result() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init)
  switch (has_result_case()) {
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete has_result_.data_;
      }
      break;
    }
    case kError: {
      has_result_.error_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case HAS_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_RESULT_NOT_SET;
}


void ProcessRequest_DataReply_Init::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  clear_has_result();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessRequest_DataReply_Init::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.DataChunk data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessRequest_DataReply_Init::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .ArmoniK.api.grpc.v1.DataChunk data = 2;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // string error = 3;
  if (_internal_has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init)
  return target;
}

size_t ProcessRequest_DataReply_Init::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  switch (has_result_case()) {
    // .ArmoniK.api.grpc.v1.DataChunk data = 2;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *has_result_.data_);
      break;
    }
    // string error = 3;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
      break;
    }
    case HAS_RESULT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessRequest_DataReply_Init::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessRequest_DataReply_Init::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessRequest_DataReply_Init::GetClassData() const { return &_class_data_; }

void ProcessRequest_DataReply_Init::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessRequest_DataReply_Init *>(to)->MergeFrom(
      static_cast<const ProcessRequest_DataReply_Init &>(from));
}


void ProcessRequest_DataReply_Init::MergeFrom(const ProcessRequest_DataReply_Init& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  switch (from.has_result_case()) {
    case kData: {
      _internal_mutable_data()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_data());
      break;
    }
    case kError: {
      _internal_set_error(from._internal_error());
      break;
    }
    case HAS_RESULT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessRequest_DataReply_Init::CopyFrom(const ProcessRequest_DataReply_Init& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessRequest_DataReply_Init::IsInitialized() const {
  return true;
}

void ProcessRequest_DataReply_Init::InternalSwap(ProcessRequest_DataReply_Init* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(has_result_, other->has_result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessRequest_DataReply_Init::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[5]);
}

// ===================================================================

class ProcessRequest_DataReply::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init& init(const ProcessRequest_DataReply* msg);
  static const ::ArmoniK::api::grpc::v1::DataChunk& data(const ProcessRequest_DataReply* msg);
};

const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init&
ProcessRequest_DataReply::_Internal::init(const ProcessRequest_DataReply* msg) {
  return *msg->Type_.init_;
}
const ::ArmoniK::api::grpc::v1::DataChunk&
ProcessRequest_DataReply::_Internal::data(const ProcessRequest_DataReply* msg) {
  return *msg->Type_.data_;
}
void ProcessRequest_DataReply::set_allocated_init(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init>::GetOwningArena(init);
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
    Type_.init_ = init;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.init)
}
void ProcessRequest_DataReply::set_allocated_data(::ArmoniK::api::grpc::v1::DataChunk* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    Type_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.data)
}
void ProcessRequest_DataReply::clear_data() {
  if (_internal_has_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.data_;
    }
    clear_has_Type();
  }
}
ProcessRequest_DataReply::ProcessRequest_DataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessRequest.DataReply)
}
ProcessRequest_DataReply::ProcessRequest_DataReply(const ProcessRequest_DataReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reply_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reply_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply_id().empty()) {
    reply_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reply_id(), 
      GetArenaForAllocation());
  }
  clear_has_Type();
  switch (from.Type_case()) {
    case kInit: {
      _internal_mutable_init()->::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init::MergeFrom(from._internal_init());
      break;
    }
    case kData: {
      _internal_mutable_data()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_data());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessRequest.DataReply)
}

inline void ProcessRequest_DataReply::SharedCtor() {
reply_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reply_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_Type();
}

ProcessRequest_DataReply::~ProcessRequest_DataReply() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessRequest.DataReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessRequest_DataReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reply_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_Type()) {
    clear_Type();
  }
}

void ProcessRequest_DataReply::ArenaDtor(void* object) {
  ProcessRequest_DataReply* _this = reinterpret_cast< ProcessRequest_DataReply* >(object);
  (void)_this;
}
void ProcessRequest_DataReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessRequest_DataReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessRequest_DataReply::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.ProcessRequest.DataReply)
  switch (Type_case()) {
    case kInit: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.init_;
      }
      break;
    }
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.data_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ProcessRequest_DataReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessRequest.DataReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reply_id_.ClearToEmpty();
  clear_Type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessRequest_DataReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reply_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reply_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.ProcessRequest.DataReply.reply_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init init = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.DataChunk data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessRequest_DataReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessRequest.DataReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string reply_id = 1;
  if (!this->_internal_reply_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply_id().data(), static_cast<int>(this->_internal_reply_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.ProcessRequest.DataReply.reply_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reply_id(), target);
  }

  // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init init = 2;
  if (_internal_has_init()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::init(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.DataChunk data = 3;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessRequest.DataReply)
  return target;
}

size_t ProcessRequest_DataReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessRequest.DataReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reply_id = 1;
  if (!this->_internal_reply_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply_id());
  }

  switch (Type_case()) {
    // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init init = 2;
    case kInit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.init_);
      break;
    }
    // .ArmoniK.api.grpc.v1.DataChunk data = 3;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.data_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessRequest_DataReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessRequest_DataReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessRequest_DataReply::GetClassData() const { return &_class_data_; }

void ProcessRequest_DataReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessRequest_DataReply *>(to)->MergeFrom(
      static_cast<const ProcessRequest_DataReply &>(from));
}


void ProcessRequest_DataReply::MergeFrom(const ProcessRequest_DataReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessRequest.DataReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reply_id().empty()) {
    _internal_set_reply_id(from._internal_reply_id());
  }
  switch (from.Type_case()) {
    case kInit: {
      _internal_mutable_init()->::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init::MergeFrom(from._internal_init());
      break;
    }
    case kData: {
      _internal_mutable_data()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_data());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessRequest_DataReply::CopyFrom(const ProcessRequest_DataReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessRequest.DataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessRequest_DataReply::IsInitialized() const {
  return true;
}

void ProcessRequest_DataReply::InternalSwap(ProcessRequest_DataReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reply_id_, lhs_arena,
      &other->reply_id_, rhs_arena
  );
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessRequest_DataReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[6]);
}

// ===================================================================

class ProcessRequest::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest& compute(const ProcessRequest* msg);
  static const ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask& create_task(const ProcessRequest* msg);
  static const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& resource(const ProcessRequest* msg);
  static const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& common_data(const ProcessRequest* msg);
  static const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& direct_data(const ProcessRequest* msg);
};

const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest&
ProcessRequest::_Internal::compute(const ProcessRequest* msg) {
  return *msg->Type_.compute_;
}
const ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask&
ProcessRequest::_Internal::create_task(const ProcessRequest* msg) {
  return *msg->Type_.create_task_;
}
const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply&
ProcessRequest::_Internal::resource(const ProcessRequest* msg) {
  return *msg->Type_.resource_;
}
const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply&
ProcessRequest::_Internal::common_data(const ProcessRequest* msg) {
  return *msg->Type_.common_data_;
}
const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply&
ProcessRequest::_Internal::direct_data(const ProcessRequest* msg) {
  return *msg->Type_.direct_data_;
}
void ProcessRequest::set_allocated_compute(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* compute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (compute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest>::GetOwningArena(compute);
    if (message_arena != submessage_arena) {
      compute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compute, submessage_arena);
    }
    set_has_compute();
    Type_.compute_ = compute;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.compute)
}
void ProcessRequest::set_allocated_create_task(::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* create_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (create_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask>::GetOwningArena(create_task);
    if (message_arena != submessage_arena) {
      create_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_task, submessage_arena);
    }
    set_has_create_task();
    Type_.create_task_ = create_task;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.create_task)
}
void ProcessRequest::set_allocated_resource(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessRequest_DataReply>::GetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    set_has_resource();
    Type_.resource_ = resource;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.resource)
}
void ProcessRequest::set_allocated_common_data(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* common_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (common_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessRequest_DataReply>::GetOwningArena(common_data);
    if (message_arena != submessage_arena) {
      common_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_data, submessage_arena);
    }
    set_has_common_data();
    Type_.common_data_ = common_data;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.common_data)
}
void ProcessRequest::set_allocated_direct_data(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* direct_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (direct_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessRequest_DataReply>::GetOwningArena(direct_data);
    if (message_arena != submessage_arena) {
      direct_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct_data, submessage_arena);
    }
    set_has_direct_data();
    Type_.direct_data_ = direct_data;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.direct_data)
}
ProcessRequest::ProcessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessRequest)
}
ProcessRequest::ProcessRequest(const ProcessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Type();
  switch (from.Type_case()) {
    case kCompute: {
      _internal_mutable_compute()->::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest::MergeFrom(from._internal_compute());
      break;
    }
    case kCreateTask: {
      _internal_mutable_create_task()->::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask::MergeFrom(from._internal_create_task());
      break;
    }
    case kResource: {
      _internal_mutable_resource()->::ArmoniK::api::grpc::v1::ProcessRequest_DataReply::MergeFrom(from._internal_resource());
      break;
    }
    case kCommonData: {
      _internal_mutable_common_data()->::ArmoniK::api::grpc::v1::ProcessRequest_DataReply::MergeFrom(from._internal_common_data());
      break;
    }
    case kDirectData: {
      _internal_mutable_direct_data()->::ArmoniK::api::grpc::v1::ProcessRequest_DataReply::MergeFrom(from._internal_direct_data());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessRequest)
}

inline void ProcessRequest::SharedCtor() {
clear_has_Type();
}

ProcessRequest::~ProcessRequest() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Type()) {
    clear_Type();
  }
}

void ProcessRequest::ArenaDtor(void* object) {
  ProcessRequest* _this = reinterpret_cast< ProcessRequest* >(object);
  (void)_this;
}
void ProcessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessRequest::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.ProcessRequest)
  switch (Type_case()) {
    case kCompute: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.compute_;
      }
      break;
    }
    case kCreateTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.create_task_;
      }
      break;
    }
    case kResource: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.resource_;
      }
      break;
    }
    case kCommonData: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.common_data_;
      }
      break;
    }
    case kDirectData: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.direct_data_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ProcessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest compute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_compute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.ProcessRequest.CreateTask create_task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply common_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_common_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply direct_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest compute = 1;
  if (_internal_has_compute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::compute(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.ProcessRequest.CreateTask create_task = 2;
  if (_internal_has_create_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::create_task(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply resource = 3;
  if (_internal_has_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::resource(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply common_data = 4;
  if (_internal_has_common_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::common_data(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply direct_data = 5;
  if (_internal_has_direct_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::direct_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessRequest)
  return target;
}

size_t ProcessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Type_case()) {
    // .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest compute = 1;
    case kCompute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.compute_);
      break;
    }
    // .ArmoniK.api.grpc.v1.ProcessRequest.CreateTask create_task = 2;
    case kCreateTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.create_task_);
      break;
    }
    // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply resource = 3;
    case kResource: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.resource_);
      break;
    }
    // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply common_data = 4;
    case kCommonData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.common_data_);
      break;
    }
    // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply direct_data = 5;
    case kDirectData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.direct_data_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessRequest::GetClassData() const { return &_class_data_; }

void ProcessRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessRequest *>(to)->MergeFrom(
      static_cast<const ProcessRequest &>(from));
}


void ProcessRequest::MergeFrom(const ProcessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Type_case()) {
    case kCompute: {
      _internal_mutable_compute()->::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest::MergeFrom(from._internal_compute());
      break;
    }
    case kCreateTask: {
      _internal_mutable_create_task()->::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask::MergeFrom(from._internal_create_task());
      break;
    }
    case kResource: {
      _internal_mutable_resource()->::ArmoniK::api::grpc::v1::ProcessRequest_DataReply::MergeFrom(from._internal_resource());
      break;
    }
    case kCommonData: {
      _internal_mutable_common_data()->::ArmoniK::api::grpc::v1::ProcessRequest_DataReply::MergeFrom(from._internal_common_data());
      break;
    }
    case kDirectData: {
      _internal_mutable_direct_data()->::ArmoniK::api::grpc::v1::ProcessRequest_DataReply::MergeFrom(from._internal_direct_data());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessRequest::CopyFrom(const ProcessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessRequest::IsInitialized() const {
  return true;
}

void ProcessRequest::InternalSwap(ProcessRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[7]);
}

// ===================================================================

class ProcessReply_Result::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::InitKeyedDataStream& init(const ProcessReply_Result* msg);
  static const ::ArmoniK::api::grpc::v1::DataChunk& data(const ProcessReply_Result* msg);
};

const ::ArmoniK::api::grpc::v1::InitKeyedDataStream&
ProcessReply_Result::_Internal::init(const ProcessReply_Result* msg) {
  return *msg->Type_.init_;
}
const ::ArmoniK::api::grpc::v1::DataChunk&
ProcessReply_Result::_Internal::data(const ProcessReply_Result* msg) {
  return *msg->Type_.data_;
}
void ProcessReply_Result::set_allocated_init(::ArmoniK::api::grpc::v1::InitKeyedDataStream* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(init));
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
    Type_.init_ = init;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.Result.init)
}
void ProcessReply_Result::clear_init() {
  if (_internal_has_init()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.init_;
    }
    clear_has_Type();
  }
}
void ProcessReply_Result::set_allocated_data(::ArmoniK::api::grpc::v1::DataChunk* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    Type_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.Result.data)
}
void ProcessReply_Result::clear_data() {
  if (_internal_has_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.data_;
    }
    clear_has_Type();
  }
}
ProcessReply_Result::ProcessReply_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessReply.Result)
}
ProcessReply_Result::ProcessReply_Result(const ProcessReply_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Type();
  switch (from.Type_case()) {
    case kInit: {
      _internal_mutable_init()->::ArmoniK::api::grpc::v1::InitKeyedDataStream::MergeFrom(from._internal_init());
      break;
    }
    case kData: {
      _internal_mutable_data()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_data());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessReply.Result)
}

inline void ProcessReply_Result::SharedCtor() {
clear_has_Type();
}

ProcessReply_Result::~ProcessReply_Result() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessReply.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessReply_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Type()) {
    clear_Type();
  }
}

void ProcessReply_Result::ArenaDtor(void* object) {
  ProcessReply_Result* _this = reinterpret_cast< ProcessReply_Result* >(object);
  (void)_this;
}
void ProcessReply_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessReply_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessReply_Result::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.ProcessReply.Result)
  switch (Type_case()) {
    case kInit: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.init_;
      }
      break;
    }
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.data_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ProcessReply_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessReply.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessReply_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.InitKeyedDataStream init = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.DataChunk data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessReply_Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessReply.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.InitKeyedDataStream init = 1;
  if (_internal_has_init()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::init(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.DataChunk data = 2;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessReply.Result)
  return target;
}

size_t ProcessReply_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessReply.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Type_case()) {
    // .ArmoniK.api.grpc.v1.InitKeyedDataStream init = 1;
    case kInit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.init_);
      break;
    }
    // .ArmoniK.api.grpc.v1.DataChunk data = 2;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.data_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessReply_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessReply_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessReply_Result::GetClassData() const { return &_class_data_; }

void ProcessReply_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessReply_Result *>(to)->MergeFrom(
      static_cast<const ProcessReply_Result &>(from));
}


void ProcessReply_Result::MergeFrom(const ProcessReply_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessReply.Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Type_case()) {
    case kInit: {
      _internal_mutable_init()->::ArmoniK::api::grpc::v1::InitKeyedDataStream::MergeFrom(from._internal_init());
      break;
    }
    case kData: {
      _internal_mutable_data()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_data());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessReply_Result::CopyFrom(const ProcessReply_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessReply.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessReply_Result::IsInitialized() const {
  return true;
}

void ProcessReply_Result::InternalSwap(ProcessReply_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessReply_Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[8]);
}

// ===================================================================

class ProcessReply_CreateSmallTaskRequest::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::TaskOptions& task_options(const ProcessReply_CreateSmallTaskRequest* msg);
};

const ::ArmoniK::api::grpc::v1::TaskOptions&
ProcessReply_CreateSmallTaskRequest::_Internal::task_options(const ProcessReply_CreateSmallTaskRequest* msg) {
  return *msg->task_options_;
}
void ProcessReply_CreateSmallTaskRequest::clear_task_options() {
  if (GetArenaForAllocation() == nullptr && task_options_ != nullptr) {
    delete task_options_;
  }
  task_options_ = nullptr;
}
void ProcessReply_CreateSmallTaskRequest::clear_task_requests() {
  task_requests_.Clear();
}
ProcessReply_CreateSmallTaskRequest::ProcessReply_CreateSmallTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  task_requests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest)
}
ProcessReply_CreateSmallTaskRequest::ProcessReply_CreateSmallTaskRequest(const ProcessReply_CreateSmallTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_requests_(from.task_requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_options()) {
    task_options_ = new ::ArmoniK::api::grpc::v1::TaskOptions(*from.task_options_);
  } else {
    task_options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest)
}

inline void ProcessReply_CreateSmallTaskRequest::SharedCtor() {
task_options_ = nullptr;
}

ProcessReply_CreateSmallTaskRequest::~ProcessReply_CreateSmallTaskRequest() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessReply_CreateSmallTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete task_options_;
}

void ProcessReply_CreateSmallTaskRequest::ArenaDtor(void* object) {
  ProcessReply_CreateSmallTaskRequest* _this = reinterpret_cast< ProcessReply_CreateSmallTaskRequest* >(object);
  (void)_this;
}
void ProcessReply_CreateSmallTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessReply_CreateSmallTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessReply_CreateSmallTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_requests_.Clear();
  if (GetArenaForAllocation() == nullptr && task_options_ != nullptr) {
    delete task_options_;
  }
  task_options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessReply_CreateSmallTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.TaskOptions task_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ArmoniK.api.grpc.v1.TaskRequest task_requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessReply_CreateSmallTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.TaskOptions task_options = 1;
  if (this->_internal_has_task_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_options(this), target, stream);
  }

  // repeated .ArmoniK.api.grpc.v1.TaskRequest task_requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_task_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest)
  return target;
}

size_t ProcessReply_CreateSmallTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ArmoniK.api.grpc.v1.TaskRequest task_requests = 2;
  total_size += 1UL * this->_internal_task_requests_size();
  for (const auto& msg : this->task_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ArmoniK.api.grpc.v1.TaskOptions task_options = 1;
  if (this->_internal_has_task_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessReply_CreateSmallTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessReply_CreateSmallTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessReply_CreateSmallTaskRequest::GetClassData() const { return &_class_data_; }

void ProcessReply_CreateSmallTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessReply_CreateSmallTaskRequest *>(to)->MergeFrom(
      static_cast<const ProcessReply_CreateSmallTaskRequest &>(from));
}


void ProcessReply_CreateSmallTaskRequest::MergeFrom(const ProcessReply_CreateSmallTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  task_requests_.MergeFrom(from.task_requests_);
  if (from._internal_has_task_options()) {
    _internal_mutable_task_options()->::ArmoniK::api::grpc::v1::TaskOptions::MergeFrom(from._internal_task_options());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessReply_CreateSmallTaskRequest::CopyFrom(const ProcessReply_CreateSmallTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessReply_CreateSmallTaskRequest::IsInitialized() const {
  return true;
}

void ProcessReply_CreateSmallTaskRequest::InternalSwap(ProcessReply_CreateSmallTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  task_requests_.InternalSwap(&other->task_requests_);
  swap(task_options_, other->task_options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessReply_CreateSmallTaskRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[9]);
}

// ===================================================================

class ProcessReply_CreateLargeTaskRequest_InitRequest::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::TaskOptions& task_options(const ProcessReply_CreateLargeTaskRequest_InitRequest* msg);
};

const ::ArmoniK::api::grpc::v1::TaskOptions&
ProcessReply_CreateLargeTaskRequest_InitRequest::_Internal::task_options(const ProcessReply_CreateLargeTaskRequest_InitRequest* msg) {
  return *msg->task_options_;
}
void ProcessReply_CreateLargeTaskRequest_InitRequest::clear_task_options() {
  if (GetArenaForAllocation() == nullptr && task_options_ != nullptr) {
    delete task_options_;
  }
  task_options_ = nullptr;
}
ProcessReply_CreateLargeTaskRequest_InitRequest::ProcessReply_CreateLargeTaskRequest_InitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest)
}
ProcessReply_CreateLargeTaskRequest_InitRequest::ProcessReply_CreateLargeTaskRequest_InitRequest(const ProcessReply_CreateLargeTaskRequest_InitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_options()) {
    task_options_ = new ::ArmoniK::api::grpc::v1::TaskOptions(*from.task_options_);
  } else {
    task_options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest)
}

inline void ProcessReply_CreateLargeTaskRequest_InitRequest::SharedCtor() {
task_options_ = nullptr;
}

ProcessReply_CreateLargeTaskRequest_InitRequest::~ProcessReply_CreateLargeTaskRequest_InitRequest() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessReply_CreateLargeTaskRequest_InitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete task_options_;
}

void ProcessReply_CreateLargeTaskRequest_InitRequest::ArenaDtor(void* object) {
  ProcessReply_CreateLargeTaskRequest_InitRequest* _this = reinterpret_cast< ProcessReply_CreateLargeTaskRequest_InitRequest* >(object);
  (void)_this;
}
void ProcessReply_CreateLargeTaskRequest_InitRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessReply_CreateLargeTaskRequest_InitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessReply_CreateLargeTaskRequest_InitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && task_options_ != nullptr) {
    delete task_options_;
  }
  task_options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessReply_CreateLargeTaskRequest_InitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.TaskOptions task_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessReply_CreateLargeTaskRequest_InitRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.TaskOptions task_options = 1;
  if (this->_internal_has_task_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest)
  return target;
}

size_t ProcessReply_CreateLargeTaskRequest_InitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.TaskOptions task_options = 1;
  if (this->_internal_has_task_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessReply_CreateLargeTaskRequest_InitRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessReply_CreateLargeTaskRequest_InitRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessReply_CreateLargeTaskRequest_InitRequest::GetClassData() const { return &_class_data_; }

void ProcessReply_CreateLargeTaskRequest_InitRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessReply_CreateLargeTaskRequest_InitRequest *>(to)->MergeFrom(
      static_cast<const ProcessReply_CreateLargeTaskRequest_InitRequest &>(from));
}


void ProcessReply_CreateLargeTaskRequest_InitRequest::MergeFrom(const ProcessReply_CreateLargeTaskRequest_InitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_task_options()) {
    _internal_mutable_task_options()->::ArmoniK::api::grpc::v1::TaskOptions::MergeFrom(from._internal_task_options());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessReply_CreateLargeTaskRequest_InitRequest::CopyFrom(const ProcessReply_CreateLargeTaskRequest_InitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessReply_CreateLargeTaskRequest_InitRequest::IsInitialized() const {
  return true;
}

void ProcessReply_CreateLargeTaskRequest_InitRequest::InternalSwap(ProcessReply_CreateLargeTaskRequest_InitRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(task_options_, other->task_options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessReply_CreateLargeTaskRequest_InitRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[10]);
}

// ===================================================================

class ProcessReply_CreateLargeTaskRequest::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest& init_request(const ProcessReply_CreateLargeTaskRequest* msg);
  static const ::ArmoniK::api::grpc::v1::InitTaskRequest& init_task(const ProcessReply_CreateLargeTaskRequest* msg);
  static const ::ArmoniK::api::grpc::v1::DataChunk& task_payload(const ProcessReply_CreateLargeTaskRequest* msg);
};

const ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest&
ProcessReply_CreateLargeTaskRequest::_Internal::init_request(const ProcessReply_CreateLargeTaskRequest* msg) {
  return *msg->Type_.init_request_;
}
const ::ArmoniK::api::grpc::v1::InitTaskRequest&
ProcessReply_CreateLargeTaskRequest::_Internal::init_task(const ProcessReply_CreateLargeTaskRequest* msg) {
  return *msg->Type_.init_task_;
}
const ::ArmoniK::api::grpc::v1::DataChunk&
ProcessReply_CreateLargeTaskRequest::_Internal::task_payload(const ProcessReply_CreateLargeTaskRequest* msg) {
  return *msg->Type_.task_payload_;
}
void ProcessReply_CreateLargeTaskRequest::set_allocated_init_request(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* init_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (init_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest>::GetOwningArena(init_request);
    if (message_arena != submessage_arena) {
      init_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_request, submessage_arena);
    }
    set_has_init_request();
    Type_.init_request_ = init_request;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.init_request)
}
void ProcessReply_CreateLargeTaskRequest::set_allocated_init_task(::ArmoniK::api::grpc::v1::InitTaskRequest* init_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (init_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(init_task));
    if (message_arena != submessage_arena) {
      init_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_task, submessage_arena);
    }
    set_has_init_task();
    Type_.init_task_ = init_task;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.init_task)
}
void ProcessReply_CreateLargeTaskRequest::clear_init_task() {
  if (_internal_has_init_task()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.init_task_;
    }
    clear_has_Type();
  }
}
void ProcessReply_CreateLargeTaskRequest::set_allocated_task_payload(::ArmoniK::api::grpc::v1::DataChunk* task_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (task_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_payload));
    if (message_arena != submessage_arena) {
      task_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_payload, submessage_arena);
    }
    set_has_task_payload();
    Type_.task_payload_ = task_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.task_payload)
}
void ProcessReply_CreateLargeTaskRequest::clear_task_payload() {
  if (_internal_has_task_payload()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.task_payload_;
    }
    clear_has_Type();
  }
}
ProcessReply_CreateLargeTaskRequest::ProcessReply_CreateLargeTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest)
}
ProcessReply_CreateLargeTaskRequest::ProcessReply_CreateLargeTaskRequest(const ProcessReply_CreateLargeTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Type();
  switch (from.Type_case()) {
    case kInitRequest: {
      _internal_mutable_init_request()->::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest::MergeFrom(from._internal_init_request());
      break;
    }
    case kInitTask: {
      _internal_mutable_init_task()->::ArmoniK::api::grpc::v1::InitTaskRequest::MergeFrom(from._internal_init_task());
      break;
    }
    case kTaskPayload: {
      _internal_mutable_task_payload()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_task_payload());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest)
}

inline void ProcessReply_CreateLargeTaskRequest::SharedCtor() {
clear_has_Type();
}

ProcessReply_CreateLargeTaskRequest::~ProcessReply_CreateLargeTaskRequest() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessReply_CreateLargeTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Type()) {
    clear_Type();
  }
}

void ProcessReply_CreateLargeTaskRequest::ArenaDtor(void* object) {
  ProcessReply_CreateLargeTaskRequest* _this = reinterpret_cast< ProcessReply_CreateLargeTaskRequest* >(object);
  (void)_this;
}
void ProcessReply_CreateLargeTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessReply_CreateLargeTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessReply_CreateLargeTaskRequest::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest)
  switch (Type_case()) {
    case kInitRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.init_request_;
      }
      break;
    }
    case kInitTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.init_task_;
      }
      break;
    }
    case kTaskPayload: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.task_payload_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ProcessReply_CreateLargeTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessReply_CreateLargeTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest init_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.InitTaskRequest init_task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.DataChunk task_payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessReply_CreateLargeTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest init_request = 1;
  if (_internal_has_init_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::init_request(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.InitTaskRequest init_task = 2;
  if (_internal_has_init_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::init_task(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.DataChunk task_payload = 3;
  if (_internal_has_task_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::task_payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest)
  return target;
}

size_t ProcessReply_CreateLargeTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Type_case()) {
    // .ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest init_request = 1;
    case kInitRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.init_request_);
      break;
    }
    // .ArmoniK.api.grpc.v1.InitTaskRequest init_task = 2;
    case kInitTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.init_task_);
      break;
    }
    // .ArmoniK.api.grpc.v1.DataChunk task_payload = 3;
    case kTaskPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.task_payload_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessReply_CreateLargeTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessReply_CreateLargeTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessReply_CreateLargeTaskRequest::GetClassData() const { return &_class_data_; }

void ProcessReply_CreateLargeTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessReply_CreateLargeTaskRequest *>(to)->MergeFrom(
      static_cast<const ProcessReply_CreateLargeTaskRequest &>(from));
}


void ProcessReply_CreateLargeTaskRequest::MergeFrom(const ProcessReply_CreateLargeTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Type_case()) {
    case kInitRequest: {
      _internal_mutable_init_request()->::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest::MergeFrom(from._internal_init_request());
      break;
    }
    case kInitTask: {
      _internal_mutable_init_task()->::ArmoniK::api::grpc::v1::InitTaskRequest::MergeFrom(from._internal_init_task());
      break;
    }
    case kTaskPayload: {
      _internal_mutable_task_payload()->::ArmoniK::api::grpc::v1::DataChunk::MergeFrom(from._internal_task_payload());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessReply_CreateLargeTaskRequest::CopyFrom(const ProcessReply_CreateLargeTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessReply_CreateLargeTaskRequest::IsInitialized() const {
  return true;
}

void ProcessReply_CreateLargeTaskRequest::InternalSwap(ProcessReply_CreateLargeTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessReply_CreateLargeTaskRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[11]);
}

// ===================================================================

class ProcessReply_DataRequest::_Internal {
 public:
};

ProcessReply_DataRequest::ProcessReply_DataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessReply.DataRequest)
}
ProcessReply_DataRequest::ProcessReply_DataRequest(const ProcessReply_DataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessReply.DataRequest)
}

inline void ProcessReply_DataRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessReply_DataRequest::~ProcessReply_DataRequest() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessReply.DataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessReply_DataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessReply_DataRequest::ArenaDtor(void* object) {
  ProcessReply_DataRequest* _this = reinterpret_cast< ProcessReply_DataRequest* >(object);
  (void)_this;
}
void ProcessReply_DataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessReply_DataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessReply_DataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessReply.DataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessReply_DataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.ProcessReply.DataRequest.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessReply_DataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessReply.DataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.ProcessReply.DataRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessReply.DataRequest)
  return target;
}

size_t ProcessReply_DataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessReply.DataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessReply_DataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessReply_DataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessReply_DataRequest::GetClassData() const { return &_class_data_; }

void ProcessReply_DataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessReply_DataRequest *>(to)->MergeFrom(
      static_cast<const ProcessReply_DataRequest &>(from));
}


void ProcessReply_DataRequest::MergeFrom(const ProcessReply_DataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessReply.DataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessReply_DataRequest::CopyFrom(const ProcessReply_DataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessReply.DataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessReply_DataRequest::IsInitialized() const {
  return true;
}

void ProcessReply_DataRequest::InternalSwap(ProcessReply_DataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessReply_DataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[12]);
}

// ===================================================================

class ProcessReply::_Internal {
 public:
  static const ::ArmoniK::api::grpc::v1::Output& output(const ProcessReply* msg);
  static const ::ArmoniK::api::grpc::v1::ProcessReply_Result& result(const ProcessReply* msg);
  static const ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest& create_small_task(const ProcessReply* msg);
  static const ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest& create_large_task(const ProcessReply* msg);
  static const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& resource(const ProcessReply* msg);
  static const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& common_data(const ProcessReply* msg);
  static const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& direct_data(const ProcessReply* msg);
};

const ::ArmoniK::api::grpc::v1::Output&
ProcessReply::_Internal::output(const ProcessReply* msg) {
  return *msg->Type_.output_;
}
const ::ArmoniK::api::grpc::v1::ProcessReply_Result&
ProcessReply::_Internal::result(const ProcessReply* msg) {
  return *msg->Type_.result_;
}
const ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest&
ProcessReply::_Internal::create_small_task(const ProcessReply* msg) {
  return *msg->Type_.create_small_task_;
}
const ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest&
ProcessReply::_Internal::create_large_task(const ProcessReply* msg) {
  return *msg->Type_.create_large_task_;
}
const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest&
ProcessReply::_Internal::resource(const ProcessReply* msg) {
  return *msg->Type_.resource_;
}
const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest&
ProcessReply::_Internal::common_data(const ProcessReply* msg) {
  return *msg->Type_.common_data_;
}
const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest&
ProcessReply::_Internal::direct_data(const ProcessReply* msg) {
  return *msg->Type_.direct_data_;
}
void ProcessReply::set_allocated_output(::ArmoniK::api::grpc::v1::Output* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output));
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    set_has_output();
    Type_.output_ = output;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.output)
}
void ProcessReply::clear_output() {
  if (_internal_has_output()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.output_;
    }
    clear_has_Type();
  }
}
void ProcessReply::set_allocated_result(::ArmoniK::api::grpc::v1::ProcessReply_Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessReply_Result>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    set_has_result();
    Type_.result_ = result;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.result)
}
void ProcessReply::set_allocated_create_small_task(::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* create_small_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (create_small_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest>::GetOwningArena(create_small_task);
    if (message_arena != submessage_arena) {
      create_small_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_small_task, submessage_arena);
    }
    set_has_create_small_task();
    Type_.create_small_task_ = create_small_task;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.create_small_task)
}
void ProcessReply::set_allocated_create_large_task(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* create_large_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (create_large_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest>::GetOwningArena(create_large_task);
    if (message_arena != submessage_arena) {
      create_large_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_large_task, submessage_arena);
    }
    set_has_create_large_task();
    Type_.create_large_task_ = create_large_task;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.create_large_task)
}
void ProcessReply::set_allocated_resource(::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessReply_DataRequest>::GetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    set_has_resource();
    Type_.resource_ = resource;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.resource)
}
void ProcessReply::set_allocated_common_data(::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* common_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (common_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessReply_DataRequest>::GetOwningArena(common_data);
    if (message_arena != submessage_arena) {
      common_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_data, submessage_arena);
    }
    set_has_common_data();
    Type_.common_data_ = common_data;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.common_data)
}
void ProcessReply::set_allocated_direct_data(::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* direct_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Type();
  if (direct_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ArmoniK::api::grpc::v1::ProcessReply_DataRequest>::GetOwningArena(direct_data);
    if (message_arena != submessage_arena) {
      direct_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct_data, submessage_arena);
    }
    set_has_direct_data();
    Type_.direct_data_ = direct_data;
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.direct_data)
}
ProcessReply::ProcessReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ArmoniK.api.grpc.v1.ProcessReply)
}
ProcessReply::ProcessReply(const ProcessReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArenaForAllocation());
  }
  clear_has_Type();
  switch (from.Type_case()) {
    case kOutput: {
      _internal_mutable_output()->::ArmoniK::api::grpc::v1::Output::MergeFrom(from._internal_output());
      break;
    }
    case kResult: {
      _internal_mutable_result()->::ArmoniK::api::grpc::v1::ProcessReply_Result::MergeFrom(from._internal_result());
      break;
    }
    case kCreateSmallTask: {
      _internal_mutable_create_small_task()->::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest::MergeFrom(from._internal_create_small_task());
      break;
    }
    case kCreateLargeTask: {
      _internal_mutable_create_large_task()->::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest::MergeFrom(from._internal_create_large_task());
      break;
    }
    case kResource: {
      _internal_mutable_resource()->::ArmoniK::api::grpc::v1::ProcessReply_DataRequest::MergeFrom(from._internal_resource());
      break;
    }
    case kCommonData: {
      _internal_mutable_common_data()->::ArmoniK::api::grpc::v1::ProcessReply_DataRequest::MergeFrom(from._internal_common_data());
      break;
    }
    case kDirectData: {
      _internal_mutable_direct_data()->::ArmoniK::api::grpc::v1::ProcessReply_DataRequest::MergeFrom(from._internal_direct_data());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ArmoniK.api.grpc.v1.ProcessReply)
}

inline void ProcessReply::SharedCtor() {
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_Type();
}

ProcessReply::~ProcessReply() {
  // @@protoc_insertion_point(destructor:ArmoniK.api.grpc.v1.ProcessReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_Type()) {
    clear_Type();
  }
}

void ProcessReply::ArenaDtor(void* object) {
  ProcessReply* _this = reinterpret_cast< ProcessReply* >(object);
  (void)_this;
}
void ProcessReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessReply::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:ArmoniK.api.grpc.v1.ProcessReply)
  switch (Type_case()) {
    case kOutput: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.output_;
      }
      break;
    }
    case kResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.result_;
      }
      break;
    }
    case kCreateSmallTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.create_small_task_;
      }
      break;
    }
    case kCreateLargeTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.create_large_task_;
      }
      break;
    }
    case kResource: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.resource_;
      }
      break;
    }
    case kCommonData: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.common_data_;
      }
      break;
    }
    case kDirectData: {
      if (GetArenaForAllocation() == nullptr) {
        delete Type_.direct_data_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ProcessReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ArmoniK.api.grpc.v1.ProcessReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  clear_Type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArmoniK.api.grpc.v1.ProcessReply.request_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.Output output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.ProcessReply.Result result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest create_small_task = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_small_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest create_large_task = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_large_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.ProcessReply.DataRequest resource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.ProcessReply.DataRequest common_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_common_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ArmoniK.api.grpc.v1.ProcessReply.DataRequest direct_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArmoniK.api.grpc.v1.ProcessReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArmoniK.api.grpc.v1.ProcessReply.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // .ArmoniK.api.grpc.v1.Output output = 2;
  if (_internal_has_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::output(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.ProcessReply.Result result = 3;
  if (_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::result(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest create_small_task = 4;
  if (_internal_has_create_small_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::create_small_task(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest create_large_task = 5;
  if (_internal_has_create_large_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::create_large_task(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.ProcessReply.DataRequest resource = 6;
  if (_internal_has_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::resource(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.ProcessReply.DataRequest common_data = 7;
  if (_internal_has_common_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::common_data(this), target, stream);
  }

  // .ArmoniK.api.grpc.v1.ProcessReply.DataRequest direct_data = 8;
  if (_internal_has_direct_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::direct_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArmoniK.api.grpc.v1.ProcessReply)
  return target;
}

size_t ProcessReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArmoniK.api.grpc.v1.ProcessReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  switch (Type_case()) {
    // .ArmoniK.api.grpc.v1.Output output = 2;
    case kOutput: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.output_);
      break;
    }
    // .ArmoniK.api.grpc.v1.ProcessReply.Result result = 3;
    case kResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.result_);
      break;
    }
    // .ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest create_small_task = 4;
    case kCreateSmallTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.create_small_task_);
      break;
    }
    // .ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest create_large_task = 5;
    case kCreateLargeTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.create_large_task_);
      break;
    }
    // .ArmoniK.api.grpc.v1.ProcessReply.DataRequest resource = 6;
    case kResource: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.resource_);
      break;
    }
    // .ArmoniK.api.grpc.v1.ProcessReply.DataRequest common_data = 7;
    case kCommonData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.common_data_);
      break;
    }
    // .ArmoniK.api.grpc.v1.ProcessReply.DataRequest direct_data = 8;
    case kDirectData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.direct_data_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessReply::GetClassData() const { return &_class_data_; }

void ProcessReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessReply *>(to)->MergeFrom(
      static_cast<const ProcessReply &>(from));
}


void ProcessReply::MergeFrom(const ProcessReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArmoniK.api.grpc.v1.ProcessReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  switch (from.Type_case()) {
    case kOutput: {
      _internal_mutable_output()->::ArmoniK::api::grpc::v1::Output::MergeFrom(from._internal_output());
      break;
    }
    case kResult: {
      _internal_mutable_result()->::ArmoniK::api::grpc::v1::ProcessReply_Result::MergeFrom(from._internal_result());
      break;
    }
    case kCreateSmallTask: {
      _internal_mutable_create_small_task()->::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest::MergeFrom(from._internal_create_small_task());
      break;
    }
    case kCreateLargeTask: {
      _internal_mutable_create_large_task()->::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest::MergeFrom(from._internal_create_large_task());
      break;
    }
    case kResource: {
      _internal_mutable_resource()->::ArmoniK::api::grpc::v1::ProcessReply_DataRequest::MergeFrom(from._internal_resource());
      break;
    }
    case kCommonData: {
      _internal_mutable_common_data()->::ArmoniK::api::grpc::v1::ProcessReply_DataRequest::MergeFrom(from._internal_common_data());
      break;
    }
    case kDirectData: {
      _internal_mutable_direct_data()->::ArmoniK::api::grpc::v1::ProcessReply_DataRequest::MergeFrom(from._internal_direct_data());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessReply::CopyFrom(const ProcessReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArmoniK.api.grpc.v1.ProcessReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessReply::IsInitialized() const {
  return true;
}

void ProcessReply::InternalSwap(ProcessReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_worker_5fservice_2eproto_getter, &descriptor_table_worker_5fservice_2eproto_once,
      file_level_metadata_worker_5fservice_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace grpc
}  // namespace api
}  // namespace ArmoniK
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessRequest* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessReply_Result* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessReply_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ArmoniK::api::grpc::v1::ProcessReply* Arena::CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArmoniK::api::grpc::v1::ProcessReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
