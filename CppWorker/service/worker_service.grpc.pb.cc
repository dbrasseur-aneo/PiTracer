// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: worker_service.proto

#include "worker_service.pb.h"
#include "worker_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ArmoniK {
namespace api {
namespace grpc {
namespace v1 {

static const char* Worker_method_names[] = {
  "/ArmoniK.api.grpc.v1.Worker/Process",
};

std::unique_ptr< Worker::Stub> Worker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Worker::Stub> stub(new Worker::Stub(channel, options));
  return stub;
}

Worker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Process_(Worker_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::ArmoniK::api::grpc::v1::ProcessRequest, ::ArmoniK::api::grpc::v1::ProcessReply>* Worker::Stub::ProcessRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::ArmoniK::api::grpc::v1::ProcessRequest, ::ArmoniK::api::grpc::v1::ProcessReply>::Create(channel_.get(), rpcmethod_Process_, context);
}

void Worker::Stub::async::Process(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ArmoniK::api::grpc::v1::ProcessRequest,::ArmoniK::api::grpc::v1::ProcessReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::ArmoniK::api::grpc::v1::ProcessRequest,::ArmoniK::api::grpc::v1::ProcessReply>::Create(stub_->channel_.get(), stub_->rpcmethod_Process_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::ArmoniK::api::grpc::v1::ProcessRequest, ::ArmoniK::api::grpc::v1::ProcessReply>* Worker::Stub::AsyncProcessRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ArmoniK::api::grpc::v1::ProcessRequest, ::ArmoniK::api::grpc::v1::ProcessReply>::Create(channel_.get(), cq, rpcmethod_Process_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::ArmoniK::api::grpc::v1::ProcessRequest, ::ArmoniK::api::grpc::v1::ProcessReply>* Worker::Stub::PrepareAsyncProcessRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ArmoniK::api::grpc::v1::ProcessRequest, ::ArmoniK::api::grpc::v1::ProcessReply>::Create(channel_.get(), cq, rpcmethod_Process_, context, false, nullptr);
}

Worker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Worker::Service, ::ArmoniK::api::grpc::v1::ProcessRequest, ::ArmoniK::api::grpc::v1::ProcessReply>(
          [](Worker::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::ArmoniK::api::grpc::v1::ProcessReply,
             ::ArmoniK::api::grpc::v1::ProcessRequest>* stream) {
               return service->Process(ctx, stream);
             }, this)));
}

Worker::Service::~Service() {
}

::grpc::Status Worker::Service::Process(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ArmoniK::api::grpc::v1::ProcessReply, ::ArmoniK::api::grpc::v1::ProcessRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ArmoniK
}  // namespace api
}  // namespace grpc
}  // namespace v1

