// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worker_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_worker_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_worker_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "objects.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_worker_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_worker_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_worker_5fservice_2eproto;
namespace ArmoniK {
namespace api {
namespace grpc {
namespace v1 {
class ProcessReply;
struct ProcessReplyDefaultTypeInternal;
extern ProcessReplyDefaultTypeInternal _ProcessReply_default_instance_;
class ProcessReply_CreateLargeTaskRequest;
struct ProcessReply_CreateLargeTaskRequestDefaultTypeInternal;
extern ProcessReply_CreateLargeTaskRequestDefaultTypeInternal _ProcessReply_CreateLargeTaskRequest_default_instance_;
class ProcessReply_CreateLargeTaskRequest_InitRequest;
struct ProcessReply_CreateLargeTaskRequest_InitRequestDefaultTypeInternal;
extern ProcessReply_CreateLargeTaskRequest_InitRequestDefaultTypeInternal _ProcessReply_CreateLargeTaskRequest_InitRequest_default_instance_;
class ProcessReply_CreateSmallTaskRequest;
struct ProcessReply_CreateSmallTaskRequestDefaultTypeInternal;
extern ProcessReply_CreateSmallTaskRequestDefaultTypeInternal _ProcessReply_CreateSmallTaskRequest_default_instance_;
class ProcessReply_DataRequest;
struct ProcessReply_DataRequestDefaultTypeInternal;
extern ProcessReply_DataRequestDefaultTypeInternal _ProcessReply_DataRequest_default_instance_;
class ProcessReply_Result;
struct ProcessReply_ResultDefaultTypeInternal;
extern ProcessReply_ResultDefaultTypeInternal _ProcessReply_Result_default_instance_;
class ProcessRequest;
struct ProcessRequestDefaultTypeInternal;
extern ProcessRequestDefaultTypeInternal _ProcessRequest_default_instance_;
class ProcessRequest_ComputeRequest;
struct ProcessRequest_ComputeRequestDefaultTypeInternal;
extern ProcessRequest_ComputeRequestDefaultTypeInternal _ProcessRequest_ComputeRequest_default_instance_;
class ProcessRequest_ComputeRequest_InitData;
struct ProcessRequest_ComputeRequest_InitDataDefaultTypeInternal;
extern ProcessRequest_ComputeRequest_InitDataDefaultTypeInternal _ProcessRequest_ComputeRequest_InitData_default_instance_;
class ProcessRequest_ComputeRequest_InitRequest;
struct ProcessRequest_ComputeRequest_InitRequestDefaultTypeInternal;
extern ProcessRequest_ComputeRequest_InitRequestDefaultTypeInternal _ProcessRequest_ComputeRequest_InitRequest_default_instance_;
class ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse;
struct ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUseDefaultTypeInternal;
extern ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUseDefaultTypeInternal _ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse_default_instance_;
class ProcessRequest_CreateTask;
struct ProcessRequest_CreateTaskDefaultTypeInternal;
extern ProcessRequest_CreateTaskDefaultTypeInternal _ProcessRequest_CreateTask_default_instance_;
class ProcessRequest_DataReply;
struct ProcessRequest_DataReplyDefaultTypeInternal;
extern ProcessRequest_DataReplyDefaultTypeInternal _ProcessRequest_DataReply_default_instance_;
class ProcessRequest_DataReply_Init;
struct ProcessRequest_DataReply_InitDefaultTypeInternal;
extern ProcessRequest_DataReply_InitDefaultTypeInternal _ProcessRequest_DataReply_Init_default_instance_;
}  // namespace v1
}  // namespace grpc
}  // namespace api
}  // namespace ArmoniK
PROTOBUF_NAMESPACE_OPEN
template<> ::ArmoniK::api::grpc::v1::ProcessReply* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessReply>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessReply_DataRequest>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessReply_Result* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessReply_Result>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessRequest* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessRequest>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessRequest_DataReply>(Arena*);
template<> ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* Arena::CreateMaybeMessage<::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ArmoniK {
namespace api {
namespace grpc {
namespace v1 {

// ===================================================================

class ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse();
  explicit constexpr ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse& other);
  static const ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse*>(&_ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.TaskOptionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.TaskOptionsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ProcessRequest_ComputeRequest_InitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest) */ {
 public:
  inline ProcessRequest_ComputeRequest_InitRequest() : ProcessRequest_ComputeRequest_InitRequest(nullptr) {}
  ~ProcessRequest_ComputeRequest_InitRequest() override;
  explicit constexpr ProcessRequest_ComputeRequest_InitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRequest_ComputeRequest_InitRequest(const ProcessRequest_ComputeRequest_InitRequest& from);
  ProcessRequest_ComputeRequest_InitRequest(ProcessRequest_ComputeRequest_InitRequest&& from) noexcept
    : ProcessRequest_ComputeRequest_InitRequest() {
    *this = ::std::move(from);
  }

  inline ProcessRequest_ComputeRequest_InitRequest& operator=(const ProcessRequest_ComputeRequest_InitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRequest_ComputeRequest_InitRequest& operator=(ProcessRequest_ComputeRequest_InitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRequest_ComputeRequest_InitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessRequest_ComputeRequest_InitRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessRequest_ComputeRequest_InitRequest*>(
               &_ProcessRequest_ComputeRequest_InitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessRequest_ComputeRequest_InitRequest& a, ProcessRequest_ComputeRequest_InitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRequest_ComputeRequest_InitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRequest_ComputeRequest_InitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRequest_ComputeRequest_InitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRequest_ComputeRequest_InitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRequest_ComputeRequest_InitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessRequest_ComputeRequest_InitRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRequest_ComputeRequest_InitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest";
  }
  protected:
  explicit ProcessRequest_ComputeRequest_InitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTaskOptionsFieldNumber = 4,
    kExpectedOutputKeysFieldNumber = 5,
    kSessionIdFieldNumber = 2,
    kTaskIdFieldNumber = 3,
    kConfigurationFieldNumber = 1,
    kPayloadFieldNumber = 6,
  };
  // map<string, string> task_options = 4;
  int task_options_size() const;
  private:
  int _internal_task_options_size() const;
  public:
  void clear_task_options();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_task_options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_task_options();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      task_options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_task_options();

  // repeated string expected_output_keys = 5;
  int expected_output_keys_size() const;
  private:
  int _internal_expected_output_keys_size() const;
  public:
  void clear_expected_output_keys();
  const std::string& expected_output_keys(int index) const;
  std::string* mutable_expected_output_keys(int index);
  void set_expected_output_keys(int index, const std::string& value);
  void set_expected_output_keys(int index, std::string&& value);
  void set_expected_output_keys(int index, const char* value);
  void set_expected_output_keys(int index, const char* value, size_t size);
  std::string* add_expected_output_keys();
  void add_expected_output_keys(const std::string& value);
  void add_expected_output_keys(std::string&& value);
  void add_expected_output_keys(const char* value);
  void add_expected_output_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& expected_output_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_expected_output_keys();
  private:
  const std::string& _internal_expected_output_keys(int index) const;
  std::string* _internal_add_expected_output_keys();
  public:

  // string session_id = 2;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string task_id = 3;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // .ArmoniK.api.grpc.v1.Configuration configuration = 1;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::ArmoniK::api::grpc::v1::Configuration& configuration() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::Configuration* release_configuration();
  ::ArmoniK::api::grpc::v1::Configuration* mutable_configuration();
  void set_allocated_configuration(::ArmoniK::api::grpc::v1::Configuration* configuration);
  private:
  const ::ArmoniK::api::grpc::v1::Configuration& _internal_configuration() const;
  ::ArmoniK::api::grpc::v1::Configuration* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::ArmoniK::api::grpc::v1::Configuration* configuration);
  ::ArmoniK::api::grpc::v1::Configuration* unsafe_arena_release_configuration();

  // .ArmoniK.api.grpc.v1.DataChunk payload = 6;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::ArmoniK::api::grpc::v1::DataChunk& payload() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::DataChunk* release_payload();
  ::ArmoniK::api::grpc::v1::DataChunk* mutable_payload();
  void set_allocated_payload(::ArmoniK::api::grpc::v1::DataChunk* payload);
  private:
  const ::ArmoniK::api::grpc::v1::DataChunk& _internal_payload() const;
  ::ArmoniK::api::grpc::v1::DataChunk* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::ArmoniK::api::grpc::v1::DataChunk* payload);
  ::ArmoniK::api::grpc::v1::DataChunk* unsafe_arena_release_payload();

  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ProcessRequest_ComputeRequest_InitRequest_TaskOptionsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> task_options_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> expected_output_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::ArmoniK::api::grpc::v1::Configuration* configuration_;
  ::ArmoniK::api::grpc::v1::DataChunk* payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessRequest_ComputeRequest_InitData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData) */ {
 public:
  inline ProcessRequest_ComputeRequest_InitData() : ProcessRequest_ComputeRequest_InitData(nullptr) {}
  ~ProcessRequest_ComputeRequest_InitData() override;
  explicit constexpr ProcessRequest_ComputeRequest_InitData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRequest_ComputeRequest_InitData(const ProcessRequest_ComputeRequest_InitData& from);
  ProcessRequest_ComputeRequest_InitData(ProcessRequest_ComputeRequest_InitData&& from) noexcept
    : ProcessRequest_ComputeRequest_InitData() {
    *this = ::std::move(from);
  }

  inline ProcessRequest_ComputeRequest_InitData& operator=(const ProcessRequest_ComputeRequest_InitData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRequest_ComputeRequest_InitData& operator=(ProcessRequest_ComputeRequest_InitData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRequest_ComputeRequest_InitData& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kKey = 1,
    kLastData = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const ProcessRequest_ComputeRequest_InitData* internal_default_instance() {
    return reinterpret_cast<const ProcessRequest_ComputeRequest_InitData*>(
               &_ProcessRequest_ComputeRequest_InitData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProcessRequest_ComputeRequest_InitData& a, ProcessRequest_ComputeRequest_InitData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRequest_ComputeRequest_InitData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRequest_ComputeRequest_InitData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRequest_ComputeRequest_InitData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRequest_ComputeRequest_InitData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRequest_ComputeRequest_InitData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessRequest_ComputeRequest_InitData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRequest_ComputeRequest_InitData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData";
  }
  protected:
  explicit ProcessRequest_ComputeRequest_InitData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kLastDataFieldNumber = 2,
  };
  // string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bool last_data = 2;
  bool has_last_data() const;
  private:
  bool _internal_has_last_data() const;
  public:
  void clear_last_data();
  bool last_data() const;
  void set_last_data(bool value);
  private:
  bool _internal_last_data() const;
  void _internal_set_last_data(bool value);
  public:

  void clear_Type();
  TypeCase Type_case() const;
  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData)
 private:
  class _Internal;
  void set_has_key();
  void set_has_last_data();

  inline bool has_Type() const;
  inline void clear_has_Type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    bool last_data_;
  } Type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessRequest_ComputeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest) */ {
 public:
  inline ProcessRequest_ComputeRequest() : ProcessRequest_ComputeRequest(nullptr) {}
  ~ProcessRequest_ComputeRequest() override;
  explicit constexpr ProcessRequest_ComputeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRequest_ComputeRequest(const ProcessRequest_ComputeRequest& from);
  ProcessRequest_ComputeRequest(ProcessRequest_ComputeRequest&& from) noexcept
    : ProcessRequest_ComputeRequest() {
    *this = ::std::move(from);
  }

  inline ProcessRequest_ComputeRequest& operator=(const ProcessRequest_ComputeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRequest_ComputeRequest& operator=(ProcessRequest_ComputeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRequest_ComputeRequest& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kInitRequest = 1,
    kPayload = 2,
    kInitData = 3,
    kData = 4,
    TYPE_NOT_SET = 0,
  };

  static inline const ProcessRequest_ComputeRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessRequest_ComputeRequest*>(
               &_ProcessRequest_ComputeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProcessRequest_ComputeRequest& a, ProcessRequest_ComputeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRequest_ComputeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRequest_ComputeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRequest_ComputeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRequest_ComputeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRequest_ComputeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessRequest_ComputeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRequest_ComputeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest";
  }
  protected:
  explicit ProcessRequest_ComputeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProcessRequest_ComputeRequest_InitRequest InitRequest;
  typedef ProcessRequest_ComputeRequest_InitData InitData;

  // accessors -------------------------------------------------------

  enum : int {
    kInitRequestFieldNumber = 1,
    kPayloadFieldNumber = 2,
    kInitDataFieldNumber = 3,
    kDataFieldNumber = 4,
  };
  // .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest init_request = 1;
  bool has_init_request() const;
  private:
  bool _internal_has_init_request() const;
  public:
  void clear_init_request();
  const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest& init_request() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* release_init_request();
  ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* mutable_init_request();
  void set_allocated_init_request(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* init_request);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest& _internal_init_request() const;
  ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* _internal_mutable_init_request();
  public:
  void unsafe_arena_set_allocated_init_request(
      ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* init_request);
  ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* unsafe_arena_release_init_request();

  // .ArmoniK.api.grpc.v1.DataChunk payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::ArmoniK::api::grpc::v1::DataChunk& payload() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::DataChunk* release_payload();
  ::ArmoniK::api::grpc::v1::DataChunk* mutable_payload();
  void set_allocated_payload(::ArmoniK::api::grpc::v1::DataChunk* payload);
  private:
  const ::ArmoniK::api::grpc::v1::DataChunk& _internal_payload() const;
  ::ArmoniK::api::grpc::v1::DataChunk* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::ArmoniK::api::grpc::v1::DataChunk* payload);
  ::ArmoniK::api::grpc::v1::DataChunk* unsafe_arena_release_payload();

  // .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData init_data = 3;
  bool has_init_data() const;
  private:
  bool _internal_has_init_data() const;
  public:
  void clear_init_data();
  const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData& init_data() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* release_init_data();
  ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* mutable_init_data();
  void set_allocated_init_data(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* init_data);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData& _internal_init_data() const;
  ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* _internal_mutable_init_data();
  public:
  void unsafe_arena_set_allocated_init_data(
      ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* init_data);
  ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* unsafe_arena_release_init_data();

  // .ArmoniK.api.grpc.v1.DataChunk data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::ArmoniK::api::grpc::v1::DataChunk& data() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::DataChunk* release_data();
  ::ArmoniK::api::grpc::v1::DataChunk* mutable_data();
  void set_allocated_data(::ArmoniK::api::grpc::v1::DataChunk* data);
  private:
  const ::ArmoniK::api::grpc::v1::DataChunk& _internal_data() const;
  ::ArmoniK::api::grpc::v1::DataChunk* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::ArmoniK::api::grpc::v1::DataChunk* data);
  ::ArmoniK::api::grpc::v1::DataChunk* unsafe_arena_release_data();

  void clear_Type();
  TypeCase Type_case() const;
  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest)
 private:
  class _Internal;
  void set_has_init_request();
  void set_has_payload();
  void set_has_init_data();
  void set_has_data();

  inline bool has_Type() const;
  inline void clear_has_Type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* init_request_;
    ::ArmoniK::api::grpc::v1::DataChunk* payload_;
    ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* init_data_;
    ::ArmoniK::api::grpc::v1::DataChunk* data_;
  } Type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessRequest_CreateTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask) */ {
 public:
  inline ProcessRequest_CreateTask() : ProcessRequest_CreateTask(nullptr) {}
  ~ProcessRequest_CreateTask() override;
  explicit constexpr ProcessRequest_CreateTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRequest_CreateTask(const ProcessRequest_CreateTask& from);
  ProcessRequest_CreateTask(ProcessRequest_CreateTask&& from) noexcept
    : ProcessRequest_CreateTask() {
    *this = ::std::move(from);
  }

  inline ProcessRequest_CreateTask& operator=(const ProcessRequest_CreateTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRequest_CreateTask& operator=(ProcessRequest_CreateTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRequest_CreateTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessRequest_CreateTask* internal_default_instance() {
    return reinterpret_cast<const ProcessRequest_CreateTask*>(
               &_ProcessRequest_CreateTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProcessRequest_CreateTask& a, ProcessRequest_CreateTask& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRequest_CreateTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRequest_CreateTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRequest_CreateTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRequest_CreateTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRequest_CreateTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessRequest_CreateTask& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRequest_CreateTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessRequest.CreateTask";
  }
  protected:
  explicit ProcessRequest_CreateTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyIdFieldNumber = 1,
    kReplyFieldNumber = 2,
  };
  // string reply_id = 1;
  void clear_reply_id();
  const std::string& reply_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_id();
  PROTOBUF_NODISCARD std::string* release_reply_id();
  void set_allocated_reply_id(std::string* reply_id);
  private:
  const std::string& _internal_reply_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_id(const std::string& value);
  std::string* _internal_mutable_reply_id();
  public:

  // .ArmoniK.api.grpc.v1.CreateTaskReply reply = 2;
  bool has_reply() const;
  private:
  bool _internal_has_reply() const;
  public:
  void clear_reply();
  const ::ArmoniK::api::grpc::v1::CreateTaskReply& reply() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::CreateTaskReply* release_reply();
  ::ArmoniK::api::grpc::v1::CreateTaskReply* mutable_reply();
  void set_allocated_reply(::ArmoniK::api::grpc::v1::CreateTaskReply* reply);
  private:
  const ::ArmoniK::api::grpc::v1::CreateTaskReply& _internal_reply() const;
  ::ArmoniK::api::grpc::v1::CreateTaskReply* _internal_mutable_reply();
  public:
  void unsafe_arena_set_allocated_reply(
      ::ArmoniK::api::grpc::v1::CreateTaskReply* reply);
  ::ArmoniK::api::grpc::v1::CreateTaskReply* unsafe_arena_release_reply();

  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_id_;
  ::ArmoniK::api::grpc::v1::CreateTaskReply* reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessRequest_DataReply_Init final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init) */ {
 public:
  inline ProcessRequest_DataReply_Init() : ProcessRequest_DataReply_Init(nullptr) {}
  ~ProcessRequest_DataReply_Init() override;
  explicit constexpr ProcessRequest_DataReply_Init(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRequest_DataReply_Init(const ProcessRequest_DataReply_Init& from);
  ProcessRequest_DataReply_Init(ProcessRequest_DataReply_Init&& from) noexcept
    : ProcessRequest_DataReply_Init() {
    *this = ::std::move(from);
  }

  inline ProcessRequest_DataReply_Init& operator=(const ProcessRequest_DataReply_Init& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRequest_DataReply_Init& operator=(ProcessRequest_DataReply_Init&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRequest_DataReply_Init& default_instance() {
    return *internal_default_instance();
  }
  enum HasResultCase {
    kData = 2,
    kError = 3,
    HAS_RESULT_NOT_SET = 0,
  };

  static inline const ProcessRequest_DataReply_Init* internal_default_instance() {
    return reinterpret_cast<const ProcessRequest_DataReply_Init*>(
               &_ProcessRequest_DataReply_Init_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProcessRequest_DataReply_Init& a, ProcessRequest_DataReply_Init& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRequest_DataReply_Init* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRequest_DataReply_Init* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRequest_DataReply_Init* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRequest_DataReply_Init>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRequest_DataReply_Init& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessRequest_DataReply_Init& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRequest_DataReply_Init* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init";
  }
  protected:
  explicit ProcessRequest_DataReply_Init(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kDataFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .ArmoniK.api.grpc.v1.DataChunk data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::ArmoniK::api::grpc::v1::DataChunk& data() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::DataChunk* release_data();
  ::ArmoniK::api::grpc::v1::DataChunk* mutable_data();
  void set_allocated_data(::ArmoniK::api::grpc::v1::DataChunk* data);
  private:
  const ::ArmoniK::api::grpc::v1::DataChunk& _internal_data() const;
  ::ArmoniK::api::grpc::v1::DataChunk* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::ArmoniK::api::grpc::v1::DataChunk* data);
  ::ArmoniK::api::grpc::v1::DataChunk* unsafe_arena_release_data();

  // string error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  void clear_has_result();
  HasResultCase has_result_case() const;
  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init)
 private:
  class _Internal;
  void set_has_data();
  void set_has_error();

  inline bool has_has_result() const;
  inline void clear_has_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  union HasResultUnion {
    constexpr HasResultUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ArmoniK::api::grpc::v1::DataChunk* data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  } has_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessRequest_DataReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessRequest.DataReply) */ {
 public:
  inline ProcessRequest_DataReply() : ProcessRequest_DataReply(nullptr) {}
  ~ProcessRequest_DataReply() override;
  explicit constexpr ProcessRequest_DataReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRequest_DataReply(const ProcessRequest_DataReply& from);
  ProcessRequest_DataReply(ProcessRequest_DataReply&& from) noexcept
    : ProcessRequest_DataReply() {
    *this = ::std::move(from);
  }

  inline ProcessRequest_DataReply& operator=(const ProcessRequest_DataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRequest_DataReply& operator=(ProcessRequest_DataReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRequest_DataReply& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kInit = 2,
    kData = 3,
    TYPE_NOT_SET = 0,
  };

  static inline const ProcessRequest_DataReply* internal_default_instance() {
    return reinterpret_cast<const ProcessRequest_DataReply*>(
               &_ProcessRequest_DataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProcessRequest_DataReply& a, ProcessRequest_DataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRequest_DataReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRequest_DataReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRequest_DataReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRequest_DataReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRequest_DataReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessRequest_DataReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRequest_DataReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessRequest.DataReply";
  }
  protected:
  explicit ProcessRequest_DataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProcessRequest_DataReply_Init Init;

  // accessors -------------------------------------------------------

  enum : int {
    kReplyIdFieldNumber = 1,
    kInitFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string reply_id = 1;
  void clear_reply_id();
  const std::string& reply_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reply_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reply_id();
  PROTOBUF_NODISCARD std::string* release_reply_id();
  void set_allocated_reply_id(std::string* reply_id);
  private:
  const std::string& _internal_reply_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_id(const std::string& value);
  std::string* _internal_mutable_reply_id();
  public:

  // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init init = 2;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init& init() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* release_init();
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* mutable_init();
  void set_allocated_init(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* init);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init& _internal_init() const;
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* _internal_mutable_init();
  public:
  void unsafe_arena_set_allocated_init(
      ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* init);
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* unsafe_arena_release_init();

  // .ArmoniK.api.grpc.v1.DataChunk data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::ArmoniK::api::grpc::v1::DataChunk& data() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::DataChunk* release_data();
  ::ArmoniK::api::grpc::v1::DataChunk* mutable_data();
  void set_allocated_data(::ArmoniK::api::grpc::v1::DataChunk* data);
  private:
  const ::ArmoniK::api::grpc::v1::DataChunk& _internal_data() const;
  ::ArmoniK::api::grpc::v1::DataChunk* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::ArmoniK::api::grpc::v1::DataChunk* data);
  ::ArmoniK::api::grpc::v1::DataChunk* unsafe_arena_release_data();

  void clear_Type();
  TypeCase Type_case() const;
  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessRequest.DataReply)
 private:
  class _Internal;
  void set_has_init();
  void set_has_data();

  inline bool has_Type() const;
  inline void clear_has_Type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_id_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* init_;
    ::ArmoniK::api::grpc::v1::DataChunk* data_;
  } Type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessRequest) */ {
 public:
  inline ProcessRequest() : ProcessRequest(nullptr) {}
  ~ProcessRequest() override;
  explicit constexpr ProcessRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRequest(const ProcessRequest& from);
  ProcessRequest(ProcessRequest&& from) noexcept
    : ProcessRequest() {
    *this = ::std::move(from);
  }

  inline ProcessRequest& operator=(const ProcessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRequest& operator=(ProcessRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRequest& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kCompute = 1,
    kCreateTask = 2,
    kResource = 3,
    kCommonData = 4,
    kDirectData = 5,
    TYPE_NOT_SET = 0,
  };

  static inline const ProcessRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessRequest*>(
               &_ProcessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProcessRequest& a, ProcessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessRequest";
  }
  protected:
  explicit ProcessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProcessRequest_ComputeRequest ComputeRequest;
  typedef ProcessRequest_CreateTask CreateTask;
  typedef ProcessRequest_DataReply DataReply;

  // accessors -------------------------------------------------------

  enum : int {
    kComputeFieldNumber = 1,
    kCreateTaskFieldNumber = 2,
    kResourceFieldNumber = 3,
    kCommonDataFieldNumber = 4,
    kDirectDataFieldNumber = 5,
  };
  // .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest compute = 1;
  bool has_compute() const;
  private:
  bool _internal_has_compute() const;
  public:
  void clear_compute();
  const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest& compute() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* release_compute();
  ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* mutable_compute();
  void set_allocated_compute(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* compute);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest& _internal_compute() const;
  ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* _internal_mutable_compute();
  public:
  void unsafe_arena_set_allocated_compute(
      ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* compute);
  ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* unsafe_arena_release_compute();

  // .ArmoniK.api.grpc.v1.ProcessRequest.CreateTask create_task = 2;
  bool has_create_task() const;
  private:
  bool _internal_has_create_task() const;
  public:
  void clear_create_task();
  const ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask& create_task() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* release_create_task();
  ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* mutable_create_task();
  void set_allocated_create_task(::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* create_task);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask& _internal_create_task() const;
  ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* _internal_mutable_create_task();
  public:
  void unsafe_arena_set_allocated_create_task(
      ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* create_task);
  ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* unsafe_arena_release_create_task();

  // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply resource = 3;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& resource() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* release_resource();
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* mutable_resource();
  void set_allocated_resource(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* resource);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& _internal_resource() const;
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* resource);
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* unsafe_arena_release_resource();

  // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply common_data = 4;
  bool has_common_data() const;
  private:
  bool _internal_has_common_data() const;
  public:
  void clear_common_data();
  const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& common_data() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* release_common_data();
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* mutable_common_data();
  void set_allocated_common_data(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* common_data);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& _internal_common_data() const;
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* _internal_mutable_common_data();
  public:
  void unsafe_arena_set_allocated_common_data(
      ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* common_data);
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* unsafe_arena_release_common_data();

  // .ArmoniK.api.grpc.v1.ProcessRequest.DataReply direct_data = 5;
  bool has_direct_data() const;
  private:
  bool _internal_has_direct_data() const;
  public:
  void clear_direct_data();
  const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& direct_data() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* release_direct_data();
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* mutable_direct_data();
  void set_allocated_direct_data(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* direct_data);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& _internal_direct_data() const;
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* _internal_mutable_direct_data();
  public:
  void unsafe_arena_set_allocated_direct_data(
      ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* direct_data);
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* unsafe_arena_release_direct_data();

  void clear_Type();
  TypeCase Type_case() const;
  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessRequest)
 private:
  class _Internal;
  void set_has_compute();
  void set_has_create_task();
  void set_has_resource();
  void set_has_common_data();
  void set_has_direct_data();

  inline bool has_Type() const;
  inline void clear_has_Type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* compute_;
    ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* create_task_;
    ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* resource_;
    ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* common_data_;
    ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* direct_data_;
  } Type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessReply_Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessReply.Result) */ {
 public:
  inline ProcessReply_Result() : ProcessReply_Result(nullptr) {}
  ~ProcessReply_Result() override;
  explicit constexpr ProcessReply_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessReply_Result(const ProcessReply_Result& from);
  ProcessReply_Result(ProcessReply_Result&& from) noexcept
    : ProcessReply_Result() {
    *this = ::std::move(from);
  }

  inline ProcessReply_Result& operator=(const ProcessReply_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessReply_Result& operator=(ProcessReply_Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessReply_Result& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kInit = 1,
    kData = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const ProcessReply_Result* internal_default_instance() {
    return reinterpret_cast<const ProcessReply_Result*>(
               &_ProcessReply_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ProcessReply_Result& a, ProcessReply_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessReply_Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessReply_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessReply_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessReply_Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessReply_Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessReply_Result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessReply_Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessReply.Result";
  }
  protected:
  explicit ProcessReply_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .ArmoniK.api.grpc.v1.InitKeyedDataStream init = 1;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  const ::ArmoniK::api::grpc::v1::InitKeyedDataStream& init() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::InitKeyedDataStream* release_init();
  ::ArmoniK::api::grpc::v1::InitKeyedDataStream* mutable_init();
  void set_allocated_init(::ArmoniK::api::grpc::v1::InitKeyedDataStream* init);
  private:
  const ::ArmoniK::api::grpc::v1::InitKeyedDataStream& _internal_init() const;
  ::ArmoniK::api::grpc::v1::InitKeyedDataStream* _internal_mutable_init();
  public:
  void unsafe_arena_set_allocated_init(
      ::ArmoniK::api::grpc::v1::InitKeyedDataStream* init);
  ::ArmoniK::api::grpc::v1::InitKeyedDataStream* unsafe_arena_release_init();

  // .ArmoniK.api.grpc.v1.DataChunk data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::ArmoniK::api::grpc::v1::DataChunk& data() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::DataChunk* release_data();
  ::ArmoniK::api::grpc::v1::DataChunk* mutable_data();
  void set_allocated_data(::ArmoniK::api::grpc::v1::DataChunk* data);
  private:
  const ::ArmoniK::api::grpc::v1::DataChunk& _internal_data() const;
  ::ArmoniK::api::grpc::v1::DataChunk* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::ArmoniK::api::grpc::v1::DataChunk* data);
  ::ArmoniK::api::grpc::v1::DataChunk* unsafe_arena_release_data();

  void clear_Type();
  TypeCase Type_case() const;
  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessReply.Result)
 private:
  class _Internal;
  void set_has_init();
  void set_has_data();

  inline bool has_Type() const;
  inline void clear_has_Type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ArmoniK::api::grpc::v1::InitKeyedDataStream* init_;
    ::ArmoniK::api::grpc::v1::DataChunk* data_;
  } Type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessReply_CreateSmallTaskRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest) */ {
 public:
  inline ProcessReply_CreateSmallTaskRequest() : ProcessReply_CreateSmallTaskRequest(nullptr) {}
  ~ProcessReply_CreateSmallTaskRequest() override;
  explicit constexpr ProcessReply_CreateSmallTaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessReply_CreateSmallTaskRequest(const ProcessReply_CreateSmallTaskRequest& from);
  ProcessReply_CreateSmallTaskRequest(ProcessReply_CreateSmallTaskRequest&& from) noexcept
    : ProcessReply_CreateSmallTaskRequest() {
    *this = ::std::move(from);
  }

  inline ProcessReply_CreateSmallTaskRequest& operator=(const ProcessReply_CreateSmallTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessReply_CreateSmallTaskRequest& operator=(ProcessReply_CreateSmallTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessReply_CreateSmallTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessReply_CreateSmallTaskRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessReply_CreateSmallTaskRequest*>(
               &_ProcessReply_CreateSmallTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ProcessReply_CreateSmallTaskRequest& a, ProcessReply_CreateSmallTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessReply_CreateSmallTaskRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessReply_CreateSmallTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessReply_CreateSmallTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessReply_CreateSmallTaskRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessReply_CreateSmallTaskRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessReply_CreateSmallTaskRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessReply_CreateSmallTaskRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest";
  }
  protected:
  explicit ProcessReply_CreateSmallTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRequestsFieldNumber = 2,
    kTaskOptionsFieldNumber = 1,
  };
  // repeated .ArmoniK.api.grpc.v1.TaskRequest task_requests = 2;
  int task_requests_size() const;
  private:
  int _internal_task_requests_size() const;
  public:
  void clear_task_requests();
  ::ArmoniK::api::grpc::v1::TaskRequest* mutable_task_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ArmoniK::api::grpc::v1::TaskRequest >*
      mutable_task_requests();
  private:
  const ::ArmoniK::api::grpc::v1::TaskRequest& _internal_task_requests(int index) const;
  ::ArmoniK::api::grpc::v1::TaskRequest* _internal_add_task_requests();
  public:
  const ::ArmoniK::api::grpc::v1::TaskRequest& task_requests(int index) const;
  ::ArmoniK::api::grpc::v1::TaskRequest* add_task_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ArmoniK::api::grpc::v1::TaskRequest >&
      task_requests() const;

  // .ArmoniK.api.grpc.v1.TaskOptions task_options = 1;
  bool has_task_options() const;
  private:
  bool _internal_has_task_options() const;
  public:
  void clear_task_options();
  const ::ArmoniK::api::grpc::v1::TaskOptions& task_options() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::TaskOptions* release_task_options();
  ::ArmoniK::api::grpc::v1::TaskOptions* mutable_task_options();
  void set_allocated_task_options(::ArmoniK::api::grpc::v1::TaskOptions* task_options);
  private:
  const ::ArmoniK::api::grpc::v1::TaskOptions& _internal_task_options() const;
  ::ArmoniK::api::grpc::v1::TaskOptions* _internal_mutable_task_options();
  public:
  void unsafe_arena_set_allocated_task_options(
      ::ArmoniK::api::grpc::v1::TaskOptions* task_options);
  ::ArmoniK::api::grpc::v1::TaskOptions* unsafe_arena_release_task_options();

  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ArmoniK::api::grpc::v1::TaskRequest > task_requests_;
  ::ArmoniK::api::grpc::v1::TaskOptions* task_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessReply_CreateLargeTaskRequest_InitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest) */ {
 public:
  inline ProcessReply_CreateLargeTaskRequest_InitRequest() : ProcessReply_CreateLargeTaskRequest_InitRequest(nullptr) {}
  ~ProcessReply_CreateLargeTaskRequest_InitRequest() override;
  explicit constexpr ProcessReply_CreateLargeTaskRequest_InitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessReply_CreateLargeTaskRequest_InitRequest(const ProcessReply_CreateLargeTaskRequest_InitRequest& from);
  ProcessReply_CreateLargeTaskRequest_InitRequest(ProcessReply_CreateLargeTaskRequest_InitRequest&& from) noexcept
    : ProcessReply_CreateLargeTaskRequest_InitRequest() {
    *this = ::std::move(from);
  }

  inline ProcessReply_CreateLargeTaskRequest_InitRequest& operator=(const ProcessReply_CreateLargeTaskRequest_InitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessReply_CreateLargeTaskRequest_InitRequest& operator=(ProcessReply_CreateLargeTaskRequest_InitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessReply_CreateLargeTaskRequest_InitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessReply_CreateLargeTaskRequest_InitRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessReply_CreateLargeTaskRequest_InitRequest*>(
               &_ProcessReply_CreateLargeTaskRequest_InitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ProcessReply_CreateLargeTaskRequest_InitRequest& a, ProcessReply_CreateLargeTaskRequest_InitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessReply_CreateLargeTaskRequest_InitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessReply_CreateLargeTaskRequest_InitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessReply_CreateLargeTaskRequest_InitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessReply_CreateLargeTaskRequest_InitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessReply_CreateLargeTaskRequest_InitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessReply_CreateLargeTaskRequest_InitRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessReply_CreateLargeTaskRequest_InitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest";
  }
  protected:
  explicit ProcessReply_CreateLargeTaskRequest_InitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskOptionsFieldNumber = 1,
  };
  // .ArmoniK.api.grpc.v1.TaskOptions task_options = 1;
  bool has_task_options() const;
  private:
  bool _internal_has_task_options() const;
  public:
  void clear_task_options();
  const ::ArmoniK::api::grpc::v1::TaskOptions& task_options() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::TaskOptions* release_task_options();
  ::ArmoniK::api::grpc::v1::TaskOptions* mutable_task_options();
  void set_allocated_task_options(::ArmoniK::api::grpc::v1::TaskOptions* task_options);
  private:
  const ::ArmoniK::api::grpc::v1::TaskOptions& _internal_task_options() const;
  ::ArmoniK::api::grpc::v1::TaskOptions* _internal_mutable_task_options();
  public:
  void unsafe_arena_set_allocated_task_options(
      ::ArmoniK::api::grpc::v1::TaskOptions* task_options);
  ::ArmoniK::api::grpc::v1::TaskOptions* unsafe_arena_release_task_options();

  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ArmoniK::api::grpc::v1::TaskOptions* task_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessReply_CreateLargeTaskRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest) */ {
 public:
  inline ProcessReply_CreateLargeTaskRequest() : ProcessReply_CreateLargeTaskRequest(nullptr) {}
  ~ProcessReply_CreateLargeTaskRequest() override;
  explicit constexpr ProcessReply_CreateLargeTaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessReply_CreateLargeTaskRequest(const ProcessReply_CreateLargeTaskRequest& from);
  ProcessReply_CreateLargeTaskRequest(ProcessReply_CreateLargeTaskRequest&& from) noexcept
    : ProcessReply_CreateLargeTaskRequest() {
    *this = ::std::move(from);
  }

  inline ProcessReply_CreateLargeTaskRequest& operator=(const ProcessReply_CreateLargeTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessReply_CreateLargeTaskRequest& operator=(ProcessReply_CreateLargeTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessReply_CreateLargeTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kInitRequest = 1,
    kInitTask = 2,
    kTaskPayload = 3,
    TYPE_NOT_SET = 0,
  };

  static inline const ProcessReply_CreateLargeTaskRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessReply_CreateLargeTaskRequest*>(
               &_ProcessReply_CreateLargeTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ProcessReply_CreateLargeTaskRequest& a, ProcessReply_CreateLargeTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessReply_CreateLargeTaskRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessReply_CreateLargeTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessReply_CreateLargeTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessReply_CreateLargeTaskRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessReply_CreateLargeTaskRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessReply_CreateLargeTaskRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessReply_CreateLargeTaskRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest";
  }
  protected:
  explicit ProcessReply_CreateLargeTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProcessReply_CreateLargeTaskRequest_InitRequest InitRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kInitRequestFieldNumber = 1,
    kInitTaskFieldNumber = 2,
    kTaskPayloadFieldNumber = 3,
  };
  // .ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest init_request = 1;
  bool has_init_request() const;
  private:
  bool _internal_has_init_request() const;
  public:
  void clear_init_request();
  const ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest& init_request() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* release_init_request();
  ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* mutable_init_request();
  void set_allocated_init_request(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* init_request);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest& _internal_init_request() const;
  ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* _internal_mutable_init_request();
  public:
  void unsafe_arena_set_allocated_init_request(
      ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* init_request);
  ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* unsafe_arena_release_init_request();

  // .ArmoniK.api.grpc.v1.InitTaskRequest init_task = 2;
  bool has_init_task() const;
  private:
  bool _internal_has_init_task() const;
  public:
  void clear_init_task();
  const ::ArmoniK::api::grpc::v1::InitTaskRequest& init_task() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::InitTaskRequest* release_init_task();
  ::ArmoniK::api::grpc::v1::InitTaskRequest* mutable_init_task();
  void set_allocated_init_task(::ArmoniK::api::grpc::v1::InitTaskRequest* init_task);
  private:
  const ::ArmoniK::api::grpc::v1::InitTaskRequest& _internal_init_task() const;
  ::ArmoniK::api::grpc::v1::InitTaskRequest* _internal_mutable_init_task();
  public:
  void unsafe_arena_set_allocated_init_task(
      ::ArmoniK::api::grpc::v1::InitTaskRequest* init_task);
  ::ArmoniK::api::grpc::v1::InitTaskRequest* unsafe_arena_release_init_task();

  // .ArmoniK.api.grpc.v1.DataChunk task_payload = 3;
  bool has_task_payload() const;
  private:
  bool _internal_has_task_payload() const;
  public:
  void clear_task_payload();
  const ::ArmoniK::api::grpc::v1::DataChunk& task_payload() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::DataChunk* release_task_payload();
  ::ArmoniK::api::grpc::v1::DataChunk* mutable_task_payload();
  void set_allocated_task_payload(::ArmoniK::api::grpc::v1::DataChunk* task_payload);
  private:
  const ::ArmoniK::api::grpc::v1::DataChunk& _internal_task_payload() const;
  ::ArmoniK::api::grpc::v1::DataChunk* _internal_mutable_task_payload();
  public:
  void unsafe_arena_set_allocated_task_payload(
      ::ArmoniK::api::grpc::v1::DataChunk* task_payload);
  ::ArmoniK::api::grpc::v1::DataChunk* unsafe_arena_release_task_payload();

  void clear_Type();
  TypeCase Type_case() const;
  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest)
 private:
  class _Internal;
  void set_has_init_request();
  void set_has_init_task();
  void set_has_task_payload();

  inline bool has_Type() const;
  inline void clear_has_Type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* init_request_;
    ::ArmoniK::api::grpc::v1::InitTaskRequest* init_task_;
    ::ArmoniK::api::grpc::v1::DataChunk* task_payload_;
  } Type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessReply_DataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessReply.DataRequest) */ {
 public:
  inline ProcessReply_DataRequest() : ProcessReply_DataRequest(nullptr) {}
  ~ProcessReply_DataRequest() override;
  explicit constexpr ProcessReply_DataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessReply_DataRequest(const ProcessReply_DataRequest& from);
  ProcessReply_DataRequest(ProcessReply_DataRequest&& from) noexcept
    : ProcessReply_DataRequest() {
    *this = ::std::move(from);
  }

  inline ProcessReply_DataRequest& operator=(const ProcessReply_DataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessReply_DataRequest& operator=(ProcessReply_DataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessReply_DataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessReply_DataRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessReply_DataRequest*>(
               &_ProcessReply_DataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProcessReply_DataRequest& a, ProcessReply_DataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessReply_DataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessReply_DataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessReply_DataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessReply_DataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessReply_DataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessReply_DataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessReply_DataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessReply.DataRequest";
  }
  protected:
  explicit ProcessReply_DataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessReply.DataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArmoniK.api.grpc.v1.ProcessReply) */ {
 public:
  inline ProcessReply() : ProcessReply(nullptr) {}
  ~ProcessReply() override;
  explicit constexpr ProcessReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessReply(const ProcessReply& from);
  ProcessReply(ProcessReply&& from) noexcept
    : ProcessReply() {
    *this = ::std::move(from);
  }

  inline ProcessReply& operator=(const ProcessReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessReply& operator=(ProcessReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessReply& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kOutput = 2,
    kResult = 3,
    kCreateSmallTask = 4,
    kCreateLargeTask = 5,
    kResource = 6,
    kCommonData = 7,
    kDirectData = 8,
    TYPE_NOT_SET = 0,
  };

  static inline const ProcessReply* internal_default_instance() {
    return reinterpret_cast<const ProcessReply*>(
               &_ProcessReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProcessReply& a, ProcessReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArmoniK.api.grpc.v1.ProcessReply";
  }
  protected:
  explicit ProcessReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProcessReply_Result Result;
  typedef ProcessReply_CreateSmallTaskRequest CreateSmallTaskRequest;
  typedef ProcessReply_CreateLargeTaskRequest CreateLargeTaskRequest;
  typedef ProcessReply_DataRequest DataRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kOutputFieldNumber = 2,
    kResultFieldNumber = 3,
    kCreateSmallTaskFieldNumber = 4,
    kCreateLargeTaskFieldNumber = 5,
    kResourceFieldNumber = 6,
    kCommonDataFieldNumber = 7,
    kDirectDataFieldNumber = 8,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .ArmoniK.api.grpc.v1.Output output = 2;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::ArmoniK::api::grpc::v1::Output& output() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::Output* release_output();
  ::ArmoniK::api::grpc::v1::Output* mutable_output();
  void set_allocated_output(::ArmoniK::api::grpc::v1::Output* output);
  private:
  const ::ArmoniK::api::grpc::v1::Output& _internal_output() const;
  ::ArmoniK::api::grpc::v1::Output* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::ArmoniK::api::grpc::v1::Output* output);
  ::ArmoniK::api::grpc::v1::Output* unsafe_arena_release_output();

  // .ArmoniK.api.grpc.v1.ProcessReply.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ArmoniK::api::grpc::v1::ProcessReply_Result& result() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessReply_Result* release_result();
  ::ArmoniK::api::grpc::v1::ProcessReply_Result* mutable_result();
  void set_allocated_result(::ArmoniK::api::grpc::v1::ProcessReply_Result* result);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessReply_Result& _internal_result() const;
  ::ArmoniK::api::grpc::v1::ProcessReply_Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ArmoniK::api::grpc::v1::ProcessReply_Result* result);
  ::ArmoniK::api::grpc::v1::ProcessReply_Result* unsafe_arena_release_result();

  // .ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest create_small_task = 4;
  bool has_create_small_task() const;
  private:
  bool _internal_has_create_small_task() const;
  public:
  void clear_create_small_task();
  const ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest& create_small_task() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* release_create_small_task();
  ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* mutable_create_small_task();
  void set_allocated_create_small_task(::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* create_small_task);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest& _internal_create_small_task() const;
  ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* _internal_mutable_create_small_task();
  public:
  void unsafe_arena_set_allocated_create_small_task(
      ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* create_small_task);
  ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* unsafe_arena_release_create_small_task();

  // .ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest create_large_task = 5;
  bool has_create_large_task() const;
  private:
  bool _internal_has_create_large_task() const;
  public:
  void clear_create_large_task();
  const ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest& create_large_task() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* release_create_large_task();
  ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* mutable_create_large_task();
  void set_allocated_create_large_task(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* create_large_task);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest& _internal_create_large_task() const;
  ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* _internal_mutable_create_large_task();
  public:
  void unsafe_arena_set_allocated_create_large_task(
      ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* create_large_task);
  ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* unsafe_arena_release_create_large_task();

  // .ArmoniK.api.grpc.v1.ProcessReply.DataRequest resource = 6;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& resource() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* release_resource();
  ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* mutable_resource();
  void set_allocated_resource(::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* resource);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& _internal_resource() const;
  ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* resource);
  ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* unsafe_arena_release_resource();

  // .ArmoniK.api.grpc.v1.ProcessReply.DataRequest common_data = 7;
  bool has_common_data() const;
  private:
  bool _internal_has_common_data() const;
  public:
  void clear_common_data();
  const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& common_data() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* release_common_data();
  ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* mutable_common_data();
  void set_allocated_common_data(::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* common_data);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& _internal_common_data() const;
  ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* _internal_mutable_common_data();
  public:
  void unsafe_arena_set_allocated_common_data(
      ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* common_data);
  ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* unsafe_arena_release_common_data();

  // .ArmoniK.api.grpc.v1.ProcessReply.DataRequest direct_data = 8;
  bool has_direct_data() const;
  private:
  bool _internal_has_direct_data() const;
  public:
  void clear_direct_data();
  const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& direct_data() const;
  PROTOBUF_NODISCARD ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* release_direct_data();
  ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* mutable_direct_data();
  void set_allocated_direct_data(::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* direct_data);
  private:
  const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& _internal_direct_data() const;
  ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* _internal_mutable_direct_data();
  public:
  void unsafe_arena_set_allocated_direct_data(
      ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* direct_data);
  ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* unsafe_arena_release_direct_data();

  void clear_Type();
  TypeCase Type_case() const;
  // @@protoc_insertion_point(class_scope:ArmoniK.api.grpc.v1.ProcessReply)
 private:
  class _Internal;
  void set_has_output();
  void set_has_result();
  void set_has_create_small_task();
  void set_has_create_large_task();
  void set_has_resource();
  void set_has_common_data();
  void set_has_direct_data();

  inline bool has_Type() const;
  inline void clear_has_Type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ArmoniK::api::grpc::v1::Output* output_;
    ::ArmoniK::api::grpc::v1::ProcessReply_Result* result_;
    ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* create_small_task_;
    ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* create_large_task_;
    ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* resource_;
    ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* common_data_;
    ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* direct_data_;
  } Type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_worker_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProcessRequest_ComputeRequest_InitRequest

// .ArmoniK.api.grpc.v1.Configuration configuration = 1;
inline bool ProcessRequest_ComputeRequest_InitRequest::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool ProcessRequest_ComputeRequest_InitRequest::has_configuration() const {
  return _internal_has_configuration();
}
inline const ::ArmoniK::api::grpc::v1::Configuration& ProcessRequest_ComputeRequest_InitRequest::_internal_configuration() const {
  const ::ArmoniK::api::grpc::v1::Configuration* p = configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::ArmoniK::api::grpc::v1::Configuration&>(
      ::ArmoniK::api::grpc::v1::_Configuration_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::Configuration& ProcessRequest_ComputeRequest_InitRequest::configuration() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.configuration)
  return _internal_configuration();
}
inline void ProcessRequest_ComputeRequest_InitRequest::unsafe_arena_set_allocated_configuration(
    ::ArmoniK::api::grpc::v1::Configuration* configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.configuration)
}
inline ::ArmoniK::api::grpc::v1::Configuration* ProcessRequest_ComputeRequest_InitRequest::release_configuration() {
  
  ::ArmoniK::api::grpc::v1::Configuration* temp = configuration_;
  configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ArmoniK::api::grpc::v1::Configuration* ProcessRequest_ComputeRequest_InitRequest::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.configuration)
  
  ::ArmoniK::api::grpc::v1::Configuration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::ArmoniK::api::grpc::v1::Configuration* ProcessRequest_ComputeRequest_InitRequest::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::ArmoniK::api::grpc::v1::Configuration>(GetArenaForAllocation());
    configuration_ = p;
  }
  return configuration_;
}
inline ::ArmoniK::api::grpc::v1::Configuration* ProcessRequest_ComputeRequest_InitRequest::mutable_configuration() {
  ::ArmoniK::api::grpc::v1::Configuration* _msg = _internal_mutable_configuration();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.configuration)
  return _msg;
}
inline void ProcessRequest_ComputeRequest_InitRequest::set_allocated_configuration(::ArmoniK::api::grpc::v1::Configuration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration));
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.configuration)
}

// string session_id = 2;
inline void ProcessRequest_ComputeRequest_InitRequest::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& ProcessRequest_ComputeRequest_InitRequest::session_id() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessRequest_ComputeRequest_InitRequest::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.session_id)
}
inline std::string* ProcessRequest_ComputeRequest_InitRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.session_id)
  return _s;
}
inline const std::string& ProcessRequest_ComputeRequest_InitRequest::_internal_session_id() const {
  return session_id_.Get();
}
inline void ProcessRequest_ComputeRequest_InitRequest::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProcessRequest_ComputeRequest_InitRequest::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProcessRequest_ComputeRequest_InitRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProcessRequest_ComputeRequest_InitRequest::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.session_id)
}

// string task_id = 3;
inline void ProcessRequest_ComputeRequest_InitRequest::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& ProcessRequest_ComputeRequest_InitRequest::task_id() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessRequest_ComputeRequest_InitRequest::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.task_id)
}
inline std::string* ProcessRequest_ComputeRequest_InitRequest::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.task_id)
  return _s;
}
inline const std::string& ProcessRequest_ComputeRequest_InitRequest::_internal_task_id() const {
  return task_id_.Get();
}
inline void ProcessRequest_ComputeRequest_InitRequest::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProcessRequest_ComputeRequest_InitRequest::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProcessRequest_ComputeRequest_InitRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProcessRequest_ComputeRequest_InitRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.task_id)
}

// map<string, string> task_options = 4;
inline int ProcessRequest_ComputeRequest_InitRequest::_internal_task_options_size() const {
  return task_options_.size();
}
inline int ProcessRequest_ComputeRequest_InitRequest::task_options_size() const {
  return _internal_task_options_size();
}
inline void ProcessRequest_ComputeRequest_InitRequest::clear_task_options() {
  task_options_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ProcessRequest_ComputeRequest_InitRequest::_internal_task_options() const {
  return task_options_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ProcessRequest_ComputeRequest_InitRequest::task_options() const {
  // @@protoc_insertion_point(field_map:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.task_options)
  return _internal_task_options();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ProcessRequest_ComputeRequest_InitRequest::_internal_mutable_task_options() {
  return task_options_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ProcessRequest_ComputeRequest_InitRequest::mutable_task_options() {
  // @@protoc_insertion_point(field_mutable_map:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.task_options)
  return _internal_mutable_task_options();
}

// repeated string expected_output_keys = 5;
inline int ProcessRequest_ComputeRequest_InitRequest::_internal_expected_output_keys_size() const {
  return expected_output_keys_.size();
}
inline int ProcessRequest_ComputeRequest_InitRequest::expected_output_keys_size() const {
  return _internal_expected_output_keys_size();
}
inline void ProcessRequest_ComputeRequest_InitRequest::clear_expected_output_keys() {
  expected_output_keys_.Clear();
}
inline std::string* ProcessRequest_ComputeRequest_InitRequest::add_expected_output_keys() {
  std::string* _s = _internal_add_expected_output_keys();
  // @@protoc_insertion_point(field_add_mutable:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
  return _s;
}
inline const std::string& ProcessRequest_ComputeRequest_InitRequest::_internal_expected_output_keys(int index) const {
  return expected_output_keys_.Get(index);
}
inline const std::string& ProcessRequest_ComputeRequest_InitRequest::expected_output_keys(int index) const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
  return _internal_expected_output_keys(index);
}
inline std::string* ProcessRequest_ComputeRequest_InitRequest::mutable_expected_output_keys(int index) {
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
  return expected_output_keys_.Mutable(index);
}
inline void ProcessRequest_ComputeRequest_InitRequest::set_expected_output_keys(int index, const std::string& value) {
  expected_output_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
}
inline void ProcessRequest_ComputeRequest_InitRequest::set_expected_output_keys(int index, std::string&& value) {
  expected_output_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
}
inline void ProcessRequest_ComputeRequest_InitRequest::set_expected_output_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  expected_output_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
}
inline void ProcessRequest_ComputeRequest_InitRequest::set_expected_output_keys(int index, const char* value, size_t size) {
  expected_output_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
}
inline std::string* ProcessRequest_ComputeRequest_InitRequest::_internal_add_expected_output_keys() {
  return expected_output_keys_.Add();
}
inline void ProcessRequest_ComputeRequest_InitRequest::add_expected_output_keys(const std::string& value) {
  expected_output_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
}
inline void ProcessRequest_ComputeRequest_InitRequest::add_expected_output_keys(std::string&& value) {
  expected_output_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
}
inline void ProcessRequest_ComputeRequest_InitRequest::add_expected_output_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  expected_output_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
}
inline void ProcessRequest_ComputeRequest_InitRequest::add_expected_output_keys(const char* value, size_t size) {
  expected_output_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessRequest_ComputeRequest_InitRequest::expected_output_keys() const {
  // @@protoc_insertion_point(field_list:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
  return expected_output_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessRequest_ComputeRequest_InitRequest::mutable_expected_output_keys() {
  // @@protoc_insertion_point(field_mutable_list:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.expected_output_keys)
  return &expected_output_keys_;
}

// .ArmoniK.api.grpc.v1.DataChunk payload = 6;
inline bool ProcessRequest_ComputeRequest_InitRequest::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool ProcessRequest_ComputeRequest_InitRequest::has_payload() const {
  return _internal_has_payload();
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessRequest_ComputeRequest_InitRequest::_internal_payload() const {
  const ::ArmoniK::api::grpc::v1::DataChunk* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::ArmoniK::api::grpc::v1::DataChunk&>(
      ::ArmoniK::api::grpc::v1::_DataChunk_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessRequest_ComputeRequest_InitRequest::payload() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.payload)
  return _internal_payload();
}
inline void ProcessRequest_ComputeRequest_InitRequest::unsafe_arena_set_allocated_payload(
    ::ArmoniK::api::grpc::v1::DataChunk* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.payload)
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_ComputeRequest_InitRequest::release_payload() {
  
  ::ArmoniK::api::grpc::v1::DataChunk* temp = payload_;
  payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_ComputeRequest_InitRequest::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.payload)
  
  ::ArmoniK::api::grpc::v1::DataChunk* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_ComputeRequest_InitRequest::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::ArmoniK::api::grpc::v1::DataChunk>(GetArenaForAllocation());
    payload_ = p;
  }
  return payload_;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_ComputeRequest_InitRequest::mutable_payload() {
  ::ArmoniK::api::grpc::v1::DataChunk* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.payload)
  return _msg;
}
inline void ProcessRequest_ComputeRequest_InitRequest::set_allocated_payload(::ArmoniK::api::grpc::v1::DataChunk* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload));
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest.payload)
}

// -------------------------------------------------------------------

// ProcessRequest_ComputeRequest_InitData

// string key = 1;
inline bool ProcessRequest_ComputeRequest_InitData::_internal_has_key() const {
  return Type_case() == kKey;
}
inline bool ProcessRequest_ComputeRequest_InitData::has_key() const {
  return _internal_has_key();
}
inline void ProcessRequest_ComputeRequest_InitData::set_has_key() {
  _oneof_case_[0] = kKey;
}
inline void ProcessRequest_ComputeRequest_InitData::clear_key() {
  if (_internal_has_key()) {
    Type_.key_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_Type();
  }
}
inline const std::string& ProcessRequest_ComputeRequest_InitData::key() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline void ProcessRequest_ComputeRequest_InitData::set_key(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_key()) {
    clear_Type();
    set_has_key();
    Type_.key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Type_.key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData.key)
}
inline std::string* ProcessRequest_ComputeRequest_InitData::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData.key)
  return _s;
}
inline const std::string& ProcessRequest_ComputeRequest_InitData::_internal_key() const {
  if (_internal_has_key()) {
    return Type_.key_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ProcessRequest_ComputeRequest_InitData::_internal_set_key(const std::string& value) {
  if (!_internal_has_key()) {
    clear_Type();
    set_has_key();
    Type_.key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Type_.key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProcessRequest_ComputeRequest_InitData::_internal_mutable_key() {
  if (!_internal_has_key()) {
    clear_Type();
    set_has_key();
    Type_.key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Type_.key_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProcessRequest_ComputeRequest_InitData::release_key() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData.key)
  if (_internal_has_key()) {
    clear_has_Type();
    return Type_.key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ProcessRequest_ComputeRequest_InitData::set_allocated_key(std::string* key) {
  if (has_Type()) {
    clear_Type();
  }
  if (key != nullptr) {
    set_has_key();
    Type_.key_.UnsafeSetDefault(key);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(key);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData.key)
}

// bool last_data = 2;
inline bool ProcessRequest_ComputeRequest_InitData::_internal_has_last_data() const {
  return Type_case() == kLastData;
}
inline bool ProcessRequest_ComputeRequest_InitData::has_last_data() const {
  return _internal_has_last_data();
}
inline void ProcessRequest_ComputeRequest_InitData::set_has_last_data() {
  _oneof_case_[0] = kLastData;
}
inline void ProcessRequest_ComputeRequest_InitData::clear_last_data() {
  if (_internal_has_last_data()) {
    Type_.last_data_ = false;
    clear_has_Type();
  }
}
inline bool ProcessRequest_ComputeRequest_InitData::_internal_last_data() const {
  if (_internal_has_last_data()) {
    return Type_.last_data_;
  }
  return false;
}
inline void ProcessRequest_ComputeRequest_InitData::_internal_set_last_data(bool value) {
  if (!_internal_has_last_data()) {
    clear_Type();
    set_has_last_data();
  }
  Type_.last_data_ = value;
}
inline bool ProcessRequest_ComputeRequest_InitData::last_data() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData.last_data)
  return _internal_last_data();
}
inline void ProcessRequest_ComputeRequest_InitData::set_last_data(bool value) {
  _internal_set_last_data(value);
  // @@protoc_insertion_point(field_set:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData.last_data)
}

inline bool ProcessRequest_ComputeRequest_InitData::has_Type() const {
  return Type_case() != TYPE_NOT_SET;
}
inline void ProcessRequest_ComputeRequest_InitData::clear_has_Type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ProcessRequest_ComputeRequest_InitData::TypeCase ProcessRequest_ComputeRequest_InitData::Type_case() const {
  return ProcessRequest_ComputeRequest_InitData::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProcessRequest_ComputeRequest

// .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitRequest init_request = 1;
inline bool ProcessRequest_ComputeRequest::_internal_has_init_request() const {
  return Type_case() == kInitRequest;
}
inline bool ProcessRequest_ComputeRequest::has_init_request() const {
  return _internal_has_init_request();
}
inline void ProcessRequest_ComputeRequest::set_has_init_request() {
  _oneof_case_[0] = kInitRequest;
}
inline void ProcessRequest_ComputeRequest::clear_init_request() {
  if (_internal_has_init_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.init_request_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* ProcessRequest_ComputeRequest::release_init_request() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.init_request)
  if (_internal_has_init_request()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* temp = Type_.init_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.init_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest& ProcessRequest_ComputeRequest::_internal_init_request() const {
  return _internal_has_init_request()
      ? *Type_.init_request_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest&>(::ArmoniK::api::grpc::v1::_ProcessRequest_ComputeRequest_InitRequest_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest& ProcessRequest_ComputeRequest::init_request() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.init_request)
  return _internal_init_request();
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* ProcessRequest_ComputeRequest::unsafe_arena_release_init_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.init_request)
  if (_internal_has_init_request()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* temp = Type_.init_request_;
    Type_.init_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessRequest_ComputeRequest::unsafe_arena_set_allocated_init_request(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* init_request) {
  clear_Type();
  if (init_request) {
    set_has_init_request();
    Type_.init_request_ = init_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.init_request)
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* ProcessRequest_ComputeRequest::_internal_mutable_init_request() {
  if (!_internal_has_init_request()) {
    clear_Type();
    set_has_init_request();
    Type_.init_request_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest >(GetArenaForAllocation());
  }
  return Type_.init_request_;
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* ProcessRequest_ComputeRequest::mutable_init_request() {
  ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitRequest* _msg = _internal_mutable_init_request();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.init_request)
  return _msg;
}

// .ArmoniK.api.grpc.v1.DataChunk payload = 2;
inline bool ProcessRequest_ComputeRequest::_internal_has_payload() const {
  return Type_case() == kPayload;
}
inline bool ProcessRequest_ComputeRequest::has_payload() const {
  return _internal_has_payload();
}
inline void ProcessRequest_ComputeRequest::set_has_payload() {
  _oneof_case_[0] = kPayload;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_ComputeRequest::release_payload() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.payload)
  if (_internal_has_payload()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::DataChunk* temp = Type_.payload_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessRequest_ComputeRequest::_internal_payload() const {
  return _internal_has_payload()
      ? *Type_.payload_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::DataChunk&>(::ArmoniK::api::grpc::v1::_DataChunk_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessRequest_ComputeRequest::payload() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.payload)
  return _internal_payload();
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_ComputeRequest::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.payload)
  if (_internal_has_payload()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::DataChunk* temp = Type_.payload_;
    Type_.payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessRequest_ComputeRequest::unsafe_arena_set_allocated_payload(::ArmoniK::api::grpc::v1::DataChunk* payload) {
  clear_Type();
  if (payload) {
    set_has_payload();
    Type_.payload_ = payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.payload)
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_ComputeRequest::_internal_mutable_payload() {
  if (!_internal_has_payload()) {
    clear_Type();
    set_has_payload();
    Type_.payload_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::DataChunk >(GetArenaForAllocation());
  }
  return Type_.payload_;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_ComputeRequest::mutable_payload() {
  ::ArmoniK::api::grpc::v1::DataChunk* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.payload)
  return _msg;
}

// .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.InitData init_data = 3;
inline bool ProcessRequest_ComputeRequest::_internal_has_init_data() const {
  return Type_case() == kInitData;
}
inline bool ProcessRequest_ComputeRequest::has_init_data() const {
  return _internal_has_init_data();
}
inline void ProcessRequest_ComputeRequest::set_has_init_data() {
  _oneof_case_[0] = kInitData;
}
inline void ProcessRequest_ComputeRequest::clear_init_data() {
  if (_internal_has_init_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.init_data_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* ProcessRequest_ComputeRequest::release_init_data() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.init_data)
  if (_internal_has_init_data()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* temp = Type_.init_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.init_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData& ProcessRequest_ComputeRequest::_internal_init_data() const {
  return _internal_has_init_data()
      ? *Type_.init_data_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData&>(::ArmoniK::api::grpc::v1::_ProcessRequest_ComputeRequest_InitData_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData& ProcessRequest_ComputeRequest::init_data() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.init_data)
  return _internal_init_data();
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* ProcessRequest_ComputeRequest::unsafe_arena_release_init_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.init_data)
  if (_internal_has_init_data()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* temp = Type_.init_data_;
    Type_.init_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessRequest_ComputeRequest::unsafe_arena_set_allocated_init_data(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* init_data) {
  clear_Type();
  if (init_data) {
    set_has_init_data();
    Type_.init_data_ = init_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.init_data)
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* ProcessRequest_ComputeRequest::_internal_mutable_init_data() {
  if (!_internal_has_init_data()) {
    clear_Type();
    set_has_init_data();
    Type_.init_data_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData >(GetArenaForAllocation());
  }
  return Type_.init_data_;
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* ProcessRequest_ComputeRequest::mutable_init_data() {
  ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest_InitData* _msg = _internal_mutable_init_data();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.init_data)
  return _msg;
}

// .ArmoniK.api.grpc.v1.DataChunk data = 4;
inline bool ProcessRequest_ComputeRequest::_internal_has_data() const {
  return Type_case() == kData;
}
inline bool ProcessRequest_ComputeRequest::has_data() const {
  return _internal_has_data();
}
inline void ProcessRequest_ComputeRequest::set_has_data() {
  _oneof_case_[0] = kData;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_ComputeRequest::release_data() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.data)
  if (_internal_has_data()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::DataChunk* temp = Type_.data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessRequest_ComputeRequest::_internal_data() const {
  return _internal_has_data()
      ? *Type_.data_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::DataChunk&>(::ArmoniK::api::grpc::v1::_DataChunk_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessRequest_ComputeRequest::data() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.data)
  return _internal_data();
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_ComputeRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.data)
  if (_internal_has_data()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::DataChunk* temp = Type_.data_;
    Type_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessRequest_ComputeRequest::unsafe_arena_set_allocated_data(::ArmoniK::api::grpc::v1::DataChunk* data) {
  clear_Type();
  if (data) {
    set_has_data();
    Type_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.data)
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_ComputeRequest::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_Type();
    set_has_data();
    Type_.data_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::DataChunk >(GetArenaForAllocation());
  }
  return Type_.data_;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_ComputeRequest::mutable_data() {
  ::ArmoniK::api::grpc::v1::DataChunk* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest.data)
  return _msg;
}

inline bool ProcessRequest_ComputeRequest::has_Type() const {
  return Type_case() != TYPE_NOT_SET;
}
inline void ProcessRequest_ComputeRequest::clear_has_Type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ProcessRequest_ComputeRequest::TypeCase ProcessRequest_ComputeRequest::Type_case() const {
  return ProcessRequest_ComputeRequest::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProcessRequest_CreateTask

// string reply_id = 1;
inline void ProcessRequest_CreateTask::clear_reply_id() {
  reply_id_.ClearToEmpty();
}
inline const std::string& ProcessRequest_CreateTask::reply_id() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask.reply_id)
  return _internal_reply_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessRequest_CreateTask::set_reply_id(ArgT0&& arg0, ArgT... args) {
 
 reply_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask.reply_id)
}
inline std::string* ProcessRequest_CreateTask::mutable_reply_id() {
  std::string* _s = _internal_mutable_reply_id();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask.reply_id)
  return _s;
}
inline const std::string& ProcessRequest_CreateTask::_internal_reply_id() const {
  return reply_id_.Get();
}
inline void ProcessRequest_CreateTask::_internal_set_reply_id(const std::string& value) {
  
  reply_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProcessRequest_CreateTask::_internal_mutable_reply_id() {
  
  return reply_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProcessRequest_CreateTask::release_reply_id() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask.reply_id)
  return reply_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProcessRequest_CreateTask::set_allocated_reply_id(std::string* reply_id) {
  if (reply_id != nullptr) {
    
  } else {
    
  }
  reply_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reply_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reply_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask.reply_id)
}

// .ArmoniK.api.grpc.v1.CreateTaskReply reply = 2;
inline bool ProcessRequest_CreateTask::_internal_has_reply() const {
  return this != internal_default_instance() && reply_ != nullptr;
}
inline bool ProcessRequest_CreateTask::has_reply() const {
  return _internal_has_reply();
}
inline const ::ArmoniK::api::grpc::v1::CreateTaskReply& ProcessRequest_CreateTask::_internal_reply() const {
  const ::ArmoniK::api::grpc::v1::CreateTaskReply* p = reply_;
  return p != nullptr ? *p : reinterpret_cast<const ::ArmoniK::api::grpc::v1::CreateTaskReply&>(
      ::ArmoniK::api::grpc::v1::_CreateTaskReply_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::CreateTaskReply& ProcessRequest_CreateTask::reply() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask.reply)
  return _internal_reply();
}
inline void ProcessRequest_CreateTask::unsafe_arena_set_allocated_reply(
    ::ArmoniK::api::grpc::v1::CreateTaskReply* reply) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply_);
  }
  reply_ = reply;
  if (reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask.reply)
}
inline ::ArmoniK::api::grpc::v1::CreateTaskReply* ProcessRequest_CreateTask::release_reply() {
  
  ::ArmoniK::api::grpc::v1::CreateTaskReply* temp = reply_;
  reply_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ArmoniK::api::grpc::v1::CreateTaskReply* ProcessRequest_CreateTask::unsafe_arena_release_reply() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask.reply)
  
  ::ArmoniK::api::grpc::v1::CreateTaskReply* temp = reply_;
  reply_ = nullptr;
  return temp;
}
inline ::ArmoniK::api::grpc::v1::CreateTaskReply* ProcessRequest_CreateTask::_internal_mutable_reply() {
  
  if (reply_ == nullptr) {
    auto* p = CreateMaybeMessage<::ArmoniK::api::grpc::v1::CreateTaskReply>(GetArenaForAllocation());
    reply_ = p;
  }
  return reply_;
}
inline ::ArmoniK::api::grpc::v1::CreateTaskReply* ProcessRequest_CreateTask::mutable_reply() {
  ::ArmoniK::api::grpc::v1::CreateTaskReply* _msg = _internal_mutable_reply();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask.reply)
  return _msg;
}
inline void ProcessRequest_CreateTask::set_allocated_reply(::ArmoniK::api::grpc::v1::CreateTaskReply* reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply_);
  }
  if (reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply));
    if (message_arena != submessage_arena) {
      reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply, submessage_arena);
    }
    
  } else {
    
  }
  reply_ = reply;
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.CreateTask.reply)
}

// -------------------------------------------------------------------

// ProcessRequest_DataReply_Init

// string key = 1;
inline void ProcessRequest_DataReply_Init::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& ProcessRequest_DataReply_Init::key() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessRequest_DataReply_Init::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.key)
}
inline std::string* ProcessRequest_DataReply_Init::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.key)
  return _s;
}
inline const std::string& ProcessRequest_DataReply_Init::_internal_key() const {
  return key_.Get();
}
inline void ProcessRequest_DataReply_Init::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProcessRequest_DataReply_Init::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProcessRequest_DataReply_Init::release_key() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProcessRequest_DataReply_Init::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.key)
}

// .ArmoniK.api.grpc.v1.DataChunk data = 2;
inline bool ProcessRequest_DataReply_Init::_internal_has_data() const {
  return has_result_case() == kData;
}
inline bool ProcessRequest_DataReply_Init::has_data() const {
  return _internal_has_data();
}
inline void ProcessRequest_DataReply_Init::set_has_data() {
  _oneof_case_[0] = kData;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_DataReply_Init::release_data() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.data)
  if (_internal_has_data()) {
    clear_has_has_result();
      ::ArmoniK::api::grpc::v1::DataChunk* temp = has_result_.data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    has_result_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessRequest_DataReply_Init::_internal_data() const {
  return _internal_has_data()
      ? *has_result_.data_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::DataChunk&>(::ArmoniK::api::grpc::v1::_DataChunk_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessRequest_DataReply_Init::data() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.data)
  return _internal_data();
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_DataReply_Init::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.data)
  if (_internal_has_data()) {
    clear_has_has_result();
    ::ArmoniK::api::grpc::v1::DataChunk* temp = has_result_.data_;
    has_result_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessRequest_DataReply_Init::unsafe_arena_set_allocated_data(::ArmoniK::api::grpc::v1::DataChunk* data) {
  clear_has_result();
  if (data) {
    set_has_data();
    has_result_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.data)
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_DataReply_Init::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_has_result();
    set_has_data();
    has_result_.data_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::DataChunk >(GetArenaForAllocation());
  }
  return has_result_.data_;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_DataReply_Init::mutable_data() {
  ::ArmoniK::api::grpc::v1::DataChunk* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.data)
  return _msg;
}

// string error = 3;
inline bool ProcessRequest_DataReply_Init::_internal_has_error() const {
  return has_result_case() == kError;
}
inline bool ProcessRequest_DataReply_Init::has_error() const {
  return _internal_has_error();
}
inline void ProcessRequest_DataReply_Init::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void ProcessRequest_DataReply_Init::clear_error() {
  if (_internal_has_error()) {
    has_result_.error_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_has_result();
  }
}
inline const std::string& ProcessRequest_DataReply_Init::error() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline void ProcessRequest_DataReply_Init::set_error(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_error()) {
    clear_has_result();
    set_has_error();
    has_result_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  has_result_.error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.error)
}
inline std::string* ProcessRequest_DataReply_Init::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.error)
  return _s;
}
inline const std::string& ProcessRequest_DataReply_Init::_internal_error() const {
  if (_internal_has_error()) {
    return has_result_.error_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ProcessRequest_DataReply_Init::_internal_set_error(const std::string& value) {
  if (!_internal_has_error()) {
    clear_has_result();
    set_has_error();
    has_result_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  has_result_.error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProcessRequest_DataReply_Init::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_has_result();
    set_has_error();
    has_result_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return has_result_.error_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProcessRequest_DataReply_Init::release_error() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.error)
  if (_internal_has_error()) {
    clear_has_has_result();
    return has_result_.error_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ProcessRequest_DataReply_Init::set_allocated_error(std::string* error) {
  if (has_has_result()) {
    clear_has_result();
  }
  if (error != nullptr) {
    set_has_error();
    has_result_.error_.UnsafeSetDefault(error);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(error);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init.error)
}

inline bool ProcessRequest_DataReply_Init::has_has_result() const {
  return has_result_case() != HAS_RESULT_NOT_SET;
}
inline void ProcessRequest_DataReply_Init::clear_has_has_result() {
  _oneof_case_[0] = HAS_RESULT_NOT_SET;
}
inline ProcessRequest_DataReply_Init::HasResultCase ProcessRequest_DataReply_Init::has_result_case() const {
  return ProcessRequest_DataReply_Init::HasResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProcessRequest_DataReply

// string reply_id = 1;
inline void ProcessRequest_DataReply::clear_reply_id() {
  reply_id_.ClearToEmpty();
}
inline const std::string& ProcessRequest_DataReply::reply_id() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.reply_id)
  return _internal_reply_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessRequest_DataReply::set_reply_id(ArgT0&& arg0, ArgT... args) {
 
 reply_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.reply_id)
}
inline std::string* ProcessRequest_DataReply::mutable_reply_id() {
  std::string* _s = _internal_mutable_reply_id();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.reply_id)
  return _s;
}
inline const std::string& ProcessRequest_DataReply::_internal_reply_id() const {
  return reply_id_.Get();
}
inline void ProcessRequest_DataReply::_internal_set_reply_id(const std::string& value) {
  
  reply_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProcessRequest_DataReply::_internal_mutable_reply_id() {
  
  return reply_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProcessRequest_DataReply::release_reply_id() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.reply_id)
  return reply_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProcessRequest_DataReply::set_allocated_reply_id(std::string* reply_id) {
  if (reply_id != nullptr) {
    
  } else {
    
  }
  reply_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reply_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reply_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.reply_id)
}

// .ArmoniK.api.grpc.v1.ProcessRequest.DataReply.Init init = 2;
inline bool ProcessRequest_DataReply::_internal_has_init() const {
  return Type_case() == kInit;
}
inline bool ProcessRequest_DataReply::has_init() const {
  return _internal_has_init();
}
inline void ProcessRequest_DataReply::set_has_init() {
  _oneof_case_[0] = kInit;
}
inline void ProcessRequest_DataReply::clear_init() {
  if (_internal_has_init()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.init_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* ProcessRequest_DataReply::release_init() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.init)
  if (_internal_has_init()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* temp = Type_.init_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init& ProcessRequest_DataReply::_internal_init() const {
  return _internal_has_init()
      ? *Type_.init_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init&>(::ArmoniK::api::grpc::v1::_ProcessRequest_DataReply_Init_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init& ProcessRequest_DataReply::init() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.init)
  return _internal_init();
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* ProcessRequest_DataReply::unsafe_arena_release_init() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.init)
  if (_internal_has_init()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* temp = Type_.init_;
    Type_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessRequest_DataReply::unsafe_arena_set_allocated_init(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* init) {
  clear_Type();
  if (init) {
    set_has_init();
    Type_.init_ = init;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.init)
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* ProcessRequest_DataReply::_internal_mutable_init() {
  if (!_internal_has_init()) {
    clear_Type();
    set_has_init();
    Type_.init_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init >(GetArenaForAllocation());
  }
  return Type_.init_;
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* ProcessRequest_DataReply::mutable_init() {
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply_Init* _msg = _internal_mutable_init();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.init)
  return _msg;
}

// .ArmoniK.api.grpc.v1.DataChunk data = 3;
inline bool ProcessRequest_DataReply::_internal_has_data() const {
  return Type_case() == kData;
}
inline bool ProcessRequest_DataReply::has_data() const {
  return _internal_has_data();
}
inline void ProcessRequest_DataReply::set_has_data() {
  _oneof_case_[0] = kData;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_DataReply::release_data() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.data)
  if (_internal_has_data()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::DataChunk* temp = Type_.data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessRequest_DataReply::_internal_data() const {
  return _internal_has_data()
      ? *Type_.data_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::DataChunk&>(::ArmoniK::api::grpc::v1::_DataChunk_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessRequest_DataReply::data() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.data)
  return _internal_data();
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_DataReply::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.data)
  if (_internal_has_data()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::DataChunk* temp = Type_.data_;
    Type_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessRequest_DataReply::unsafe_arena_set_allocated_data(::ArmoniK::api::grpc::v1::DataChunk* data) {
  clear_Type();
  if (data) {
    set_has_data();
    Type_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.data)
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_DataReply::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_Type();
    set_has_data();
    Type_.data_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::DataChunk >(GetArenaForAllocation());
  }
  return Type_.data_;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessRequest_DataReply::mutable_data() {
  ::ArmoniK::api::grpc::v1::DataChunk* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.DataReply.data)
  return _msg;
}

inline bool ProcessRequest_DataReply::has_Type() const {
  return Type_case() != TYPE_NOT_SET;
}
inline void ProcessRequest_DataReply::clear_has_Type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ProcessRequest_DataReply::TypeCase ProcessRequest_DataReply::Type_case() const {
  return ProcessRequest_DataReply::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProcessRequest

// .ArmoniK.api.grpc.v1.ProcessRequest.ComputeRequest compute = 1;
inline bool ProcessRequest::_internal_has_compute() const {
  return Type_case() == kCompute;
}
inline bool ProcessRequest::has_compute() const {
  return _internal_has_compute();
}
inline void ProcessRequest::set_has_compute() {
  _oneof_case_[0] = kCompute;
}
inline void ProcessRequest::clear_compute() {
  if (_internal_has_compute()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.compute_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* ProcessRequest::release_compute() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.compute)
  if (_internal_has_compute()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* temp = Type_.compute_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.compute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest& ProcessRequest::_internal_compute() const {
  return _internal_has_compute()
      ? *Type_.compute_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest&>(::ArmoniK::api::grpc::v1::_ProcessRequest_ComputeRequest_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest& ProcessRequest::compute() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.compute)
  return _internal_compute();
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* ProcessRequest::unsafe_arena_release_compute() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessRequest.compute)
  if (_internal_has_compute()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* temp = Type_.compute_;
    Type_.compute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessRequest::unsafe_arena_set_allocated_compute(::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* compute) {
  clear_Type();
  if (compute) {
    set_has_compute();
    Type_.compute_ = compute;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.compute)
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* ProcessRequest::_internal_mutable_compute() {
  if (!_internal_has_compute()) {
    clear_Type();
    set_has_compute();
    Type_.compute_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest >(GetArenaForAllocation());
  }
  return Type_.compute_;
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* ProcessRequest::mutable_compute() {
  ::ArmoniK::api::grpc::v1::ProcessRequest_ComputeRequest* _msg = _internal_mutable_compute();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.compute)
  return _msg;
}

// .ArmoniK.api.grpc.v1.ProcessRequest.CreateTask create_task = 2;
inline bool ProcessRequest::_internal_has_create_task() const {
  return Type_case() == kCreateTask;
}
inline bool ProcessRequest::has_create_task() const {
  return _internal_has_create_task();
}
inline void ProcessRequest::set_has_create_task() {
  _oneof_case_[0] = kCreateTask;
}
inline void ProcessRequest::clear_create_task() {
  if (_internal_has_create_task()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.create_task_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* ProcessRequest::release_create_task() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.create_task)
  if (_internal_has_create_task()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* temp = Type_.create_task_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.create_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask& ProcessRequest::_internal_create_task() const {
  return _internal_has_create_task()
      ? *Type_.create_task_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask&>(::ArmoniK::api::grpc::v1::_ProcessRequest_CreateTask_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask& ProcessRequest::create_task() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.create_task)
  return _internal_create_task();
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* ProcessRequest::unsafe_arena_release_create_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessRequest.create_task)
  if (_internal_has_create_task()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* temp = Type_.create_task_;
    Type_.create_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessRequest::unsafe_arena_set_allocated_create_task(::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* create_task) {
  clear_Type();
  if (create_task) {
    set_has_create_task();
    Type_.create_task_ = create_task;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.create_task)
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* ProcessRequest::_internal_mutable_create_task() {
  if (!_internal_has_create_task()) {
    clear_Type();
    set_has_create_task();
    Type_.create_task_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask >(GetArenaForAllocation());
  }
  return Type_.create_task_;
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* ProcessRequest::mutable_create_task() {
  ::ArmoniK::api::grpc::v1::ProcessRequest_CreateTask* _msg = _internal_mutable_create_task();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.create_task)
  return _msg;
}

// .ArmoniK.api.grpc.v1.ProcessRequest.DataReply resource = 3;
inline bool ProcessRequest::_internal_has_resource() const {
  return Type_case() == kResource;
}
inline bool ProcessRequest::has_resource() const {
  return _internal_has_resource();
}
inline void ProcessRequest::set_has_resource() {
  _oneof_case_[0] = kResource;
}
inline void ProcessRequest::clear_resource() {
  if (_internal_has_resource()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.resource_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* ProcessRequest::release_resource() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.resource)
  if (_internal_has_resource()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* temp = Type_.resource_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.resource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& ProcessRequest::_internal_resource() const {
  return _internal_has_resource()
      ? *Type_.resource_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply&>(::ArmoniK::api::grpc::v1::_ProcessRequest_DataReply_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& ProcessRequest::resource() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.resource)
  return _internal_resource();
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* ProcessRequest::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessRequest.resource)
  if (_internal_has_resource()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* temp = Type_.resource_;
    Type_.resource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessRequest::unsafe_arena_set_allocated_resource(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* resource) {
  clear_Type();
  if (resource) {
    set_has_resource();
    Type_.resource_ = resource;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.resource)
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* ProcessRequest::_internal_mutable_resource() {
  if (!_internal_has_resource()) {
    clear_Type();
    set_has_resource();
    Type_.resource_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply >(GetArenaForAllocation());
  }
  return Type_.resource_;
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* ProcessRequest::mutable_resource() {
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.resource)
  return _msg;
}

// .ArmoniK.api.grpc.v1.ProcessRequest.DataReply common_data = 4;
inline bool ProcessRequest::_internal_has_common_data() const {
  return Type_case() == kCommonData;
}
inline bool ProcessRequest::has_common_data() const {
  return _internal_has_common_data();
}
inline void ProcessRequest::set_has_common_data() {
  _oneof_case_[0] = kCommonData;
}
inline void ProcessRequest::clear_common_data() {
  if (_internal_has_common_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.common_data_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* ProcessRequest::release_common_data() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.common_data)
  if (_internal_has_common_data()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* temp = Type_.common_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.common_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& ProcessRequest::_internal_common_data() const {
  return _internal_has_common_data()
      ? *Type_.common_data_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply&>(::ArmoniK::api::grpc::v1::_ProcessRequest_DataReply_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& ProcessRequest::common_data() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.common_data)
  return _internal_common_data();
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* ProcessRequest::unsafe_arena_release_common_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessRequest.common_data)
  if (_internal_has_common_data()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* temp = Type_.common_data_;
    Type_.common_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessRequest::unsafe_arena_set_allocated_common_data(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* common_data) {
  clear_Type();
  if (common_data) {
    set_has_common_data();
    Type_.common_data_ = common_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.common_data)
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* ProcessRequest::_internal_mutable_common_data() {
  if (!_internal_has_common_data()) {
    clear_Type();
    set_has_common_data();
    Type_.common_data_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply >(GetArenaForAllocation());
  }
  return Type_.common_data_;
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* ProcessRequest::mutable_common_data() {
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* _msg = _internal_mutable_common_data();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.common_data)
  return _msg;
}

// .ArmoniK.api.grpc.v1.ProcessRequest.DataReply direct_data = 5;
inline bool ProcessRequest::_internal_has_direct_data() const {
  return Type_case() == kDirectData;
}
inline bool ProcessRequest::has_direct_data() const {
  return _internal_has_direct_data();
}
inline void ProcessRequest::set_has_direct_data() {
  _oneof_case_[0] = kDirectData;
}
inline void ProcessRequest::clear_direct_data() {
  if (_internal_has_direct_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.direct_data_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* ProcessRequest::release_direct_data() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessRequest.direct_data)
  if (_internal_has_direct_data()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* temp = Type_.direct_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.direct_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& ProcessRequest::_internal_direct_data() const {
  return _internal_has_direct_data()
      ? *Type_.direct_data_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply&>(::ArmoniK::api::grpc::v1::_ProcessRequest_DataReply_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply& ProcessRequest::direct_data() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessRequest.direct_data)
  return _internal_direct_data();
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* ProcessRequest::unsafe_arena_release_direct_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessRequest.direct_data)
  if (_internal_has_direct_data()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* temp = Type_.direct_data_;
    Type_.direct_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessRequest::unsafe_arena_set_allocated_direct_data(::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* direct_data) {
  clear_Type();
  if (direct_data) {
    set_has_direct_data();
    Type_.direct_data_ = direct_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessRequest.direct_data)
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* ProcessRequest::_internal_mutable_direct_data() {
  if (!_internal_has_direct_data()) {
    clear_Type();
    set_has_direct_data();
    Type_.direct_data_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply >(GetArenaForAllocation());
  }
  return Type_.direct_data_;
}
inline ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* ProcessRequest::mutable_direct_data() {
  ::ArmoniK::api::grpc::v1::ProcessRequest_DataReply* _msg = _internal_mutable_direct_data();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessRequest.direct_data)
  return _msg;
}

inline bool ProcessRequest::has_Type() const {
  return Type_case() != TYPE_NOT_SET;
}
inline void ProcessRequest::clear_has_Type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ProcessRequest::TypeCase ProcessRequest::Type_case() const {
  return ProcessRequest::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProcessReply_Result

// .ArmoniK.api.grpc.v1.InitKeyedDataStream init = 1;
inline bool ProcessReply_Result::_internal_has_init() const {
  return Type_case() == kInit;
}
inline bool ProcessReply_Result::has_init() const {
  return _internal_has_init();
}
inline void ProcessReply_Result::set_has_init() {
  _oneof_case_[0] = kInit;
}
inline ::ArmoniK::api::grpc::v1::InitKeyedDataStream* ProcessReply_Result::release_init() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.Result.init)
  if (_internal_has_init()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::InitKeyedDataStream* temp = Type_.init_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::InitKeyedDataStream& ProcessReply_Result::_internal_init() const {
  return _internal_has_init()
      ? *Type_.init_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::InitKeyedDataStream&>(::ArmoniK::api::grpc::v1::_InitKeyedDataStream_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::InitKeyedDataStream& ProcessReply_Result::init() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.Result.init)
  return _internal_init();
}
inline ::ArmoniK::api::grpc::v1::InitKeyedDataStream* ProcessReply_Result::unsafe_arena_release_init() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessReply.Result.init)
  if (_internal_has_init()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::InitKeyedDataStream* temp = Type_.init_;
    Type_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessReply_Result::unsafe_arena_set_allocated_init(::ArmoniK::api::grpc::v1::InitKeyedDataStream* init) {
  clear_Type();
  if (init) {
    set_has_init();
    Type_.init_ = init;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.Result.init)
}
inline ::ArmoniK::api::grpc::v1::InitKeyedDataStream* ProcessReply_Result::_internal_mutable_init() {
  if (!_internal_has_init()) {
    clear_Type();
    set_has_init();
    Type_.init_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::InitKeyedDataStream >(GetArenaForAllocation());
  }
  return Type_.init_;
}
inline ::ArmoniK::api::grpc::v1::InitKeyedDataStream* ProcessReply_Result::mutable_init() {
  ::ArmoniK::api::grpc::v1::InitKeyedDataStream* _msg = _internal_mutable_init();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.Result.init)
  return _msg;
}

// .ArmoniK.api.grpc.v1.DataChunk data = 2;
inline bool ProcessReply_Result::_internal_has_data() const {
  return Type_case() == kData;
}
inline bool ProcessReply_Result::has_data() const {
  return _internal_has_data();
}
inline void ProcessReply_Result::set_has_data() {
  _oneof_case_[0] = kData;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessReply_Result::release_data() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.Result.data)
  if (_internal_has_data()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::DataChunk* temp = Type_.data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessReply_Result::_internal_data() const {
  return _internal_has_data()
      ? *Type_.data_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::DataChunk&>(::ArmoniK::api::grpc::v1::_DataChunk_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessReply_Result::data() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.Result.data)
  return _internal_data();
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessReply_Result::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessReply.Result.data)
  if (_internal_has_data()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::DataChunk* temp = Type_.data_;
    Type_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessReply_Result::unsafe_arena_set_allocated_data(::ArmoniK::api::grpc::v1::DataChunk* data) {
  clear_Type();
  if (data) {
    set_has_data();
    Type_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.Result.data)
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessReply_Result::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_Type();
    set_has_data();
    Type_.data_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::DataChunk >(GetArenaForAllocation());
  }
  return Type_.data_;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessReply_Result::mutable_data() {
  ::ArmoniK::api::grpc::v1::DataChunk* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.Result.data)
  return _msg;
}

inline bool ProcessReply_Result::has_Type() const {
  return Type_case() != TYPE_NOT_SET;
}
inline void ProcessReply_Result::clear_has_Type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ProcessReply_Result::TypeCase ProcessReply_Result::Type_case() const {
  return ProcessReply_Result::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProcessReply_CreateSmallTaskRequest

// .ArmoniK.api.grpc.v1.TaskOptions task_options = 1;
inline bool ProcessReply_CreateSmallTaskRequest::_internal_has_task_options() const {
  return this != internal_default_instance() && task_options_ != nullptr;
}
inline bool ProcessReply_CreateSmallTaskRequest::has_task_options() const {
  return _internal_has_task_options();
}
inline const ::ArmoniK::api::grpc::v1::TaskOptions& ProcessReply_CreateSmallTaskRequest::_internal_task_options() const {
  const ::ArmoniK::api::grpc::v1::TaskOptions* p = task_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::ArmoniK::api::grpc::v1::TaskOptions&>(
      ::ArmoniK::api::grpc::v1::_TaskOptions_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::TaskOptions& ProcessReply_CreateSmallTaskRequest::task_options() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest.task_options)
  return _internal_task_options();
}
inline void ProcessReply_CreateSmallTaskRequest::unsafe_arena_set_allocated_task_options(
    ::ArmoniK::api::grpc::v1::TaskOptions* task_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_options_);
  }
  task_options_ = task_options;
  if (task_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest.task_options)
}
inline ::ArmoniK::api::grpc::v1::TaskOptions* ProcessReply_CreateSmallTaskRequest::release_task_options() {
  
  ::ArmoniK::api::grpc::v1::TaskOptions* temp = task_options_;
  task_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ArmoniK::api::grpc::v1::TaskOptions* ProcessReply_CreateSmallTaskRequest::unsafe_arena_release_task_options() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest.task_options)
  
  ::ArmoniK::api::grpc::v1::TaskOptions* temp = task_options_;
  task_options_ = nullptr;
  return temp;
}
inline ::ArmoniK::api::grpc::v1::TaskOptions* ProcessReply_CreateSmallTaskRequest::_internal_mutable_task_options() {
  
  if (task_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::ArmoniK::api::grpc::v1::TaskOptions>(GetArenaForAllocation());
    task_options_ = p;
  }
  return task_options_;
}
inline ::ArmoniK::api::grpc::v1::TaskOptions* ProcessReply_CreateSmallTaskRequest::mutable_task_options() {
  ::ArmoniK::api::grpc::v1::TaskOptions* _msg = _internal_mutable_task_options();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest.task_options)
  return _msg;
}
inline void ProcessReply_CreateSmallTaskRequest::set_allocated_task_options(::ArmoniK::api::grpc::v1::TaskOptions* task_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_options_);
  }
  if (task_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_options));
    if (message_arena != submessage_arena) {
      task_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_options, submessage_arena);
    }
    
  } else {
    
  }
  task_options_ = task_options;
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest.task_options)
}

// repeated .ArmoniK.api.grpc.v1.TaskRequest task_requests = 2;
inline int ProcessReply_CreateSmallTaskRequest::_internal_task_requests_size() const {
  return task_requests_.size();
}
inline int ProcessReply_CreateSmallTaskRequest::task_requests_size() const {
  return _internal_task_requests_size();
}
inline ::ArmoniK::api::grpc::v1::TaskRequest* ProcessReply_CreateSmallTaskRequest::mutable_task_requests(int index) {
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest.task_requests)
  return task_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ArmoniK::api::grpc::v1::TaskRequest >*
ProcessReply_CreateSmallTaskRequest::mutable_task_requests() {
  // @@protoc_insertion_point(field_mutable_list:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest.task_requests)
  return &task_requests_;
}
inline const ::ArmoniK::api::grpc::v1::TaskRequest& ProcessReply_CreateSmallTaskRequest::_internal_task_requests(int index) const {
  return task_requests_.Get(index);
}
inline const ::ArmoniK::api::grpc::v1::TaskRequest& ProcessReply_CreateSmallTaskRequest::task_requests(int index) const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest.task_requests)
  return _internal_task_requests(index);
}
inline ::ArmoniK::api::grpc::v1::TaskRequest* ProcessReply_CreateSmallTaskRequest::_internal_add_task_requests() {
  return task_requests_.Add();
}
inline ::ArmoniK::api::grpc::v1::TaskRequest* ProcessReply_CreateSmallTaskRequest::add_task_requests() {
  ::ArmoniK::api::grpc::v1::TaskRequest* _add = _internal_add_task_requests();
  // @@protoc_insertion_point(field_add:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest.task_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ArmoniK::api::grpc::v1::TaskRequest >&
ProcessReply_CreateSmallTaskRequest::task_requests() const {
  // @@protoc_insertion_point(field_list:ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest.task_requests)
  return task_requests_;
}

// -------------------------------------------------------------------

// ProcessReply_CreateLargeTaskRequest_InitRequest

// .ArmoniK.api.grpc.v1.TaskOptions task_options = 1;
inline bool ProcessReply_CreateLargeTaskRequest_InitRequest::_internal_has_task_options() const {
  return this != internal_default_instance() && task_options_ != nullptr;
}
inline bool ProcessReply_CreateLargeTaskRequest_InitRequest::has_task_options() const {
  return _internal_has_task_options();
}
inline const ::ArmoniK::api::grpc::v1::TaskOptions& ProcessReply_CreateLargeTaskRequest_InitRequest::_internal_task_options() const {
  const ::ArmoniK::api::grpc::v1::TaskOptions* p = task_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::ArmoniK::api::grpc::v1::TaskOptions&>(
      ::ArmoniK::api::grpc::v1::_TaskOptions_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::TaskOptions& ProcessReply_CreateLargeTaskRequest_InitRequest::task_options() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest.task_options)
  return _internal_task_options();
}
inline void ProcessReply_CreateLargeTaskRequest_InitRequest::unsafe_arena_set_allocated_task_options(
    ::ArmoniK::api::grpc::v1::TaskOptions* task_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_options_);
  }
  task_options_ = task_options;
  if (task_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest.task_options)
}
inline ::ArmoniK::api::grpc::v1::TaskOptions* ProcessReply_CreateLargeTaskRequest_InitRequest::release_task_options() {
  
  ::ArmoniK::api::grpc::v1::TaskOptions* temp = task_options_;
  task_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ArmoniK::api::grpc::v1::TaskOptions* ProcessReply_CreateLargeTaskRequest_InitRequest::unsafe_arena_release_task_options() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest.task_options)
  
  ::ArmoniK::api::grpc::v1::TaskOptions* temp = task_options_;
  task_options_ = nullptr;
  return temp;
}
inline ::ArmoniK::api::grpc::v1::TaskOptions* ProcessReply_CreateLargeTaskRequest_InitRequest::_internal_mutable_task_options() {
  
  if (task_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::ArmoniK::api::grpc::v1::TaskOptions>(GetArenaForAllocation());
    task_options_ = p;
  }
  return task_options_;
}
inline ::ArmoniK::api::grpc::v1::TaskOptions* ProcessReply_CreateLargeTaskRequest_InitRequest::mutable_task_options() {
  ::ArmoniK::api::grpc::v1::TaskOptions* _msg = _internal_mutable_task_options();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest.task_options)
  return _msg;
}
inline void ProcessReply_CreateLargeTaskRequest_InitRequest::set_allocated_task_options(::ArmoniK::api::grpc::v1::TaskOptions* task_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_options_);
  }
  if (task_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_options));
    if (message_arena != submessage_arena) {
      task_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_options, submessage_arena);
    }
    
  } else {
    
  }
  task_options_ = task_options;
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest.task_options)
}

// -------------------------------------------------------------------

// ProcessReply_CreateLargeTaskRequest

// .ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.InitRequest init_request = 1;
inline bool ProcessReply_CreateLargeTaskRequest::_internal_has_init_request() const {
  return Type_case() == kInitRequest;
}
inline bool ProcessReply_CreateLargeTaskRequest::has_init_request() const {
  return _internal_has_init_request();
}
inline void ProcessReply_CreateLargeTaskRequest::set_has_init_request() {
  _oneof_case_[0] = kInitRequest;
}
inline void ProcessReply_CreateLargeTaskRequest::clear_init_request() {
  if (_internal_has_init_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.init_request_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* ProcessReply_CreateLargeTaskRequest::release_init_request() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.init_request)
  if (_internal_has_init_request()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* temp = Type_.init_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.init_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest& ProcessReply_CreateLargeTaskRequest::_internal_init_request() const {
  return _internal_has_init_request()
      ? *Type_.init_request_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest&>(::ArmoniK::api::grpc::v1::_ProcessReply_CreateLargeTaskRequest_InitRequest_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest& ProcessReply_CreateLargeTaskRequest::init_request() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.init_request)
  return _internal_init_request();
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* ProcessReply_CreateLargeTaskRequest::unsafe_arena_release_init_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.init_request)
  if (_internal_has_init_request()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* temp = Type_.init_request_;
    Type_.init_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessReply_CreateLargeTaskRequest::unsafe_arena_set_allocated_init_request(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* init_request) {
  clear_Type();
  if (init_request) {
    set_has_init_request();
    Type_.init_request_ = init_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.init_request)
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* ProcessReply_CreateLargeTaskRequest::_internal_mutable_init_request() {
  if (!_internal_has_init_request()) {
    clear_Type();
    set_has_init_request();
    Type_.init_request_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest >(GetArenaForAllocation());
  }
  return Type_.init_request_;
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* ProcessReply_CreateLargeTaskRequest::mutable_init_request() {
  ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest_InitRequest* _msg = _internal_mutable_init_request();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.init_request)
  return _msg;
}

// .ArmoniK.api.grpc.v1.InitTaskRequest init_task = 2;
inline bool ProcessReply_CreateLargeTaskRequest::_internal_has_init_task() const {
  return Type_case() == kInitTask;
}
inline bool ProcessReply_CreateLargeTaskRequest::has_init_task() const {
  return _internal_has_init_task();
}
inline void ProcessReply_CreateLargeTaskRequest::set_has_init_task() {
  _oneof_case_[0] = kInitTask;
}
inline ::ArmoniK::api::grpc::v1::InitTaskRequest* ProcessReply_CreateLargeTaskRequest::release_init_task() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.init_task)
  if (_internal_has_init_task()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::InitTaskRequest* temp = Type_.init_task_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.init_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::InitTaskRequest& ProcessReply_CreateLargeTaskRequest::_internal_init_task() const {
  return _internal_has_init_task()
      ? *Type_.init_task_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::InitTaskRequest&>(::ArmoniK::api::grpc::v1::_InitTaskRequest_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::InitTaskRequest& ProcessReply_CreateLargeTaskRequest::init_task() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.init_task)
  return _internal_init_task();
}
inline ::ArmoniK::api::grpc::v1::InitTaskRequest* ProcessReply_CreateLargeTaskRequest::unsafe_arena_release_init_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.init_task)
  if (_internal_has_init_task()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::InitTaskRequest* temp = Type_.init_task_;
    Type_.init_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessReply_CreateLargeTaskRequest::unsafe_arena_set_allocated_init_task(::ArmoniK::api::grpc::v1::InitTaskRequest* init_task) {
  clear_Type();
  if (init_task) {
    set_has_init_task();
    Type_.init_task_ = init_task;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.init_task)
}
inline ::ArmoniK::api::grpc::v1::InitTaskRequest* ProcessReply_CreateLargeTaskRequest::_internal_mutable_init_task() {
  if (!_internal_has_init_task()) {
    clear_Type();
    set_has_init_task();
    Type_.init_task_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::InitTaskRequest >(GetArenaForAllocation());
  }
  return Type_.init_task_;
}
inline ::ArmoniK::api::grpc::v1::InitTaskRequest* ProcessReply_CreateLargeTaskRequest::mutable_init_task() {
  ::ArmoniK::api::grpc::v1::InitTaskRequest* _msg = _internal_mutable_init_task();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.init_task)
  return _msg;
}

// .ArmoniK.api.grpc.v1.DataChunk task_payload = 3;
inline bool ProcessReply_CreateLargeTaskRequest::_internal_has_task_payload() const {
  return Type_case() == kTaskPayload;
}
inline bool ProcessReply_CreateLargeTaskRequest::has_task_payload() const {
  return _internal_has_task_payload();
}
inline void ProcessReply_CreateLargeTaskRequest::set_has_task_payload() {
  _oneof_case_[0] = kTaskPayload;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessReply_CreateLargeTaskRequest::release_task_payload() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.task_payload)
  if (_internal_has_task_payload()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::DataChunk* temp = Type_.task_payload_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.task_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessReply_CreateLargeTaskRequest::_internal_task_payload() const {
  return _internal_has_task_payload()
      ? *Type_.task_payload_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::DataChunk&>(::ArmoniK::api::grpc::v1::_DataChunk_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::DataChunk& ProcessReply_CreateLargeTaskRequest::task_payload() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.task_payload)
  return _internal_task_payload();
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessReply_CreateLargeTaskRequest::unsafe_arena_release_task_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.task_payload)
  if (_internal_has_task_payload()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::DataChunk* temp = Type_.task_payload_;
    Type_.task_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessReply_CreateLargeTaskRequest::unsafe_arena_set_allocated_task_payload(::ArmoniK::api::grpc::v1::DataChunk* task_payload) {
  clear_Type();
  if (task_payload) {
    set_has_task_payload();
    Type_.task_payload_ = task_payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.task_payload)
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessReply_CreateLargeTaskRequest::_internal_mutable_task_payload() {
  if (!_internal_has_task_payload()) {
    clear_Type();
    set_has_task_payload();
    Type_.task_payload_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::DataChunk >(GetArenaForAllocation());
  }
  return Type_.task_payload_;
}
inline ::ArmoniK::api::grpc::v1::DataChunk* ProcessReply_CreateLargeTaskRequest::mutable_task_payload() {
  ::ArmoniK::api::grpc::v1::DataChunk* _msg = _internal_mutable_task_payload();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest.task_payload)
  return _msg;
}

inline bool ProcessReply_CreateLargeTaskRequest::has_Type() const {
  return Type_case() != TYPE_NOT_SET;
}
inline void ProcessReply_CreateLargeTaskRequest::clear_has_Type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ProcessReply_CreateLargeTaskRequest::TypeCase ProcessReply_CreateLargeTaskRequest::Type_case() const {
  return ProcessReply_CreateLargeTaskRequest::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProcessReply_DataRequest

// string key = 1;
inline void ProcessReply_DataRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& ProcessReply_DataRequest::key() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.DataRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessReply_DataRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ArmoniK.api.grpc.v1.ProcessReply.DataRequest.key)
}
inline std::string* ProcessReply_DataRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.DataRequest.key)
  return _s;
}
inline const std::string& ProcessReply_DataRequest::_internal_key() const {
  return key_.Get();
}
inline void ProcessReply_DataRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProcessReply_DataRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProcessReply_DataRequest::release_key() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.DataRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProcessReply_DataRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.DataRequest.key)
}

// -------------------------------------------------------------------

// ProcessReply

// string request_id = 1;
inline void ProcessReply::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& ProcessReply::request_id() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessReply::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ArmoniK.api.grpc.v1.ProcessReply.request_id)
}
inline std::string* ProcessReply::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.request_id)
  return _s;
}
inline const std::string& ProcessReply::_internal_request_id() const {
  return request_id_.Get();
}
inline void ProcessReply::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProcessReply::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProcessReply::release_request_id() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProcessReply::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.request_id)
}

// .ArmoniK.api.grpc.v1.Output output = 2;
inline bool ProcessReply::_internal_has_output() const {
  return Type_case() == kOutput;
}
inline bool ProcessReply::has_output() const {
  return _internal_has_output();
}
inline void ProcessReply::set_has_output() {
  _oneof_case_[0] = kOutput;
}
inline ::ArmoniK::api::grpc::v1::Output* ProcessReply::release_output() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.output)
  if (_internal_has_output()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::Output* temp = Type_.output_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.output_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::Output& ProcessReply::_internal_output() const {
  return _internal_has_output()
      ? *Type_.output_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::Output&>(::ArmoniK::api::grpc::v1::_Output_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::Output& ProcessReply::output() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.output)
  return _internal_output();
}
inline ::ArmoniK::api::grpc::v1::Output* ProcessReply::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessReply.output)
  if (_internal_has_output()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::Output* temp = Type_.output_;
    Type_.output_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessReply::unsafe_arena_set_allocated_output(::ArmoniK::api::grpc::v1::Output* output) {
  clear_Type();
  if (output) {
    set_has_output();
    Type_.output_ = output;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.output)
}
inline ::ArmoniK::api::grpc::v1::Output* ProcessReply::_internal_mutable_output() {
  if (!_internal_has_output()) {
    clear_Type();
    set_has_output();
    Type_.output_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::Output >(GetArenaForAllocation());
  }
  return Type_.output_;
}
inline ::ArmoniK::api::grpc::v1::Output* ProcessReply::mutable_output() {
  ::ArmoniK::api::grpc::v1::Output* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.output)
  return _msg;
}

// .ArmoniK.api.grpc.v1.ProcessReply.Result result = 3;
inline bool ProcessReply::_internal_has_result() const {
  return Type_case() == kResult;
}
inline bool ProcessReply::has_result() const {
  return _internal_has_result();
}
inline void ProcessReply::set_has_result() {
  _oneof_case_[0] = kResult;
}
inline void ProcessReply::clear_result() {
  if (_internal_has_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.result_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_Result* ProcessReply::release_result() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.result)
  if (_internal_has_result()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessReply_Result* temp = Type_.result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_Result& ProcessReply::_internal_result() const {
  return _internal_has_result()
      ? *Type_.result_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessReply_Result&>(::ArmoniK::api::grpc::v1::_ProcessReply_Result_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_Result& ProcessReply::result() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.result)
  return _internal_result();
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_Result* ProcessReply::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessReply.result)
  if (_internal_has_result()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessReply_Result* temp = Type_.result_;
    Type_.result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessReply::unsafe_arena_set_allocated_result(::ArmoniK::api::grpc::v1::ProcessReply_Result* result) {
  clear_Type();
  if (result) {
    set_has_result();
    Type_.result_ = result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.result)
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_Result* ProcessReply::_internal_mutable_result() {
  if (!_internal_has_result()) {
    clear_Type();
    set_has_result();
    Type_.result_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply_Result >(GetArenaForAllocation());
  }
  return Type_.result_;
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_Result* ProcessReply::mutable_result() {
  ::ArmoniK::api::grpc::v1::ProcessReply_Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.result)
  return _msg;
}

// .ArmoniK.api.grpc.v1.ProcessReply.CreateSmallTaskRequest create_small_task = 4;
inline bool ProcessReply::_internal_has_create_small_task() const {
  return Type_case() == kCreateSmallTask;
}
inline bool ProcessReply::has_create_small_task() const {
  return _internal_has_create_small_task();
}
inline void ProcessReply::set_has_create_small_task() {
  _oneof_case_[0] = kCreateSmallTask;
}
inline void ProcessReply::clear_create_small_task() {
  if (_internal_has_create_small_task()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.create_small_task_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* ProcessReply::release_create_small_task() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.create_small_task)
  if (_internal_has_create_small_task()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* temp = Type_.create_small_task_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.create_small_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest& ProcessReply::_internal_create_small_task() const {
  return _internal_has_create_small_task()
      ? *Type_.create_small_task_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest&>(::ArmoniK::api::grpc::v1::_ProcessReply_CreateSmallTaskRequest_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest& ProcessReply::create_small_task() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.create_small_task)
  return _internal_create_small_task();
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* ProcessReply::unsafe_arena_release_create_small_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessReply.create_small_task)
  if (_internal_has_create_small_task()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* temp = Type_.create_small_task_;
    Type_.create_small_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessReply::unsafe_arena_set_allocated_create_small_task(::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* create_small_task) {
  clear_Type();
  if (create_small_task) {
    set_has_create_small_task();
    Type_.create_small_task_ = create_small_task;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.create_small_task)
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* ProcessReply::_internal_mutable_create_small_task() {
  if (!_internal_has_create_small_task()) {
    clear_Type();
    set_has_create_small_task();
    Type_.create_small_task_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest >(GetArenaForAllocation());
  }
  return Type_.create_small_task_;
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* ProcessReply::mutable_create_small_task() {
  ::ArmoniK::api::grpc::v1::ProcessReply_CreateSmallTaskRequest* _msg = _internal_mutable_create_small_task();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.create_small_task)
  return _msg;
}

// .ArmoniK.api.grpc.v1.ProcessReply.CreateLargeTaskRequest create_large_task = 5;
inline bool ProcessReply::_internal_has_create_large_task() const {
  return Type_case() == kCreateLargeTask;
}
inline bool ProcessReply::has_create_large_task() const {
  return _internal_has_create_large_task();
}
inline void ProcessReply::set_has_create_large_task() {
  _oneof_case_[0] = kCreateLargeTask;
}
inline void ProcessReply::clear_create_large_task() {
  if (_internal_has_create_large_task()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.create_large_task_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* ProcessReply::release_create_large_task() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.create_large_task)
  if (_internal_has_create_large_task()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* temp = Type_.create_large_task_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.create_large_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest& ProcessReply::_internal_create_large_task() const {
  return _internal_has_create_large_task()
      ? *Type_.create_large_task_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest&>(::ArmoniK::api::grpc::v1::_ProcessReply_CreateLargeTaskRequest_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest& ProcessReply::create_large_task() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.create_large_task)
  return _internal_create_large_task();
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* ProcessReply::unsafe_arena_release_create_large_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessReply.create_large_task)
  if (_internal_has_create_large_task()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* temp = Type_.create_large_task_;
    Type_.create_large_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessReply::unsafe_arena_set_allocated_create_large_task(::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* create_large_task) {
  clear_Type();
  if (create_large_task) {
    set_has_create_large_task();
    Type_.create_large_task_ = create_large_task;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.create_large_task)
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* ProcessReply::_internal_mutable_create_large_task() {
  if (!_internal_has_create_large_task()) {
    clear_Type();
    set_has_create_large_task();
    Type_.create_large_task_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest >(GetArenaForAllocation());
  }
  return Type_.create_large_task_;
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* ProcessReply::mutable_create_large_task() {
  ::ArmoniK::api::grpc::v1::ProcessReply_CreateLargeTaskRequest* _msg = _internal_mutable_create_large_task();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.create_large_task)
  return _msg;
}

// .ArmoniK.api.grpc.v1.ProcessReply.DataRequest resource = 6;
inline bool ProcessReply::_internal_has_resource() const {
  return Type_case() == kResource;
}
inline bool ProcessReply::has_resource() const {
  return _internal_has_resource();
}
inline void ProcessReply::set_has_resource() {
  _oneof_case_[0] = kResource;
}
inline void ProcessReply::clear_resource() {
  if (_internal_has_resource()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.resource_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* ProcessReply::release_resource() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.resource)
  if (_internal_has_resource()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* temp = Type_.resource_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.resource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& ProcessReply::_internal_resource() const {
  return _internal_has_resource()
      ? *Type_.resource_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest&>(::ArmoniK::api::grpc::v1::_ProcessReply_DataRequest_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& ProcessReply::resource() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.resource)
  return _internal_resource();
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* ProcessReply::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessReply.resource)
  if (_internal_has_resource()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* temp = Type_.resource_;
    Type_.resource_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessReply::unsafe_arena_set_allocated_resource(::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* resource) {
  clear_Type();
  if (resource) {
    set_has_resource();
    Type_.resource_ = resource;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.resource)
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* ProcessReply::_internal_mutable_resource() {
  if (!_internal_has_resource()) {
    clear_Type();
    set_has_resource();
    Type_.resource_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest >(GetArenaForAllocation());
  }
  return Type_.resource_;
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* ProcessReply::mutable_resource() {
  ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.resource)
  return _msg;
}

// .ArmoniK.api.grpc.v1.ProcessReply.DataRequest common_data = 7;
inline bool ProcessReply::_internal_has_common_data() const {
  return Type_case() == kCommonData;
}
inline bool ProcessReply::has_common_data() const {
  return _internal_has_common_data();
}
inline void ProcessReply::set_has_common_data() {
  _oneof_case_[0] = kCommonData;
}
inline void ProcessReply::clear_common_data() {
  if (_internal_has_common_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.common_data_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* ProcessReply::release_common_data() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.common_data)
  if (_internal_has_common_data()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* temp = Type_.common_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.common_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& ProcessReply::_internal_common_data() const {
  return _internal_has_common_data()
      ? *Type_.common_data_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest&>(::ArmoniK::api::grpc::v1::_ProcessReply_DataRequest_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& ProcessReply::common_data() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.common_data)
  return _internal_common_data();
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* ProcessReply::unsafe_arena_release_common_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessReply.common_data)
  if (_internal_has_common_data()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* temp = Type_.common_data_;
    Type_.common_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessReply::unsafe_arena_set_allocated_common_data(::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* common_data) {
  clear_Type();
  if (common_data) {
    set_has_common_data();
    Type_.common_data_ = common_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.common_data)
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* ProcessReply::_internal_mutable_common_data() {
  if (!_internal_has_common_data()) {
    clear_Type();
    set_has_common_data();
    Type_.common_data_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest >(GetArenaForAllocation());
  }
  return Type_.common_data_;
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* ProcessReply::mutable_common_data() {
  ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* _msg = _internal_mutable_common_data();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.common_data)
  return _msg;
}

// .ArmoniK.api.grpc.v1.ProcessReply.DataRequest direct_data = 8;
inline bool ProcessReply::_internal_has_direct_data() const {
  return Type_case() == kDirectData;
}
inline bool ProcessReply::has_direct_data() const {
  return _internal_has_direct_data();
}
inline void ProcessReply::set_has_direct_data() {
  _oneof_case_[0] = kDirectData;
}
inline void ProcessReply::clear_direct_data() {
  if (_internal_has_direct_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Type_.direct_data_;
    }
    clear_has_Type();
  }
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* ProcessReply::release_direct_data() {
  // @@protoc_insertion_point(field_release:ArmoniK.api.grpc.v1.ProcessReply.direct_data)
  if (_internal_has_direct_data()) {
    clear_has_Type();
      ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* temp = Type_.direct_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Type_.direct_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& ProcessReply::_internal_direct_data() const {
  return _internal_has_direct_data()
      ? *Type_.direct_data_
      : reinterpret_cast< ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest&>(::ArmoniK::api::grpc::v1::_ProcessReply_DataRequest_default_instance_);
}
inline const ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest& ProcessReply::direct_data() const {
  // @@protoc_insertion_point(field_get:ArmoniK.api.grpc.v1.ProcessReply.direct_data)
  return _internal_direct_data();
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* ProcessReply::unsafe_arena_release_direct_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ArmoniK.api.grpc.v1.ProcessReply.direct_data)
  if (_internal_has_direct_data()) {
    clear_has_Type();
    ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* temp = Type_.direct_data_;
    Type_.direct_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProcessReply::unsafe_arena_set_allocated_direct_data(::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* direct_data) {
  clear_Type();
  if (direct_data) {
    set_has_direct_data();
    Type_.direct_data_ = direct_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ArmoniK.api.grpc.v1.ProcessReply.direct_data)
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* ProcessReply::_internal_mutable_direct_data() {
  if (!_internal_has_direct_data()) {
    clear_Type();
    set_has_direct_data();
    Type_.direct_data_ = CreateMaybeMessage< ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest >(GetArenaForAllocation());
  }
  return Type_.direct_data_;
}
inline ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* ProcessReply::mutable_direct_data() {
  ::ArmoniK::api::grpc::v1::ProcessReply_DataRequest* _msg = _internal_mutable_direct_data();
  // @@protoc_insertion_point(field_mutable:ArmoniK.api.grpc.v1.ProcessReply.direct_data)
  return _msg;
}

inline bool ProcessReply::has_Type() const {
  return Type_case() != TYPE_NOT_SET;
}
inline void ProcessReply::clear_has_Type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ProcessReply::TypeCase ProcessReply::Type_case() const {
  return ProcessReply::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace grpc
}  // namespace api
}  // namespace ArmoniK

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_worker_5fservice_2eproto
