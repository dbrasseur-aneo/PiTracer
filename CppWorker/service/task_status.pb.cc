// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_status.proto

#include "task_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ArmoniK {
namespace api {
namespace grpc {
namespace v1 {
namespace TaskStatus {
}  // namespace TaskStatus
}  // namespace v1
}  // namespace grpc
}  // namespace api
}  // namespace ArmoniK
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_task_5fstatus_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_task_5fstatus_2eproto = nullptr;
const uint32_t TableStruct_task_5fstatus_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_task_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021task_status.proto\022\036ArmoniK.api.grpc.v1"
  ".TaskStatus*\311\002\n\nTaskStatus\022\033\n\027TASK_STATU"
  "S_UNSPECIFIED\020\000\022\030\n\024TASK_STATUS_CREATING\020"
  "\001\022\031\n\025TASK_STATUS_SUBMITTED\020\002\022\032\n\026TASK_STA"
  "TUS_DISPATCHED\020\003\022\032\n\026TASK_STATUS_PROCESSI"
  "NG\020\n\022\031\n\025TASK_STATUS_PROCESSED\020\013\022\031\n\025TASK_"
  "STATUS_COMPLETED\020\004\022\025\n\021TASK_STATUS_ERROR\020"
  "\005\022\026\n\022TASK_STATUS_FAILED\020\006\022\027\n\023TASK_STATUS"
  "_TIMEOUT\020\007\022\031\n\025TASK_STATUS_CANCELING\020\010\022\030\n"
  "\024TASK_STATUS_CANCELED\020\tB\026\252\002\023ArmoniK.Api."
  "gRPC.V1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_task_5fstatus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_5fstatus_2eproto = {
  false, false, 415, descriptor_table_protodef_task_5fstatus_2eproto, "task_status.proto", 
  &descriptor_table_task_5fstatus_2eproto_once, nullptr, 0, 0,
  schemas, file_default_instances, TableStruct_task_5fstatus_2eproto::offsets,
  nullptr, file_level_enum_descriptors_task_5fstatus_2eproto, file_level_service_descriptors_task_5fstatus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_task_5fstatus_2eproto_getter() {
  return &descriptor_table_task_5fstatus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_task_5fstatus_2eproto(&descriptor_table_task_5fstatus_2eproto);
namespace ArmoniK {
namespace api {
namespace grpc {
namespace v1 {
namespace TaskStatus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_5fstatus_2eproto);
  return file_level_enum_descriptors_task_5fstatus_2eproto[0];
}
bool TaskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TaskStatus
}  // namespace v1
}  // namespace grpc
}  // namespace api
}  // namespace ArmoniK
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
