# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import objects_pb2 as objects__pb2
import submitter_service_pb2 as submitter__service__pb2


class SubmitterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServiceConfiguration = channel.unary_unary(
                '/ArmoniK.api.grpc.v1.Submitter/GetServiceConfiguration',
                request_serializer=objects__pb2.Empty.SerializeToString,
                response_deserializer=objects__pb2.Configuration.FromString,
                )
        self.CreateSession = channel.unary_unary(
                '/ArmoniK.api.grpc.v1.Submitter/CreateSession',
                request_serializer=submitter__service__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=submitter__service__pb2.CreateSessionReply.FromString,
                )
        self.CancelSession = channel.unary_unary(
                '/ArmoniK.api.grpc.v1.Submitter/CancelSession',
                request_serializer=submitter__service__pb2.Session.SerializeToString,
                response_deserializer=objects__pb2.Empty.FromString,
                )
        self.CreateSmallTasks = channel.unary_unary(
                '/ArmoniK.api.grpc.v1.Submitter/CreateSmallTasks',
                request_serializer=submitter__service__pb2.CreateSmallTaskRequest.SerializeToString,
                response_deserializer=objects__pb2.CreateTaskReply.FromString,
                )
        self.CreateLargeTasks = channel.stream_unary(
                '/ArmoniK.api.grpc.v1.Submitter/CreateLargeTasks',
                request_serializer=submitter__service__pb2.CreateLargeTaskRequest.SerializeToString,
                response_deserializer=objects__pb2.CreateTaskReply.FromString,
                )
        self.ListTasks = channel.unary_unary(
                '/ArmoniK.api.grpc.v1.Submitter/ListTasks',
                request_serializer=submitter__service__pb2.TaskFilter.SerializeToString,
                response_deserializer=objects__pb2.TaskIdList.FromString,
                )
        self.CountTasks = channel.unary_unary(
                '/ArmoniK.api.grpc.v1.Submitter/CountTasks',
                request_serializer=submitter__service__pb2.TaskFilter.SerializeToString,
                response_deserializer=objects__pb2.Count.FromString,
                )
        self.TryGetResultStream = channel.unary_stream(
                '/ArmoniK.api.grpc.v1.Submitter/TryGetResultStream',
                request_serializer=objects__pb2.ResultRequest.SerializeToString,
                response_deserializer=submitter__service__pb2.ResultReply.FromString,
                )
        self.TryGetTaskOutput = channel.unary_unary(
                '/ArmoniK.api.grpc.v1.Submitter/TryGetTaskOutput',
                request_serializer=objects__pb2.ResultRequest.SerializeToString,
                response_deserializer=objects__pb2.Output.FromString,
                )
        self.WaitForAvailability = channel.unary_unary(
                '/ArmoniK.api.grpc.v1.Submitter/WaitForAvailability',
                request_serializer=objects__pb2.ResultRequest.SerializeToString,
                response_deserializer=submitter__service__pb2.AvailabilityReply.FromString,
                )
        self.WaitForCompletion = channel.unary_unary(
                '/ArmoniK.api.grpc.v1.Submitter/WaitForCompletion',
                request_serializer=submitter__service__pb2.WaitRequest.SerializeToString,
                response_deserializer=objects__pb2.Count.FromString,
                )
        self.CancelTasks = channel.unary_unary(
                '/ArmoniK.api.grpc.v1.Submitter/CancelTasks',
                request_serializer=submitter__service__pb2.TaskFilter.SerializeToString,
                response_deserializer=objects__pb2.Empty.FromString,
                )
        self.GetStatus = channel.unary_unary(
                '/ArmoniK.api.grpc.v1.Submitter/GetStatus',
                request_serializer=submitter__service__pb2.GetStatusrequest.SerializeToString,
                response_deserializer=submitter__service__pb2.GetStatusReply.FromString,
                )


class SubmitterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetServiceConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSmallTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLargeTasks(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryGetResultStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryGetTaskOutput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitForAvailability(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitForCompletion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubmitterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetServiceConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceConfiguration,
                    request_deserializer=objects__pb2.Empty.FromString,
                    response_serializer=objects__pb2.Configuration.SerializeToString,
            ),
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=submitter__service__pb2.CreateSessionRequest.FromString,
                    response_serializer=submitter__service__pb2.CreateSessionReply.SerializeToString,
            ),
            'CancelSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelSession,
                    request_deserializer=submitter__service__pb2.Session.FromString,
                    response_serializer=objects__pb2.Empty.SerializeToString,
            ),
            'CreateSmallTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSmallTasks,
                    request_deserializer=submitter__service__pb2.CreateSmallTaskRequest.FromString,
                    response_serializer=objects__pb2.CreateTaskReply.SerializeToString,
            ),
            'CreateLargeTasks': grpc.stream_unary_rpc_method_handler(
                    servicer.CreateLargeTasks,
                    request_deserializer=submitter__service__pb2.CreateLargeTaskRequest.FromString,
                    response_serializer=objects__pb2.CreateTaskReply.SerializeToString,
            ),
            'ListTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTasks,
                    request_deserializer=submitter__service__pb2.TaskFilter.FromString,
                    response_serializer=objects__pb2.TaskIdList.SerializeToString,
            ),
            'CountTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.CountTasks,
                    request_deserializer=submitter__service__pb2.TaskFilter.FromString,
                    response_serializer=objects__pb2.Count.SerializeToString,
            ),
            'TryGetResultStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TryGetResultStream,
                    request_deserializer=objects__pb2.ResultRequest.FromString,
                    response_serializer=submitter__service__pb2.ResultReply.SerializeToString,
            ),
            'TryGetTaskOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.TryGetTaskOutput,
                    request_deserializer=objects__pb2.ResultRequest.FromString,
                    response_serializer=objects__pb2.Output.SerializeToString,
            ),
            'WaitForAvailability': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitForAvailability,
                    request_deserializer=objects__pb2.ResultRequest.FromString,
                    response_serializer=submitter__service__pb2.AvailabilityReply.SerializeToString,
            ),
            'WaitForCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitForCompletion,
                    request_deserializer=submitter__service__pb2.WaitRequest.FromString,
                    response_serializer=objects__pb2.Count.SerializeToString,
            ),
            'CancelTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTasks,
                    request_deserializer=submitter__service__pb2.TaskFilter.FromString,
                    response_serializer=objects__pb2.Empty.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=submitter__service__pb2.GetStatusrequest.FromString,
                    response_serializer=submitter__service__pb2.GetStatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ArmoniK.api.grpc.v1.Submitter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Submitter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetServiceConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArmoniK.api.grpc.v1.Submitter/GetServiceConfiguration',
            objects__pb2.Empty.SerializeToString,
            objects__pb2.Configuration.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArmoniK.api.grpc.v1.Submitter/CreateSession',
            submitter__service__pb2.CreateSessionRequest.SerializeToString,
            submitter__service__pb2.CreateSessionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArmoniK.api.grpc.v1.Submitter/CancelSession',
            submitter__service__pb2.Session.SerializeToString,
            objects__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSmallTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArmoniK.api.grpc.v1.Submitter/CreateSmallTasks',
            submitter__service__pb2.CreateSmallTaskRequest.SerializeToString,
            objects__pb2.CreateTaskReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateLargeTasks(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/ArmoniK.api.grpc.v1.Submitter/CreateLargeTasks',
            submitter__service__pb2.CreateLargeTaskRequest.SerializeToString,
            objects__pb2.CreateTaskReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArmoniK.api.grpc.v1.Submitter/ListTasks',
            submitter__service__pb2.TaskFilter.SerializeToString,
            objects__pb2.TaskIdList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArmoniK.api.grpc.v1.Submitter/CountTasks',
            submitter__service__pb2.TaskFilter.SerializeToString,
            objects__pb2.Count.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryGetResultStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ArmoniK.api.grpc.v1.Submitter/TryGetResultStream',
            objects__pb2.ResultRequest.SerializeToString,
            submitter__service__pb2.ResultReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryGetTaskOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArmoniK.api.grpc.v1.Submitter/TryGetTaskOutput',
            objects__pb2.ResultRequest.SerializeToString,
            objects__pb2.Output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitForAvailability(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArmoniK.api.grpc.v1.Submitter/WaitForAvailability',
            objects__pb2.ResultRequest.SerializeToString,
            submitter__service__pb2.AvailabilityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitForCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArmoniK.api.grpc.v1.Submitter/WaitForCompletion',
            submitter__service__pb2.WaitRequest.SerializeToString,
            objects__pb2.Count.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArmoniK.api.grpc.v1.Submitter/CancelTasks',
            submitter__service__pb2.TaskFilter.SerializeToString,
            objects__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ArmoniK.api.grpc.v1.Submitter/GetStatus',
            submitter__service__pb2.GetStatusrequest.SerializeToString,
            submitter__service__pb2.GetStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
